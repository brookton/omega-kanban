webpackHotUpdate_N_E("pages/[_id]/[project]",{

/***/ "./components/board.tsx":
/*!******************************!*\
  !*** ./components/board.tsx ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ \"./node_modules/@babel/runtime/helpers/esm/extends.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/slicedToArray */ \"./node_modules/@babel/runtime/helpers/esm/slicedToArray.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/esm/defineProperty */ \"./node_modules/@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/esm/toConsumableArray */ \"./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var react_beautiful_dnd__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react-beautiful-dnd */ \"./node_modules/react-beautiful-dnd/dist/react-beautiful-dnd.esm.js\");\n/* harmony import */ var _top__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./top */ \"./components/top.tsx\");\n/* harmony import */ var _column__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./column */ \"./components/column.tsx\");\n/* harmony import */ var _add_column__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./add-column */ \"./components/add-column.tsx\");\n/* harmony import */ var _archive__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./archive */ \"./components/archive.tsx\");\n/* harmony import */ var _card_modal__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./card-modal */ \"./components/card-modal.tsx\");\n/* harmony import */ var notistack__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! notistack */ \"./node_modules/notistack/dist/notistack.esm.js\");\n\n\n\n\n\nvar _jsxFileName = \"/Users/heegupark/Desktop/Workspace/MyProject/omega-kanban/components/board.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\n\n\n\n\n\n\n\nfunction Board(props) {\n  _s();\n\n  var _this = this;\n\n  var _useSnackbar = Object(notistack__WEBPACK_IMPORTED_MODULE_11__[\"useSnackbar\"])(),\n      enqueueSnackbar = _useSnackbar.enqueueSnackbar; // const [state, setState] = useState<IColumns>({\n  //   columns: {\n  //     'column-0': {\n  //       id: 'column-0',\n  //       title: 'Plan',\n  //       cards: [\n  //         {\n  //           id: uuidv4(),\n  //           cardTitle: 'Create HTML skeleton',\n  //           note: '',\n  //           isCardCompleted: false,\n  //           isArchived: false,\n  //           checklists: [],\n  //           activities: [],\n  //           dueDate: new Date(2020, 9, 11),\n  //           createdAt: new Date(2020, 8, 11),\n  //           updatedAt: new Date(2020, 8, 11),\n  //         },\n  //       ],\n  //       colorIndex: 0,\n  //       createdAt: new Date(2020, 8, 1),\n  //       updatedAt: new Date(2020, 8, 11),\n  //     },\n  //     'column-1': {\n  //       id: 'column-1',\n  //       title: 'Progress',\n  //       cards: [],\n  //       colorIndex: 1,\n  //       createdAt: new Date(2020, 8, 2),\n  //       updatedAt: new Date(2020, 8, 2),\n  //     },\n  //     'column-2': {\n  //       id: 'column-2',\n  //       title: 'Complete',\n  //       cards: [],\n  //       colorIndex: 2,\n  //       createdAt: new Date(2020, 8, 3),\n  //       updatedAt: new Date(2020, 8, 3),\n  //     },\n  //   },\n  //   columnOrder: ['column-0', 'column-1', 'column-2'],\n  //   archive: {\n  //     id: 'archive',\n  //     title: 'Archive',\n  //     cards: [],\n  //     colorIndex: 0,\n  //     createdAt: new Date(),\n  //     updatedAt: new Date(),\n  //   },\n  // });\n\n\n  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_4__[\"useState\"])({\n    columns: {},\n    columnOrder: [],\n    archive: {\n      _id: 'archive',\n      title: 'Archive',\n      cards: [],\n      colorIndex: 0,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    }\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  var _useState2 = Object(react__WEBPACK_IMPORTED_MODULE_4__[\"useState\"])(0),\n      colorIndex = _useState2[0],\n      setColorIndex = _useState2[1];\n\n  var _useState3 = Object(react__WEBPACK_IMPORTED_MODULE_4__[\"useState\"])({}),\n      currentCard = _useState3[0],\n      setCurrentCard = _useState3[1];\n\n  var _useState4 = Object(react__WEBPACK_IMPORTED_MODULE_4__[\"useState\"])({}),\n      currentColumn = _useState4[0],\n      setCurrentColumn = _useState4[1];\n\n  var _useState5 = Object(react__WEBPACK_IMPORTED_MODULE_4__[\"useState\"])(false),\n      isLoadingCompleted = _useState5[0],\n      setIsLoadingCompleted = _useState5[1];\n\n  var _useState6 = Object(react__WEBPACK_IMPORTED_MODULE_4__[\"useState\"])(''),\n      archiveColumnId = _useState6[0],\n      setArchiveColumnId = _useState6[1]; // useEffect(() => {\n  //   setColorIndex(state.columnOrder.length - 1);\n  // }, []);\n\n\n  Object(react__WEBPACK_IMPORTED_MODULE_4__[\"useEffect\"])(function () {\n    getColumns(props._id);\n  }, []);\n\n  var getColumns = function getColumns(_id) {\n    fetch(\"/api/get-columns\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        _id: _id\n      })\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      if (data.success) {\n        // state.columnOrder = [];\n        // state.archive = {\n        //   _id: 'archive',\n        //   title: 'Archive',\n        //   cards: [],\n        //   colorIndex: 0,\n        //   createdAt: new Date(),\n        //   updatedAt: new Date(),\n        // };\n        state.columnOrder = Object(_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(data.columnOrder);\n        console.log(data.columnOrder);\n        state.archive = data.archive[0];\n        setArchiveColumnId(data.archive[0]._id);\n        data.columns.map(function (column) {\n          state.columns[column._id] = column; // state.columnOrder.push(column._id);\n        });\n        console.log(state.columnOrder);\n        setState(_objectSpread({}, state));\n        setColorIndex(data.columns.length);\n        setIsLoadingCompleted(true);\n      } else {}\n    })[\"catch\"](function (err) {\n      console.error(\"Something wrong happened while getting a route:\".concat(err.message));\n    });\n  };\n\n  var addColumn = function addColumn(sectionTitle, card) {\n    // const newSection: ISection = {\n    //   _id: uuidv4(),\n    //   title: sectionTitle,\n    //   cards: [],\n    //   colorIndex: colorIndex + 1,\n    //   createdAt: new Date(),\n    //   updatedAt: new Date(),\n    // };\n    // if (card) {\n    //   newSection.cards.push(card);\n    // }\n    fetch('/api/add-column', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        projectId: props._id,\n        title: sectionTitle,\n        colorIndex: colorIndex + 1\n      })\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      if (data.success) {\n        state.columns[data.data._id] = _objectSpread(_objectSpread({}, data.data), {}, {\n          cards: []\n        });\n        state.columnOrder.push(data.data._id);\n        setColorIndex(colorIndex + 1);\n        setState(_objectSpread({}, state));\n        handleSnackbar(\"'\".concat(sectionTitle, \"' is created\"), 'success');\n      } else {\n        handleSnackbar(\"Failed to add a column\", 'error');\n      }\n    })[\"catch\"](function (err) {\n      console.error(\"Something wrong happened while adding a column:\".concat(err.message));\n    });\n  };\n\n  var updateCard = function updateCard(columnId, card) {\n    fetch(\"/api/update-card\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(card)\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      if (data.success) {\n        state.columns[columnId].cards.map(function (item, index) {\n          if (item._id === card._id) {\n            if (card.cardTitle) {\n              item.cardTitle = card.cardTitle;\n              addActivity(columnId, card._id, \"Card title is changed to \".concat(card.cardTitle));\n            }\n\n            if (card.note) {\n              item.note = card.note;\n              addActivity(columnId, card._id, \"Card note is changed\");\n            }\n\n            if (card.isCardCompleted) {\n              item.isCardCompleted = card.isCardCompleted;\n              addActivity(columnId, card._id, \"Card is completed\");\n            }\n\n            if (card.isArchived) {\n              var tempCard = {};\n              console.log(tempCard);\n              state.columns[columnId].cards.map(function (card, index) {\n                if (item._id === card._id) {\n                  item.isArchived = true;\n                  item.columnId = 'archive';\n                  tempCard = card;\n                  state.columns[columnId].cards.splice(index, 1);\n                }\n              });\n              updateDate(columnId, card._id);\n              state.archive.cards.push(tempCard);\n              addActivity('archive', card._id, \"Card is archived\");\n            }\n\n            if (card.dueDate) {\n              item.dueDate = card.dueDate;\n              addActivity(columnId, card._id, \"A due date is set to \".concat(convertDate(card.dueDate)));\n            }\n          }\n        });\n        updateDate(columnId, card._id);\n        setState(_objectSpread({}, state));\n      } else {\n        handleSnackbar('Something wrong happened while updating a card', 'warning');\n      }\n    })[\"catch\"](function (err) {\n      console.error(\"Something wrong happened while updating a card:\".concat(err.message));\n    });\n  };\n\n  var addCard = function addCard(columnId, cardTitle) {\n    fetch(\"/api/add-card\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        columnId: columnId,\n        cardTitle: cardTitle\n      })\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      if (data.success) {\n        state.columns[columnId].cards.push(data.data);\n        addActivity(columnId, data.data._id, \"A card with title '\".concat(cardTitle, \"' is created in '\").concat(state.columns[columnId].title, \"'\"));\n        updateDate(columnId, '');\n        setState(_objectSpread({}, state));\n      } else {\n        handleSnackbar('Something wrong happened while adding a card', 'warning');\n      }\n    })[\"catch\"](function (err) {\n      console.error(\"Something wrong happened while adding a card:\".concat(err.message));\n    });\n  };\n\n  var updateColumnTitle = function updateColumnTitle(_id, title) {\n    fetch(\"/api/update-column-title\", {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        _id: _id,\n        title: title\n      })\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      if (data.success) {\n        state.columns[_id].title = title;\n        state.columns[_id].updatedAt = new Date();\n        setState(_objectSpread({}, state));\n        handleSnackbar(\"Column title is updated\", 'info');\n      } else {\n        handleSnackbar(\"Failed to update a column title\", 'error');\n      }\n    })[\"catch\"](function (err) {\n      console.error(\"Something wrong happened while getting a route:\".concat(err.message));\n      handleSnackbar(\"Failed to update a column title\", 'error');\n    });\n  };\n\n  var deleteColumn = function deleteColumn(columnId) {\n    var title = state.columns[columnId].title;\n    fetch(\"/api/delete-column\", {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        projectId: props._id,\n        columnId: columnId\n      })\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      if (data.success) {\n        delete state.columns[columnId];\n        state.columnOrder.splice(state.columnOrder.indexOf(columnId), 1);\n        setState(_objectSpread({}, state));\n        handleSnackbar(\"'\".concat(title, \"' is deleted\"), 'error');\n      } else {\n        handleSnackbar(\"Failed to delete a column\", 'warning');\n      }\n    })[\"catch\"](function (err) {\n      console.error(\"Something wrong happened while deleting a column:\".concat(err.message));\n    });\n  };\n\n  var deleteCard = function deleteCard(columnId, cardId) {\n    fetch(\"/api/delete-card\", {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        _id: cardId\n      })\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      if (data.success) {\n        state.columns[columnId].cards.map(function (card, index) {\n          if (card._id === cardId) {\n            state.columns[columnId].cards.splice(index, 1);\n          }\n        });\n        updateDate(columnId, cardId);\n        handleSnackbar('A card is deleted', 'error');\n        setState(_objectSpread({}, state));\n      } else {\n        handleSnackbar(\"Failed to delete a card\", 'warning');\n      }\n    })[\"catch\"](function (err) {\n      console.error(\"Something wrong happened while deleting a card:\".concat(err.message));\n    });\n  };\n\n  var archiveCard = function archiveCard(columnId, cardId) {\n    fetch(\"/api/archive-card\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        _id: cardId,\n        projectId: props._id\n      })\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      if (data.success) {\n        var tempCard = {};\n        state.columns[columnId].cards.map(function (card, index) {\n          if (card._id === cardId) {\n            card.isArchived = true;\n            tempCard = card;\n            state.columns[columnId].cards.splice(index, 1);\n          }\n        });\n        updateDate(columnId, cardId);\n        state.archive.cards.push(tempCard);\n        addActivity(archiveColumnId, cardId, \"Card is archived\");\n        setState(_objectSpread({}, state));\n      } else {\n        handleSnackbar('Something wrong happened while archiving a card', 'warning');\n      }\n    })[\"catch\"](function (err) {\n      console.error(\"Something wrong happened while archiving a card:\".concat(err.message));\n    });\n  };\n\n  var onDragEnd = function onDragEnd(result) {\n    var _objectSpread3;\n\n    if (!result.destination) {\n      return;\n    }\n\n    if (result.type === 'column') {\n      var columnOrder = reorder(state.columnOrder, result.source.index, result.destination.index);\n      fetch(\"/api/reorder-column\", {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          _id: props._id,\n          columnOrder: columnOrder\n        })\n      }).then(function (res) {\n        return res.json();\n      }).then(function (data) {\n        if (data.success) {\n          handleSnackbar(\"'\".concat(state.columns[state.columnOrder[result.source.index]].title, \"' and '\").concat(state.columns[state.columnOrder[result.destination.index]].title, \"' are reordered\"), 'success');\n          setState(_objectSpread(_objectSpread({}, state), {}, {\n            columnOrder: columnOrder\n          }));\n        } else {\n          handleSnackbar('Something wrong happened while reordering columns', 'warning');\n        }\n      })[\"catch\"](function (err) {\n        console.error(\"Something wrong happened while reordering columns:\".concat(err.message));\n      });\n      console.log(columnOrder);\n      return;\n    }\n\n    if (result.source.droppableId === result.destination.droppableId) {\n      var column = state.columns[result.source.droppableId];\n      var cards = reorder(column.cards, result.source.index, result.destination.index);\n\n      var _newState = _objectSpread(_objectSpread({}, state), {}, {\n        columns: _objectSpread(_objectSpread({}, state.columns), {}, Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({}, column._id, _objectSpread(_objectSpread({}, column), {}, {\n          cards: cards\n        })))\n      });\n\n      setState(_newState);\n      handleSnackbar(\"Cards are reordered in '\".concat(column.title, \"'\"), 'success');\n      return;\n    }\n\n    var sourceColumn = state.columns[result.source.droppableId];\n    var destinationColumn = state.columns[result.destination.droppableId];\n    var card = sourceColumn.cards[result.source.index];\n\n    var newSourceColumn = _objectSpread(_objectSpread({}, sourceColumn), {}, {\n      cards: Object(_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(sourceColumn.cards)\n    });\n\n    newSourceColumn.cards.splice(result.source.index, 1);\n\n    var newDestinationColumn = _objectSpread(_objectSpread({}, destinationColumn), {}, {\n      cards: Object(_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(destinationColumn.cards)\n    });\n\n    newDestinationColumn.cards.splice(result.destination.index, 0, card);\n\n    var newState = _objectSpread(_objectSpread({}, state), {}, {\n      columns: _objectSpread(_objectSpread({}, state.columns), {}, (_objectSpread3 = {}, Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_objectSpread3, newSourceColumn._id, newSourceColumn), Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_objectSpread3, newDestinationColumn._id, newDestinationColumn), _objectSpread3))\n    });\n\n    handleSnackbar(\"A card is moved from '\".concat(newSourceColumn.title, \"' to '\").concat(newDestinationColumn.title, \"'\"), 'success');\n    setState(newState);\n  };\n\n  var getItemStyle = function getItemStyle(isDragging, draggableStyle) {\n    return _objectSpread({\n      display: 'flex',\n      flexDirection: 'row'\n    }, draggableStyle);\n  };\n\n  var reorder = function reorder(list, startIndex, endIndex) {\n    var result = Array.from(list);\n\n    var _result$splice = result.splice(startIndex, 1),\n        _result$splice2 = Object(_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_result$splice, 1),\n        removed = _result$splice2[0];\n\n    result.splice(endIndex, 0, removed);\n    return result;\n  }; // const reorderCards = (\n  //   list: Array<ICard>,\n  //   startIndex: number,\n  //   endIndex: number\n  // ) => {\n  //   const result = Array.from(list);\n  //   const [removed] = result.splice(startIndex, 1);\n  //   result.splice(endIndex, 0, removed);\n  //   return result;\n  // };\n  // const reorderColumn = (\n  //   list: Array<string>,\n  //   startIndex: number,\n  //   endIndex: number\n  // ) => {\n  //   const result = Array.from(list);\n  //   const [removed] = result.splice(startIndex, 1);\n  //   result.splice(endIndex, 0, removed);\n  //   return result;\n  // };\n\n\n  var _React$useState = react__WEBPACK_IMPORTED_MODULE_4___default.a.useState(false),\n      _React$useState2 = Object(_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_React$useState, 2),\n      open = _React$useState2[0],\n      setOpen = _React$useState2[1];\n\n  var setCardForOpen = function setCardForOpen(columnId, cardId) {\n    if (columnId === archiveColumnId) {\n      var card = state.archive.cards.filter(function (card) {\n        return card._id === cardId;\n      });\n      setCurrentCard(card[0]);\n      setCurrentColumn(state.archive);\n    } else {\n      var _card = state.columns[columnId].cards.filter(function (card) {\n        return card._id === cardId;\n      });\n\n      setCurrentCard(_card[0]);\n      setCurrentColumn(state.columns[columnId]);\n    }\n  };\n\n  var handleModalClose = function handleModalClose() {\n    setOpen(false);\n  };\n\n  var addChecklist = function addChecklist(columnId, cardId, checklist) {\n    fetch(\"/api/add-checklist\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        cardId: cardId,\n        checklist: checklist\n      })\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      if (data.success) {\n        state.columns[columnId].cards.map(function (card) {\n          if (card._id === cardId) {\n            card.checklists.push(data.data);\n          }\n        });\n        addActivity(columnId, cardId, \"\".concat(checklist, \" is added to the checklist\")); // updateDate(columnId, cardId);\n\n        setState(_objectSpread({}, state));\n      } else {\n        handleSnackbar('Something wrong happened while adding a checklist', 'warning');\n      }\n    })[\"catch\"](function (err) {\n      console.error(\"Something wrong happened while adding a checklist:\".concat(err.message));\n    });\n  };\n\n  var updateDate = function updateDate(columnId, cardId) {\n    if (cardId) {\n      state.columns[columnId].cards.map(function (card) {\n        if (card._id === cardId) {\n          card.updatedAt = new Date();\n        }\n      });\n    }\n\n    state.columns[columnId].updatedAt = new Date();\n    setState(_objectSpread({}, state));\n  };\n\n  var updateChecklist = function updateChecklist(columnId, cardId, checklist) {\n    fetch(\"/api/update-checklist\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(checklist)\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      if (data.success) {\n        state.columns[columnId].cards.map(function (card) {\n          if (card._id === cardId) {\n            if (checklist.checklist) {\n              card.checklists.map(function (item) {\n                if (item._id === checklist._id) {\n                  item.checklist = checklist.checklist;\n                }\n              });\n              updateDate(columnId, cardId);\n              addActivity(columnId, cardId, \"A checklist is updated to \".concat(checklist.checklist));\n            }\n\n            if (checklist.isChecked !== undefined) {\n              if (checklist.isChecked) {\n                card.checklists.map(function (item) {\n                  if (item._id === checklist._id) {\n                    item.isChecked = true;\n                  }\n                });\n                updateDate(columnId, cardId);\n                addActivity(columnId, cardId, \"A checklist is completed\");\n              }\n\n              console.log(checklist.isChecked);\n\n              if (!checklist.isChecked) {\n                card.checklists.map(function (item) {\n                  if (item._id === checklist._id) {\n                    item.isChecked = false;\n                  }\n                });\n                updateDate(columnId, cardId);\n                addActivity(columnId, cardId, \"A checklist is incompleted\");\n              }\n            }\n          }\n        });\n        setState(_objectSpread({}, state));\n      } else {\n        handleSnackbar('Something wrong happened while updating a checklist', 'warning');\n      }\n    })[\"catch\"](function (err) {\n      console.error(\"Something wrong happened while updating a checklist:\".concat(err.message));\n    });\n  };\n\n  var deleteChecklist = function deleteChecklist(columnId, cardId, checklistId) {\n    fetch(\"/api/delete-checklist\", {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        _id: checklistId\n      })\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      if (data.success) {\n        state.columns[columnId].cards.map(function (card) {\n          if (card._id === cardId) {\n            card.checklists = card.checklists.filter(function (checklist) {\n              return checklist._id !== checklistId;\n            });\n          }\n        });\n        updateDate(columnId, cardId);\n        addActivity(columnId, cardId, \"A checklist is deleted\");\n        setState(_objectSpread({}, state));\n      } else {\n        handleSnackbar(\"Failed to delete a checklist\", 'warning');\n      }\n    })[\"catch\"](function (err) {\n      console.error(\"Something wrong happened while deleting a checklist:\".concat(err.message));\n    });\n  };\n\n  var convertDate = function convertDate(date) {\n    var formattedDate = new Date(date);\n    var month = formattedDate.toString().split(' ')[1];\n    var day = formattedDate.toString().split(' ')[2];\n    var year = formattedDate.toString().split(' ')[3];\n    return \"\".concat(month, \" \").concat(day, \", \").concat(year);\n  };\n\n  var addActivity = function addActivity(columnId, cardId, activity) {\n    fetch(\"/api/add-activity\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        cardId: cardId,\n        activity: activity\n      })\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      if (data.success) {\n        if (columnId === archiveColumnId) {\n          state.archive.cards.map(function (card) {\n            if (card._id === cardId) {\n              card.activities.unshift(data.data);\n            }\n          });\n        } else {\n          state.columns[columnId].cards.map(function (card) {\n            if (card._id === cardId) {\n              card.activities.unshift(data.data);\n            }\n          });\n        }\n\n        if (activity.toLowerCase().includes('archive')) {\n          handleSnackbar(activity, 'warning');\n        } else {\n          handleSnackbar(activity, 'info');\n        }\n\n        setState(_objectSpread({}, state));\n      } else {\n        handleSnackbar('Something wrong happened while adding an activity', 'warning');\n      }\n    })[\"catch\"](function (err) {\n      console.error(\"Something wrong happened while getting an activity:\".concat(err.message));\n    });\n  }; // const changeProjectName = (projectName: string) => {\n  //   handleSnackbar(`Project name is changed to '${projectName}'`, 'info');\n  //   props.setProjectName(projectName);\n  // };\n\n\n  var handleSnackbar = function handleSnackbar(message, variant) {\n    enqueueSnackbar(message, {\n      variant: variant\n    });\n  };\n\n  return __jsx(react__WEBPACK_IMPORTED_MODULE_4___default.a.Fragment, null, isLoadingCompleted && __jsx(react__WEBPACK_IMPORTED_MODULE_4___default.a.Fragment, null, __jsx(_top__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {\n    _id: props._id,\n    changeProjectName: props.changeProjectName,\n    projectName: props.projectName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 863,\n      columnNumber: 11\n    }\n  }), __jsx(\"div\", {\n    className: \"board\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 868,\n      columnNumber: 11\n    }\n  }, __jsx(react_beautiful_dnd__WEBPACK_IMPORTED_MODULE_5__[\"DragDropContext\"], {\n    onDragEnd: onDragEnd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 869,\n      columnNumber: 13\n    }\n  }, __jsx(react_beautiful_dnd__WEBPACK_IMPORTED_MODULE_5__[\"Droppable\"], {\n    direction: \"horizontal\",\n    droppableId: \"all-droppables\",\n    type: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 870,\n      columnNumber: 15\n    }\n  }, function (provided, snapshot) {\n    return __jsx(\"div\", Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n      ref: provided.innerRef\n    }, provided.droppableProps, {\n      style: getItemStyle(snapshot.isDragging, provided.droppableProps.style),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 876,\n        columnNumber: 19\n      }\n    }), state.columnOrder.map(function (columnId, index) {\n      return __jsx(_column__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n        key: columnId,\n        column: state.columns[columnId],\n        index: index,\n        addCard: addCard,\n        setOpen: setOpen,\n        setCardForOpen: setCardForOpen,\n        updateColumnTitle: updateColumnTitle,\n        deleteColumn: deleteColumn // onDragEnd={onDragEnd}\n        ,\n        convertDate: convertDate,\n        open: true,\n        projectName: props.projectName,\n        handleModalClose: handleModalClose,\n        addChecklist: addChecklist,\n        updateChecklist: updateChecklist,\n        addActivity: addActivity,\n        updateDate: updateDate,\n        updateCard: updateCard,\n        deleteChecklist: deleteChecklist,\n        deleteCard: deleteCard,\n        archiveCard: archiveCard,\n        archiveColumnId: archiveColumnId,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 887,\n          columnNumber: 27\n        }\n      });\n    }), provided.placeholder);\n  })), state.archive.cards.length > 0 && __jsx(_archive__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {\n    index: 0 // onDragEnd={onDragEnd}\n    ,\n    column: state.archive,\n    archiveColumnId: archiveColumnId,\n    setCardForOpen: setCardForOpen,\n    convertDate: convertDate,\n    setOpen: setOpen,\n    open: true,\n    projectName: props.projectName,\n    handleModalClose: handleModalClose,\n    updateColumnTitle: updateColumnTitle,\n    deleteColumn: deleteColumn,\n    addChecklist: addChecklist,\n    updateChecklist: updateChecklist,\n    addActivity: addActivity,\n    updateDate: updateDate,\n    updateCard: updateCard,\n    deleteChecklist: deleteChecklist,\n    deleteCard: deleteCard,\n    addCard: addCard,\n    archiveCard: archiveCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 920,\n      columnNumber: 15\n    }\n  }), __jsx(_add_column__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {\n    colorIndex: colorIndex,\n    addColumn: addColumn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 944,\n      columnNumber: 13\n    }\n  })), open && __jsx(_card_modal__WEBPACK_IMPORTED_MODULE_10__[\"default\"], {\n    open: true // column={}\n    ,\n    addCard: addCard,\n    projectName: props.projectName,\n    currentCard: currentCard,\n    currentColumn: currentColumn,\n    handleModalClose: handleModalClose,\n    addChecklist: addChecklist,\n    updateChecklist: updateChecklist,\n    addActivity: addActivity,\n    updateDate: updateDate,\n    updateCard: updateCard,\n    deleteChecklist: deleteChecklist,\n    convertDate: convertDate,\n    deleteCard: deleteCard,\n    archiveCard: archiveCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 947,\n      columnNumber: 13\n    }\n  })));\n}\n\n_s(Board, \"1S/C0xaOHB/EcNyTOcUdCD7ZAr0=\", false, function () {\n  return [notistack__WEBPACK_IMPORTED_MODULE_11__[\"useSnackbar\"]];\n});\n\n_c = Board;\n/* harmony default export */ __webpack_exports__[\"default\"] = (Board);\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/board.tsx\n");

/***/ })

})