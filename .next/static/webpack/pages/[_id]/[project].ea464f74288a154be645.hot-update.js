webpackHotUpdate_N_E("pages/[_id]/[project]",{

/***/ "./components/board.tsx":
/*!******************************!*\
  !*** ./components/board.tsx ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ \"./node_modules/@babel/runtime/helpers/esm/extends.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/slicedToArray */ \"./node_modules/@babel/runtime/helpers/esm/slicedToArray.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/esm/toConsumableArray */ \"./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/esm/defineProperty */ \"./node_modules/@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var react_beautiful_dnd__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react-beautiful-dnd */ \"./node_modules/react-beautiful-dnd/dist/react-beautiful-dnd.esm.js\");\n/* harmony import */ var _top__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./top */ \"./components/top.tsx\");\n/* harmony import */ var _column__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./column */ \"./components/column.tsx\");\n/* harmony import */ var _add_section__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./add-section */ \"./components/add-section.tsx\");\n/* harmony import */ var _archive__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./archive */ \"./components/archive.tsx\");\n/* harmony import */ var _card_modal__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./card-modal */ \"./components/card-modal.tsx\");\n/* harmony import */ var notistack__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! notistack */ \"./node_modules/notistack/dist/notistack.esm.js\");\n\n\n\n\n\nvar _jsxFileName = \"/Users/heegupark/Desktop/Workspace/MyProject/omega-kanban/components/board.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\n\n\n\n\n\n\n\nfunction Board(props) {\n  _s();\n\n  var _this = this;\n\n  var _useSnackbar = Object(notistack__WEBPACK_IMPORTED_MODULE_11__[\"useSnackbar\"])(),\n      enqueueSnackbar = _useSnackbar.enqueueSnackbar; // const [state, setState] = useState<IColumns>({\n  //   columns: {\n  //     'column-0': {\n  //       id: 'column-0',\n  //       title: 'Plan',\n  //       cards: [\n  //         {\n  //           id: uuidv4(),\n  //           cardTitle: 'Create HTML skeleton',\n  //           note: '',\n  //           isCardCompleted: false,\n  //           isArchived: false,\n  //           checklists: [],\n  //           activities: [],\n  //           dueDate: new Date(2020, 9, 11),\n  //           createdAt: new Date(2020, 8, 11),\n  //           updatedAt: new Date(2020, 8, 11),\n  //         },\n  //       ],\n  //       colorIndex: 0,\n  //       createdAt: new Date(2020, 8, 1),\n  //       updatedAt: new Date(2020, 8, 11),\n  //     },\n  //     'column-1': {\n  //       id: 'column-1',\n  //       title: 'Progress',\n  //       cards: [],\n  //       colorIndex: 1,\n  //       createdAt: new Date(2020, 8, 2),\n  //       updatedAt: new Date(2020, 8, 2),\n  //     },\n  //     'column-2': {\n  //       id: 'column-2',\n  //       title: 'Complete',\n  //       cards: [],\n  //       colorIndex: 2,\n  //       createdAt: new Date(2020, 8, 3),\n  //       updatedAt: new Date(2020, 8, 3),\n  //     },\n  //   },\n  //   columnOrder: ['column-0', 'column-1', 'column-2'],\n  //   archive: {\n  //     id: 'archive',\n  //     title: 'Archive',\n  //     cards: [],\n  //     colorIndex: 0,\n  //     createdAt: new Date(),\n  //     updatedAt: new Date(),\n  //   },\n  // });\n\n\n  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_4__[\"useState\"])({\n    columns: {},\n    columnOrder: [],\n    archive: {\n      _id: 'archive',\n      title: 'Archive',\n      cards: [],\n      colorIndex: 0,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    }\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  var _useState2 = Object(react__WEBPACK_IMPORTED_MODULE_4__[\"useState\"])(0),\n      colorIndex = _useState2[0],\n      setColorIndex = _useState2[1];\n\n  var _useState3 = Object(react__WEBPACK_IMPORTED_MODULE_4__[\"useState\"])(),\n      currentCard = _useState3[0],\n      setCurrentCard = _useState3[1];\n\n  var _useState4 = Object(react__WEBPACK_IMPORTED_MODULE_4__[\"useState\"])(),\n      currentColumn = _useState4[0],\n      setCurrentColumn = _useState4[1];\n\n  var _useState5 = Object(react__WEBPACK_IMPORTED_MODULE_4__[\"useState\"])(false),\n      isLoadingCompleted = _useState5[0],\n      setIsLoadingCompleted = _useState5[1]; // useEffect(() => {\n  //   setColorIndex(state.columnOrder.length - 1);\n  // }, []);\n\n\n  Object(react__WEBPACK_IMPORTED_MODULE_4__[\"useEffect\"])(function () {\n    getColumns(props._id);\n  }, []);\n\n  var getColumns = function getColumns(_id) {\n    fetch(\"/api/get-columns\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        _id: _id\n      })\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      if (data.success) {\n        console.log(data.data);\n        state.columnOrder = [];\n        data.data.map(function (column) {\n          state.columns[column._id] = column;\n          state.columnOrder.push(column._id);\n          setState(_objectSpread({}, state));\n        });\n        setColorIndex(data.data.length - 1);\n        setIsLoadingCompleted(true);\n      } else {}\n    })[\"catch\"](function (err) {\n      console.error(\"Something wrong happened while getting a route:\".concat(err.message));\n    });\n  };\n\n  var addSection = function addSection(sectionTitle, card) {\n    // const newSection: ISection = {\n    //   _id: uuidv4(),\n    //   title: sectionTitle,\n    //   cards: [],\n    //   colorIndex: colorIndex + 1,\n    //   createdAt: new Date(),\n    //   updatedAt: new Date(),\n    // };\n    // if (card) {\n    //   newSection.cards.push(card);\n    // }\n    fetch('/api/add-column', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        projectId: props._id,\n        title: sectionTitle,\n        colorIndex: colorIndex + 1\n      })\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      if (data.success) {\n        state.columns[data.data._id] = data.data;\n        state.columnOrder.push(data.data._id);\n        setColorIndex(colorIndex + 1);\n        setState(_objectSpread({}, state));\n        handleSnackbar(\"'\".concat(sectionTitle, \"' is created\"), 'success');\n      } else {\n        handleSnackbar(\"Failed to add a column\", 'error');\n      }\n    })[\"catch\"](function (err) {\n      console.error(\"Something wrong happened while adding a column:\".concat(err.message));\n    });\n  };\n\n  var addCard = function addCard(columnId, cardTitle) {\n    fetch(\"/api/add-card\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        columnId: columnId,\n        cardTitle: cardTitle\n      })\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      if (data.success) {\n        state.columns[columnId].cards.push(data.data);\n        addActivity(columnId, data.data._id, \"A card with title '\".concat(cardTitle, \"' is created in '\").concat(state.columns[columnId].title, \"'\")); // updateDate(columnId, '');\n\n        setState(_objectSpread({}, state));\n      } else {\n        handleSnackbar('Something wrong happened while adding a card', 'warning');\n      }\n    })[\"catch\"](function (err) {\n      console.error(\"Something wrong happened while adding a card:\".concat(err.message));\n    });\n  };\n\n  var completeCard = function completeCard(columnId, cardId) {\n    var completeCard = {};\n    state.columns[columnId].cards.map(function (card, index) {\n      if (card._id === cardId) {\n        card.isCardCompleted = true;\n        completeCard = card;\n        state.columns[columnId].cards.splice(index, 1);\n      }\n    });\n    state.columns[columnId].cards.push(completeCard);\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, \"Card is completed\");\n    setState(_objectSpread({}, state));\n  };\n\n  var updateColumnTitle = function updateColumnTitle(_id, title) {\n    fetch(\"/api/update-column-title\", {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        _id: _id,\n        title: title\n      })\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      if (data.success) {\n        state.columns[_id].title = title;\n        state.columns[_id].updatedAt = new Date();\n        setState(_objectSpread({}, state));\n        handleSnackbar(\"Column title is updated\", 'info');\n      } else {\n        handleSnackbar(\"Failed to update a column title\", 'error');\n      }\n    })[\"catch\"](function (err) {\n      console.error(\"Something wrong happened while getting a route:\".concat(err.message));\n      handleSnackbar(\"Failed to update a column title\", 'error');\n    });\n  };\n\n  var updateCardTitle = function updateCardTitle(columnId, cardId, cardTitle) {\n    state.columns[columnId].cards.map(function (card) {\n      if (card._id === cardId) {\n        card.cardTitle = cardTitle;\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, \"Card title is changed to \".concat(cardTitle));\n    setState(_objectSpread({}, state));\n  };\n\n  var updateCardNote = function updateCardNote(columnId, cardId, note) {\n    state.columns[columnId].cards.map(function (card) {\n      if (card._id === cardId) {\n        card.note = note;\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, \"Card note is changed to ||\".concat(note));\n    setState(_objectSpread({}, state));\n  };\n\n  var deleteColumn = function deleteColumn(_id) {\n    var title = state.columns[_id].title;\n    fetch(\"/api/delete-column\", {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        _id: _id\n      })\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      if (data.success) {\n        delete state.columns[_id];\n        state.columnOrder.splice(state.columnOrder.indexOf(_id), 1);\n        setState(_objectSpread({}, state));\n        handleSnackbar(\"'\".concat(title, \"' is deleted\"), 'error');\n      } else {\n        handleSnackbar(\"Failed to delete a column\", 'warning');\n      }\n    })[\"catch\"](function (err) {\n      console.error(\"Something wrong happened while getting a route:\".concat(err.message));\n    });\n  };\n\n  var deleteCard = function deleteCard(columnId, cardId) {\n    state.columns[columnId].cards.map(function (card, index) {\n      if (card._id === cardId) {\n        state.columns[columnId].cards.splice(index, 1);\n      }\n    });\n    updateDate(columnId, cardId);\n    handleSnackbar('A card is deleted', 'error');\n    setState(_objectSpread({}, state));\n  };\n\n  var archiveCard = function archiveCard(columnId, cardId) {\n    var tempCard = {};\n    state.columns[columnId].cards.map(function (card, index) {\n      if (card._id === cardId) {\n        card.isArchived = true;\n        tempCard = card;\n        state.columns[columnId].cards.splice(index, 1);\n      }\n    });\n    updateDate(columnId, cardId);\n    state.archive.cards.push(tempCard);\n    addActivity('archive', cardId, \"Card is archived\");\n    setState(_objectSpread({}, state));\n  };\n\n  var onDragEnd = function onDragEnd(result) {\n    var _objectSpread3;\n\n    if (!result.destination) {\n      return;\n    }\n\n    if (result.type === 'column') {\n      var columnOrder = reorderColumn(state.columnOrder, result.source.index, result.destination.index);\n      handleSnackbar(\"'\".concat(state.columns[state.columnOrder[result.source.index]].title, \"' and '\").concat(state.columns[state.columnOrder[result.destination.index]].title, \"' are reordered\"), 'success');\n      setState(_objectSpread(_objectSpread({}, state), {}, {\n        columnOrder: columnOrder\n      }));\n      return;\n    }\n\n    if (result.source.droppableId === result.destination.droppableId) {\n      var column = state.columns[result.source.droppableId];\n      var cards = reorderCards(column.cards, result.source.index, result.destination.index);\n\n      var _newState = _objectSpread(_objectSpread({}, state), {}, {\n        columns: _objectSpread(_objectSpread({}, state.columns), {}, Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_3__[\"default\"])({}, column._id, _objectSpread(_objectSpread({}, column), {}, {\n          cards: cards\n        })))\n      });\n\n      setState(_newState);\n      handleSnackbar(\"A card is reordered in'\".concat(column.title, \"'\"), 'success');\n      return;\n    }\n\n    var sourceColumn = state.columns[result.source.droppableId];\n    var destinationColumn = state.columns[result.destination.droppableId];\n    var card = sourceColumn.cards[result.source.index];\n\n    var newSourceColumn = _objectSpread(_objectSpread({}, sourceColumn), {}, {\n      cards: Object(_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(sourceColumn.cards)\n    });\n\n    newSourceColumn.cards.splice(result.source.index, 1);\n\n    var newDestinationColumn = _objectSpread(_objectSpread({}, destinationColumn), {}, {\n      cards: Object(_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(destinationColumn.cards)\n    });\n\n    newDestinationColumn.cards.splice(result.destination.index, 0, card);\n\n    var newState = _objectSpread(_objectSpread({}, state), {}, {\n      columns: _objectSpread(_objectSpread({}, state.columns), {}, (_objectSpread3 = {}, Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(_objectSpread3, newSourceColumn._id, newSourceColumn), Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(_objectSpread3, newDestinationColumn._id, newDestinationColumn), _objectSpread3))\n    });\n\n    handleSnackbar(\"A card is moved from '\".concat(newSourceColumn.title, \"' to '\").concat(newDestinationColumn.title, \"'\"), 'success');\n    setState(newState);\n  };\n\n  var getItemStyle = function getItemStyle(isDragging, draggableStyle) {\n    return _objectSpread({\n      display: 'flex',\n      flexDirection: 'row'\n    }, draggableStyle);\n  };\n\n  var reorderCards = function reorderCards(list, startIndex, endIndex) {\n    var result = Array.from(list);\n\n    var _result$splice = result.splice(startIndex, 1),\n        _result$splice2 = Object(_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_result$splice, 1),\n        removed = _result$splice2[0];\n\n    result.splice(endIndex, 0, removed);\n    return result;\n  };\n\n  var reorderColumn = function reorderColumn(list, startIndex, endIndex) {\n    var result = Array.from(list);\n\n    var _result$splice3 = result.splice(startIndex, 1),\n        _result$splice4 = Object(_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_result$splice3, 1),\n        removed = _result$splice4[0];\n\n    result.splice(endIndex, 0, removed);\n    return result;\n  };\n\n  var _React$useState = react__WEBPACK_IMPORTED_MODULE_4___default.a.useState(false),\n      _React$useState2 = Object(_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_React$useState, 2),\n      open = _React$useState2[0],\n      setOpen = _React$useState2[1];\n\n  var setCardForOpen = function setCardForOpen(columnId, cardId) {\n    if (columnId === 'archive') {\n      var card = state.archive.cards.filter(function (card) {\n        return card._id === cardId;\n      });\n      setCurrentCard(card[0]);\n      setCurrentColumn(state.archive);\n    } else {\n      var _card = state.columns[columnId].cards.filter(function (card) {\n        return card._id === cardId;\n      });\n\n      setCurrentCard(_card[0]);\n      setCurrentColumn(state.columns[columnId]);\n    }\n  };\n\n  var handleModalClose = function handleModalClose() {\n    setOpen(false);\n  };\n\n  var addChecklist = function addChecklist(columnId, cardId, checklist) {\n    fetch(\"/api/add-checklist\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        cardId: cardId,\n        checklist: checklist\n      })\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      if (data.success) {\n        state.columns[columnId].cards.map(function (card) {\n          if (card._id === cardId) {\n            card.checklists.push(data.data);\n          }\n        });\n        addActivity(columnId, cardId, \"\".concat(checklist, \" is added to the checklist\")); // updateDate(columnId, cardId);\n\n        setState(_objectSpread({}, state));\n      } else {\n        handleSnackbar('Something wrong happened while adding a checklist', 'warning');\n      }\n    })[\"catch\"](function (err) {\n      console.error(\"Something wrong happened while adding a checklist:\".concat(err.message));\n    });\n  };\n\n  var updateDate = function updateDate(columnId, cardId) {\n    if (cardId) {\n      state.columns[columnId].cards.map(function (card) {\n        if (card._id === cardId) {\n          card.updatedAt = new Date();\n        }\n      });\n    }\n\n    state.columns[columnId].updatedAt = new Date();\n    setState(_objectSpread({}, state));\n  };\n\n  var updateChecklist = function updateChecklist(columnId, cardId, checklistId, checklistContent) {\n    state.columns[columnId].cards.map(function (card) {\n      if (card._id === cardId) {\n        card.checklists.map(function (checklist) {\n          if (checklist._id === checklistId) {\n            checklist.checklist = checklistContent;\n          }\n        });\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, \"A checklist is updated to \".concat(checklistContent));\n    setState(_objectSpread({}, state));\n  };\n\n  var completeChecklist = function completeChecklist(columnId, cardId, checklistId, isChecked) {\n    state.columns[columnId].cards.map(function (card) {\n      if (card._id === cardId) {\n        card.checklists.map(function (checklist) {\n          if (checklist._id === checklistId) {\n            checklist.isChecked = isChecked;\n          }\n        });\n      }\n    });\n    updateDate(columnId, cardId);\n    if (isChecked) addActivity(columnId, cardId, \"A checklist is completed\");else addActivity(columnId, cardId, \"A checklist is changed to incomplete\");\n    setState(_objectSpread({}, state));\n  };\n\n  var deleteChecklist = function deleteChecklist(columnId, cardId, checklistId) {\n    state.columns[columnId].cards.map(function (card) {\n      if (card._id === cardId) {\n        card.checklists = card.checklists.filter(function (checklist) {\n          return checklist._id !== checklistId;\n        });\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, \"A checklist is deleted\");\n    setState(_objectSpread({}, state));\n  };\n\n  var convertDate = function convertDate(date) {\n    var month = date.toString().split(' ')[1];\n    var day = date.toString().split(' ')[2];\n    var year = date.toString().split(' ')[3];\n    return \"\".concat(month, \" \").concat(day, \", \").concat(year);\n  };\n\n  var setDueDate = function setDueDate(columnId, cardId, date) {\n    state.columns[columnId].cards.map(function (card) {\n      if (card._id === cardId) {\n        card.dueDate = new Date(date);\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, \"A due date is set to \".concat(convertDate(date)));\n    setState(_objectSpread({}, state));\n  };\n\n  var addActivity = function addActivity(columnId, cardId, activity) {\n    fetch(\"/api/add-activity\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        cardId: cardId,\n        activity: activity\n      })\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      if (data.success) {\n        if (columnId === 'archive') {\n          state.archive.cards.map(function (card) {\n            if (card._id === cardId) {\n              card.activities.unshift(data.data);\n            }\n          });\n        } else {\n          state.columns[columnId].cards.map(function (card) {\n            if (card._id === cardId) {\n              card.activities.unshift(data.data);\n            }\n          });\n        }\n\n        if (activity.toLowerCase().includes('archive')) {\n          handleSnackbar(activity, 'warning');\n        } else {\n          handleSnackbar(activity, 'info');\n        }\n\n        setState(_objectSpread({}, state));\n      } else {\n        handleSnackbar('Something wrong happened while adding an activity', 'warning');\n      }\n    })[\"catch\"](function (err) {\n      console.error(\"Something wrong happened while getting an activity:\".concat(err.message));\n    });\n  };\n\n  var changeProjectName = function changeProjectName(projectName) {\n    handleSnackbar(\"Project name is changed to '\".concat(projectName, \"'\"), 'info');\n    props.setProjectName(projectName);\n  };\n\n  var handleSnackbar = function handleSnackbar(message, variant) {\n    enqueueSnackbar(message, {\n      variant: variant\n    });\n  };\n\n  return __jsx(react__WEBPACK_IMPORTED_MODULE_4___default.a.Fragment, null, isLoadingCompleted && __jsx(react__WEBPACK_IMPORTED_MODULE_4___default.a.Fragment, null, __jsx(_top__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {\n    _id: props._id,\n    setProjectName: changeProjectName,\n    projectName: props.projectName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 693,\n      columnNumber: 11\n    }\n  }), __jsx(\"div\", {\n    className: \"board\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 698,\n      columnNumber: 11\n    }\n  }, __jsx(react_beautiful_dnd__WEBPACK_IMPORTED_MODULE_5__[\"DragDropContext\"], {\n    onDragEnd: onDragEnd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 699,\n      columnNumber: 13\n    }\n  }, __jsx(react_beautiful_dnd__WEBPACK_IMPORTED_MODULE_5__[\"Droppable\"], {\n    direction: \"horizontal\",\n    droppableId: \"all-droppables\",\n    type: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 700,\n      columnNumber: 15\n    }\n  }, function (provided, snapshot) {\n    return __jsx(\"div\", Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n      ref: provided.innerRef\n    }, provided.droppableProps, {\n      style: getItemStyle(snapshot.isDragging, provided.droppableProps.style),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 706,\n        columnNumber: 19\n      }\n    }), state.columnOrder.map(function (columnId, index) {\n      return __jsx(_column__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n        key: columnId,\n        column: state.columns[columnId],\n        index: index,\n        addCard: addCard,\n        setOpen: setOpen,\n        setCardForOpen: setCardForOpen,\n        updateColumnTitle: updateColumnTitle,\n        deleteColumn: deleteColumn // onDragEnd={onDragEnd}\n        ,\n        convertDate: convertDate,\n        open: true,\n        projectName: props.projectName,\n        handleModalClose: handleModalClose,\n        addChecklist: addChecklist,\n        updateChecklist: updateChecklist,\n        addActivity: addActivity,\n        updateDate: updateDate,\n        updateCardTitle: updateCardTitle,\n        updateCardNote: updateCardNote,\n        completeChecklist: completeChecklist,\n        deleteChecklist: deleteChecklist,\n        setDueDate: setDueDate,\n        completeCard: completeCard,\n        deleteCard: deleteCard,\n        archiveCard: archiveCard,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 717,\n          columnNumber: 27\n        }\n      });\n    }), provided.placeholder);\n  })), state.archive.cards.length > 0 && __jsx(_archive__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {\n    index: 0 // onDragEnd={onDragEnd}\n    ,\n    column: state.archive,\n    setCardForOpen: setCardForOpen,\n    convertDate: convertDate,\n    setOpen: setOpen,\n    open: true,\n    projectName: props.projectName,\n    handleModalClose: handleModalClose,\n    updateColumnTitle: updateColumnTitle,\n    deleteColumn: deleteColumn,\n    addChecklist: addChecklist,\n    updateChecklist: updateChecklist,\n    addActivity: addActivity,\n    updateDate: updateDate,\n    updateCardTitle: updateCardTitle,\n    updateCardNote: updateCardNote,\n    completeChecklist: completeChecklist,\n    deleteChecklist: deleteChecklist,\n    setDueDate: setDueDate,\n    completeCard: completeCard,\n    deleteCard: deleteCard,\n    archiveCard: archiveCard,\n    addCard: addCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 753,\n      columnNumber: 15\n    }\n  }), __jsx(_add_section__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {\n    colorIndex: colorIndex,\n    addSection: addSection,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 780,\n      columnNumber: 13\n    }\n  })), open && __jsx(_card_modal__WEBPACK_IMPORTED_MODULE_10__[\"default\"], {\n    open: true,\n    projectName: props.projectName,\n    currentColumn: currentColumn,\n    handleModalClose: handleModalClose,\n    currentCard: currentCard,\n    addChecklist: addChecklist,\n    updateChecklist: updateChecklist,\n    addActivity: addActivity,\n    updateDate: updateDate,\n    updateCardTitle: updateCardTitle,\n    updateCardNote: updateCardNote,\n    completeChecklist: completeChecklist,\n    deleteChecklist: deleteChecklist,\n    setDueDate: setDueDate,\n    convertDate: convertDate,\n    completeCard: completeCard,\n    deleteCard: deleteCard,\n    archiveCard: archiveCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 783,\n      columnNumber: 13\n    }\n  })));\n}\n\n_s(Board, \"KXF1ECkBPmasxhZk0Un4K8OkIHc=\", false, function () {\n  return [notistack__WEBPACK_IMPORTED_MODULE_11__[\"useSnackbar\"]];\n});\n\n_c = Board;\n/* harmony default export */ __webpack_exports__[\"default\"] = (Board);\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vY29tcG9uZW50cy9ib2FyZC50c3g/NDlkMCJdLCJuYW1lcyI6WyJCb2FyZCIsInByb3BzIiwidXNlU25hY2tiYXIiLCJlbnF1ZXVlU25hY2tiYXIiLCJ1c2VTdGF0ZSIsImNvbHVtbnMiLCJjb2x1bW5PcmRlciIsImFyY2hpdmUiLCJfaWQiLCJ0aXRsZSIsImNhcmRzIiwiY29sb3JJbmRleCIsImNyZWF0ZWRBdCIsIkRhdGUiLCJ1cGRhdGVkQXQiLCJzdGF0ZSIsInNldFN0YXRlIiwic2V0Q29sb3JJbmRleCIsImN1cnJlbnRDYXJkIiwic2V0Q3VycmVudENhcmQiLCJjdXJyZW50Q29sdW1uIiwic2V0Q3VycmVudENvbHVtbiIsImlzTG9hZGluZ0NvbXBsZXRlZCIsInNldElzTG9hZGluZ0NvbXBsZXRlZCIsInVzZUVmZmVjdCIsImdldENvbHVtbnMiLCJmZXRjaCIsIm1ldGhvZCIsImhlYWRlcnMiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsInRoZW4iLCJyZXMiLCJqc29uIiwiZGF0YSIsInN1Y2Nlc3MiLCJjb25zb2xlIiwibG9nIiwibWFwIiwiY29sdW1uIiwicHVzaCIsImxlbmd0aCIsImVyciIsImVycm9yIiwibWVzc2FnZSIsImFkZFNlY3Rpb24iLCJzZWN0aW9uVGl0bGUiLCJjYXJkIiwicHJvamVjdElkIiwiaGFuZGxlU25hY2tiYXIiLCJhZGRDYXJkIiwiY29sdW1uSWQiLCJjYXJkVGl0bGUiLCJhZGRBY3Rpdml0eSIsImNvbXBsZXRlQ2FyZCIsImNhcmRJZCIsImluZGV4IiwiaXNDYXJkQ29tcGxldGVkIiwic3BsaWNlIiwidXBkYXRlRGF0ZSIsInVwZGF0ZUNvbHVtblRpdGxlIiwidXBkYXRlQ2FyZFRpdGxlIiwidXBkYXRlQ2FyZE5vdGUiLCJub3RlIiwiZGVsZXRlQ29sdW1uIiwiaW5kZXhPZiIsImRlbGV0ZUNhcmQiLCJhcmNoaXZlQ2FyZCIsInRlbXBDYXJkIiwiaXNBcmNoaXZlZCIsIm9uRHJhZ0VuZCIsInJlc3VsdCIsImRlc3RpbmF0aW9uIiwidHlwZSIsInJlb3JkZXJDb2x1bW4iLCJzb3VyY2UiLCJkcm9wcGFibGVJZCIsInJlb3JkZXJDYXJkcyIsIm5ld1N0YXRlIiwic291cmNlQ29sdW1uIiwiZGVzdGluYXRpb25Db2x1bW4iLCJuZXdTb3VyY2VDb2x1bW4iLCJuZXdEZXN0aW5hdGlvbkNvbHVtbiIsImdldEl0ZW1TdHlsZSIsImlzRHJhZ2dpbmciLCJkcmFnZ2FibGVTdHlsZSIsImRpc3BsYXkiLCJmbGV4RGlyZWN0aW9uIiwibGlzdCIsInN0YXJ0SW5kZXgiLCJlbmRJbmRleCIsIkFycmF5IiwiZnJvbSIsInJlbW92ZWQiLCJSZWFjdCIsIm9wZW4iLCJzZXRPcGVuIiwic2V0Q2FyZEZvck9wZW4iLCJmaWx0ZXIiLCJoYW5kbGVNb2RhbENsb3NlIiwiYWRkQ2hlY2tsaXN0IiwiY2hlY2tsaXN0IiwiY2hlY2tsaXN0cyIsInVwZGF0ZUNoZWNrbGlzdCIsImNoZWNrbGlzdElkIiwiY2hlY2tsaXN0Q29udGVudCIsImNvbXBsZXRlQ2hlY2tsaXN0IiwiaXNDaGVja2VkIiwiZGVsZXRlQ2hlY2tsaXN0IiwiY29udmVydERhdGUiLCJkYXRlIiwibW9udGgiLCJ0b1N0cmluZyIsInNwbGl0IiwiZGF5IiwieWVhciIsInNldER1ZURhdGUiLCJkdWVEYXRlIiwiYWN0aXZpdHkiLCJhY3Rpdml0aWVzIiwidW5zaGlmdCIsInRvTG93ZXJDYXNlIiwiaW5jbHVkZXMiLCJjaGFuZ2VQcm9qZWN0TmFtZSIsInByb2plY3ROYW1lIiwic2V0UHJvamVjdE5hbWUiLCJ2YXJpYW50IiwicHJvdmlkZWQiLCJzbmFwc2hvdCIsImlubmVyUmVmIiwiZHJvcHBhYmxlUHJvcHMiLCJzdHlsZSIsInBsYWNlaG9sZGVyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFVQSxTQUFTQSxLQUFULENBQWVDLEtBQWYsRUFB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RTRDLGlCQVpyQjtBQWFFLG1CQUFlLEVBQUVFLGVBYm5CO0FBY0UsY0FBVSxFQUFFUSxVQWRkO0FBZUUsZUFBVyxFQUFFUCxXQWZmO0FBZ0JFLGdCQUFZLEVBQUV2RCxZQWhCaEI7QUFpQkUsY0FBVSxFQUFFWSxVQWpCZDtBQWtCRSxlQUFXLEVBQUVDLFdBbEJmO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUEzRkosQ0FGSixDQURGO0FBdUhEOztHQXJ4QlFwRSxLO1VBQ3FCRSxzRDs7O0tBRHJCRixLO0FBc3hCTUEsb0VBQWYiLCJmaWxlIjoiLi9jb21wb25lbnRzL2JvYXJkLnRzeC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgRHJhZ0Ryb3BDb250ZXh0LCBEcm9wcGFibGUsIERyYWdnYWJsZSB9IGZyb20gJ3JlYWN0LWJlYXV0aWZ1bC1kbmQnO1xuaW1wb3J0IHsgdjQgYXMgdXVpZHY0IH0gZnJvbSAndXVpZCc7XG5pbXBvcnQgVG9wIGZyb20gJy4vdG9wJztcbmltcG9ydCBDb2x1bW4gZnJvbSAnLi9jb2x1bW4nO1xuaW1wb3J0IEFkZFNlY3Rpb24gZnJvbSAnLi9hZGQtc2VjdGlvbic7XG5pbXBvcnQgQXJjaGl2ZSBmcm9tICcuL2FyY2hpdmUnO1xuaW1wb3J0IENhcmRNb2RhbCBmcm9tICcuL2NhcmQtbW9kYWwnO1xuaW1wb3J0IHsgVmFyaWFudFR5cGUsIHVzZVNuYWNrYmFyIH0gZnJvbSAnbm90aXN0YWNrJztcbmltcG9ydCBJTWFpblByb3BzIGZyb20gJy4vaW50ZXJmYWNlcy9pbWFpbnByb3BzJztcbmltcG9ydCBJQ29sdW1ucyBmcm9tICcuL2ludGVyZmFjZXMvaWNvbHVtbnMnO1xuaW1wb3J0IElDb2x1bW4gZnJvbSAnLi9pbnRlcmZhY2VzL2ljb2x1bW4nO1xuaW1wb3J0IElDYXJkIGZyb20gJy4vaW50ZXJmYWNlcy9pY2FyZCc7XG5pbXBvcnQgSUNvbHVtbkl0ZW0gZnJvbSAnLi9pbnRlcmZhY2VzL2ljb2x1bW5pdGVtJztcbmltcG9ydCBJQ2hlY2tsaXN0IGZyb20gJy4vaW50ZXJmYWNlcy9pY2hlY2tsaXN0JztcbmltcG9ydCBJU2VjdGlvbkRhdGEgZnJvbSAnLi9pbnRlcmZhY2VzL2lzZWN0aW9uZGF0YSc7XG5pbXBvcnQgeyBJQWN0aXZpdHkgfSBmcm9tICcuLi9taWRkbGV3YXJlL21vZGVscy9hY3Rpdml0eSc7XG5cbmZ1bmN0aW9uIEJvYXJkKHByb3BzOiBJTWFpblByb3BzKSB7XG4gIGNvbnN0IHsgZW5xdWV1ZVNuYWNrYmFyIH0gPSB1c2VTbmFja2JhcigpO1xuICAvLyBjb25zdCBbc3RhdGUsIHNldFN0YXRlXSA9IHVzZVN0YXRlPElDb2x1bW5zPih7XG4gIC8vICAgY29sdW1uczoge1xuICAvLyAgICAgJ2NvbHVtbi0wJzoge1xuICAvLyAgICAgICBpZDogJ2NvbHVtbi0wJyxcbiAgLy8gICAgICAgdGl0bGU6ICdQbGFuJyxcbiAgLy8gICAgICAgY2FyZHM6IFtcbiAgLy8gICAgICAgICB7XG4gIC8vICAgICAgICAgICBpZDogdXVpZHY0KCksXG4gIC8vICAgICAgICAgICBjYXJkVGl0bGU6ICdDcmVhdGUgSFRNTCBza2VsZXRvbicsXG4gIC8vICAgICAgICAgICBub3RlOiAnJyxcbiAgLy8gICAgICAgICAgIGlzQ2FyZENvbXBsZXRlZDogZmFsc2UsXG4gIC8vICAgICAgICAgICBpc0FyY2hpdmVkOiBmYWxzZSxcbiAgLy8gICAgICAgICAgIGNoZWNrbGlzdHM6IFtdLFxuICAvLyAgICAgICAgICAgYWN0aXZpdGllczogW10sXG4gIC8vICAgICAgICAgICBkdWVEYXRlOiBuZXcgRGF0ZSgyMDIwLCA5LCAxMSksXG4gIC8vICAgICAgICAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKDIwMjAsIDgsIDExKSxcbiAgLy8gICAgICAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoMjAyMCwgOCwgMTEpLFxuICAvLyAgICAgICAgIH0sXG4gIC8vICAgICAgIF0sXG4gIC8vICAgICAgIGNvbG9ySW5kZXg6IDAsXG4gIC8vICAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoMjAyMCwgOCwgMSksXG4gIC8vICAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoMjAyMCwgOCwgMTEpLFxuICAvLyAgICAgfSxcbiAgLy8gICAgICdjb2x1bW4tMSc6IHtcbiAgLy8gICAgICAgaWQ6ICdjb2x1bW4tMScsXG4gIC8vICAgICAgIHRpdGxlOiAnUHJvZ3Jlc3MnLFxuICAvLyAgICAgICBjYXJkczogW10sXG4gIC8vICAgICAgIGNvbG9ySW5kZXg6IDEsXG4gIC8vICAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoMjAyMCwgOCwgMiksXG4gIC8vICAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoMjAyMCwgOCwgMiksXG4gIC8vICAgICB9LFxuICAvLyAgICAgJ2NvbHVtbi0yJzoge1xuICAvLyAgICAgICBpZDogJ2NvbHVtbi0yJyxcbiAgLy8gICAgICAgdGl0bGU6ICdDb21wbGV0ZScsXG4gIC8vICAgICAgIGNhcmRzOiBbXSxcbiAgLy8gICAgICAgY29sb3JJbmRleDogMixcbiAgLy8gICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZSgyMDIwLCA4LCAzKSxcbiAgLy8gICAgICAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgyMDIwLCA4LCAzKSxcbiAgLy8gICAgIH0sXG4gIC8vICAgfSxcbiAgLy8gICBjb2x1bW5PcmRlcjogWydjb2x1bW4tMCcsICdjb2x1bW4tMScsICdjb2x1bW4tMiddLFxuICAvLyAgIGFyY2hpdmU6IHtcbiAgLy8gICAgIGlkOiAnYXJjaGl2ZScsXG4gIC8vICAgICB0aXRsZTogJ0FyY2hpdmUnLFxuICAvLyAgICAgY2FyZHM6IFtdLFxuICAvLyAgICAgY29sb3JJbmRleDogMCxcbiAgLy8gICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKSxcbiAgLy8gICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoKSxcbiAgLy8gICB9LFxuICAvLyB9KTtcblxuICBjb25zdCBbc3RhdGUsIHNldFN0YXRlXSA9IHVzZVN0YXRlPElDb2x1bW5zPih7XG4gICAgY29sdW1uczoge30sXG4gICAgY29sdW1uT3JkZXI6IFtdLFxuICAgIGFyY2hpdmU6IHtcbiAgICAgIF9pZDogJ2FyY2hpdmUnLFxuICAgICAgdGl0bGU6ICdBcmNoaXZlJyxcbiAgICAgIGNhcmRzOiBbXSxcbiAgICAgIGNvbG9ySW5kZXg6IDAsXG4gICAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKCksXG4gICAgICB1cGRhdGVkQXQ6IG5ldyBEYXRlKCksXG4gICAgfSxcbiAgfSk7XG5cbiAgY29uc3QgW2NvbG9ySW5kZXgsIHNldENvbG9ySW5kZXhdID0gdXNlU3RhdGUoMCk7XG4gIGNvbnN0IFtjdXJyZW50Q2FyZCwgc2V0Q3VycmVudENhcmRdID0gdXNlU3RhdGU8SUNhcmQ+KCk7XG4gIGNvbnN0IFtjdXJyZW50Q29sdW1uLCBzZXRDdXJyZW50Q29sdW1uXSA9IHVzZVN0YXRlPElDb2x1bW5JdGVtPigpO1xuICBjb25zdCBbaXNMb2FkaW5nQ29tcGxldGVkLCBzZXRJc0xvYWRpbmdDb21wbGV0ZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xuICAvLyB1c2VFZmZlY3QoKCkgPT4ge1xuICAvLyAgIHNldENvbG9ySW5kZXgoc3RhdGUuY29sdW1uT3JkZXIubGVuZ3RoIC0gMSk7XG4gIC8vIH0sIFtdKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGdldENvbHVtbnMocHJvcHMuX2lkKTtcbiAgfSwgW10pO1xuXG4gIGNvbnN0IGdldENvbHVtbnMgPSAoX2lkOiBTdHJpbmcpID0+IHtcbiAgICBmZXRjaChgL2FwaS9nZXQtY29sdW1uc2AsIHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgfSxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgX2lkLFxuICAgICAgfSksXG4gICAgfSlcbiAgICAgIC50aGVuKChyZXMpID0+IHJlcy5qc29uKCkpXG4gICAgICAudGhlbigoZGF0YTogeyBzdWNjZXNzOiBib29sZWFuOyBkYXRhOiBhbnkgfSkgPT4ge1xuICAgICAgICBpZiAoZGF0YS5zdWNjZXNzKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coZGF0YS5kYXRhKTtcbiAgICAgICAgICBzdGF0ZS5jb2x1bW5PcmRlciA9IFtdO1xuICAgICAgICAgIGRhdGEuZGF0YS5tYXAoKGNvbHVtbjogSUNvbHVtbkl0ZW0pID0+IHtcbiAgICAgICAgICAgIHN0YXRlLmNvbHVtbnNbY29sdW1uLl9pZF0gPSBjb2x1bW47XG4gICAgICAgICAgICBzdGF0ZS5jb2x1bW5PcmRlci5wdXNoKGNvbHVtbi5faWQpO1xuICAgICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHNldENvbG9ySW5kZXgoZGF0YS5kYXRhLmxlbmd0aCAtIDEpO1xuICAgICAgICAgIHNldElzTG9hZGluZ0NvbXBsZXRlZCh0cnVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgYFNvbWV0aGluZyB3cm9uZyBoYXBwZW5lZCB3aGlsZSBnZXR0aW5nIGEgcm91dGU6JHtlcnIubWVzc2FnZX1gXG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgfTtcblxuICBjb25zdCBhZGRTZWN0aW9uID0gKHNlY3Rpb25UaXRsZTogc3RyaW5nLCBjYXJkOiBJQ2FyZCB8IHVuZGVmaW5lZCkgPT4ge1xuICAgIC8vIGNvbnN0IG5ld1NlY3Rpb246IElTZWN0aW9uID0ge1xuICAgIC8vICAgX2lkOiB1dWlkdjQoKSxcbiAgICAvLyAgIHRpdGxlOiBzZWN0aW9uVGl0bGUsXG4gICAgLy8gICBjYXJkczogW10sXG4gICAgLy8gICBjb2xvckluZGV4OiBjb2xvckluZGV4ICsgMSxcbiAgICAvLyAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKSxcbiAgICAvLyAgIHVwZGF0ZWRBdDogbmV3IERhdGUoKSxcbiAgICAvLyB9O1xuICAgIC8vIGlmIChjYXJkKSB7XG4gICAgLy8gICBuZXdTZWN0aW9uLmNhcmRzLnB1c2goY2FyZCk7XG4gICAgLy8gfVxuXG4gICAgZmV0Y2goJy9hcGkvYWRkLWNvbHVtbicsIHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgfSxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgcHJvamVjdElkOiBwcm9wcy5faWQsXG4gICAgICAgIHRpdGxlOiBzZWN0aW9uVGl0bGUsXG4gICAgICAgIGNvbG9ySW5kZXg6IGNvbG9ySW5kZXggKyAxLFxuICAgICAgfSksXG4gICAgfSlcbiAgICAgIC50aGVuKChyZXMpID0+IHJlcy5qc29uKCkpXG4gICAgICAudGhlbigoZGF0YTogSVNlY3Rpb25EYXRhKSA9PiB7XG4gICAgICAgIGlmIChkYXRhLnN1Y2Nlc3MpIHtcbiAgICAgICAgICBzdGF0ZS5jb2x1bW5zW2RhdGEuZGF0YS5faWRdID0gZGF0YS5kYXRhO1xuICAgICAgICAgIHN0YXRlLmNvbHVtbk9yZGVyLnB1c2goZGF0YS5kYXRhLl9pZCk7XG4gICAgICAgICAgc2V0Q29sb3JJbmRleChjb2xvckluZGV4ICsgMSk7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaGFuZGxlU25hY2tiYXIoYCcke3NlY3Rpb25UaXRsZX0nIGlzIGNyZWF0ZWRgLCAnc3VjY2VzcycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGhhbmRsZVNuYWNrYmFyKGBGYWlsZWQgdG8gYWRkIGEgY29sdW1uYCwgJ2Vycm9yJyk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgIGBTb21ldGhpbmcgd3JvbmcgaGFwcGVuZWQgd2hpbGUgYWRkaW5nIGEgY29sdW1uOiR7ZXJyLm1lc3NhZ2V9YFxuICAgICAgICApO1xuICAgICAgfSk7XG4gIH07XG5cbiAgY29uc3QgYWRkQ2FyZCA9IChjb2x1bW5JZDogc3RyaW5nLCBjYXJkVGl0bGU6IHN0cmluZykgPT4ge1xuICAgIGZldGNoKGAvYXBpL2FkZC1jYXJkYCwge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICB9LFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBjb2x1bW5JZCxcbiAgICAgICAgY2FyZFRpdGxlLFxuICAgICAgfSksXG4gICAgfSlcbiAgICAgIC50aGVuKChyZXMpID0+IHJlcy5qc29uKCkpXG4gICAgICAudGhlbigoZGF0YTogeyBzdWNjZXNzOiBib29sZWFuOyBkYXRhOiBJQ2FyZCB9KSA9PiB7XG4gICAgICAgIGlmIChkYXRhLnN1Y2Nlc3MpIHtcbiAgICAgICAgICBzdGF0ZS5jb2x1bW5zW2NvbHVtbklkXS5jYXJkcy5wdXNoKGRhdGEuZGF0YSk7XG4gICAgICAgICAgYWRkQWN0aXZpdHkoXG4gICAgICAgICAgICBjb2x1bW5JZCxcbiAgICAgICAgICAgIGRhdGEuZGF0YS5faWQsXG4gICAgICAgICAgICBgQSBjYXJkIHdpdGggdGl0bGUgJyR7Y2FyZFRpdGxlfScgaXMgY3JlYXRlZCBpbiAnJHtzdGF0ZS5jb2x1bW5zW2NvbHVtbklkXS50aXRsZX0nYFxuICAgICAgICAgICk7XG4gICAgICAgICAgLy8gdXBkYXRlRGF0ZShjb2x1bW5JZCwgJycpO1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGhhbmRsZVNuYWNrYmFyKFxuICAgICAgICAgICAgJ1NvbWV0aGluZyB3cm9uZyBoYXBwZW5lZCB3aGlsZSBhZGRpbmcgYSBjYXJkJyxcbiAgICAgICAgICAgICd3YXJuaW5nJ1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgIGBTb21ldGhpbmcgd3JvbmcgaGFwcGVuZWQgd2hpbGUgYWRkaW5nIGEgY2FyZDoke2Vyci5tZXNzYWdlfWBcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICB9O1xuXG4gIGNvbnN0IGNvbXBsZXRlQ2FyZCA9IChjb2x1bW5JZDogc3RyaW5nLCBjYXJkSWQ6IHN0cmluZykgPT4ge1xuICAgIGxldCBjb21wbGV0ZUNhcmQ6IElDYXJkID0ge30gYXMgSUNhcmQ7XG4gICAgc3RhdGUuY29sdW1uc1tjb2x1bW5JZF0uY2FyZHMubWFwKChjYXJkOiBJQ2FyZCwgaW5kZXg6IG51bWJlcikgPT4ge1xuICAgICAgaWYgKGNhcmQuX2lkID09PSBjYXJkSWQpIHtcbiAgICAgICAgY2FyZC5pc0NhcmRDb21wbGV0ZWQgPSB0cnVlO1xuICAgICAgICBjb21wbGV0ZUNhcmQgPSBjYXJkO1xuICAgICAgICBzdGF0ZS5jb2x1bW5zW2NvbHVtbklkXS5jYXJkcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHN0YXRlLmNvbHVtbnNbY29sdW1uSWRdLmNhcmRzLnB1c2goY29tcGxldGVDYXJkKTtcbiAgICB1cGRhdGVEYXRlKGNvbHVtbklkLCBjYXJkSWQpO1xuICAgIGFkZEFjdGl2aXR5KGNvbHVtbklkLCBjYXJkSWQsIGBDYXJkIGlzIGNvbXBsZXRlZGApO1xuICAgIHNldFN0YXRlKHtcbiAgICAgIC4uLnN0YXRlLFxuICAgIH0pO1xuICB9O1xuXG4gIGNvbnN0IHVwZGF0ZUNvbHVtblRpdGxlID0gKF9pZDogc3RyaW5nLCB0aXRsZTogc3RyaW5nKSA9PiB7XG4gICAgZmV0Y2goYC9hcGkvdXBkYXRlLWNvbHVtbi10aXRsZWAsIHtcbiAgICAgIG1ldGhvZDogJ1BBVENIJyxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgIH0sXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIF9pZCxcbiAgICAgICAgdGl0bGUsXG4gICAgICB9KSxcbiAgICB9KVxuICAgICAgLnRoZW4oKHJlcykgPT4gcmVzLmpzb24oKSlcbiAgICAgIC50aGVuKChkYXRhOiB7IHN1Y2Nlc3M6IGJvb2xlYW4gfSkgPT4ge1xuICAgICAgICBpZiAoZGF0YS5zdWNjZXNzKSB7XG4gICAgICAgICAgc3RhdGUuY29sdW1uc1tfaWRdLnRpdGxlID0gdGl0bGU7XG4gICAgICAgICAgc3RhdGUuY29sdW1uc1tfaWRdLnVwZGF0ZWRBdCA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaGFuZGxlU25hY2tiYXIoYENvbHVtbiB0aXRsZSBpcyB1cGRhdGVkYCwgJ2luZm8nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBoYW5kbGVTbmFja2JhcihgRmFpbGVkIHRvIHVwZGF0ZSBhIGNvbHVtbiB0aXRsZWAsICdlcnJvcicpO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICBgU29tZXRoaW5nIHdyb25nIGhhcHBlbmVkIHdoaWxlIGdldHRpbmcgYSByb3V0ZToke2Vyci5tZXNzYWdlfWBcbiAgICAgICAgKTtcbiAgICAgICAgaGFuZGxlU25hY2tiYXIoYEZhaWxlZCB0byB1cGRhdGUgYSBjb2x1bW4gdGl0bGVgLCAnZXJyb3InKTtcbiAgICAgIH0pO1xuICB9O1xuXG4gIGNvbnN0IHVwZGF0ZUNhcmRUaXRsZSA9IChcbiAgICBjb2x1bW5JZDogc3RyaW5nLFxuICAgIGNhcmRJZDogc3RyaW5nLFxuICAgIGNhcmRUaXRsZTogc3RyaW5nXG4gICkgPT4ge1xuICAgIHN0YXRlLmNvbHVtbnNbY29sdW1uSWRdLmNhcmRzLm1hcCgoY2FyZDogSUNhcmQpID0+IHtcbiAgICAgIGlmIChjYXJkLl9pZCA9PT0gY2FyZElkKSB7XG4gICAgICAgIGNhcmQuY2FyZFRpdGxlID0gY2FyZFRpdGxlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHVwZGF0ZURhdGUoY29sdW1uSWQsIGNhcmRJZCk7XG4gICAgYWRkQWN0aXZpdHkoY29sdW1uSWQsIGNhcmRJZCwgYENhcmQgdGl0bGUgaXMgY2hhbmdlZCB0byAke2NhcmRUaXRsZX1gKTtcbiAgICBzZXRTdGF0ZSh7XG4gICAgICAuLi5zdGF0ZSxcbiAgICB9KTtcbiAgfTtcblxuICBjb25zdCB1cGRhdGVDYXJkTm90ZSA9IChjb2x1bW5JZDogc3RyaW5nLCBjYXJkSWQ6IHN0cmluZywgbm90ZTogc3RyaW5nKSA9PiB7XG4gICAgc3RhdGUuY29sdW1uc1tjb2x1bW5JZF0uY2FyZHMubWFwKChjYXJkOiBJQ2FyZCkgPT4ge1xuICAgICAgaWYgKGNhcmQuX2lkID09PSBjYXJkSWQpIHtcbiAgICAgICAgY2FyZC5ub3RlID0gbm90ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB1cGRhdGVEYXRlKGNvbHVtbklkLCBjYXJkSWQpO1xuICAgIGFkZEFjdGl2aXR5KGNvbHVtbklkLCBjYXJkSWQsIGBDYXJkIG5vdGUgaXMgY2hhbmdlZCB0byB8fCR7bm90ZX1gKTtcbiAgICBzZXRTdGF0ZSh7XG4gICAgICAuLi5zdGF0ZSxcbiAgICB9KTtcbiAgfTtcblxuICBjb25zdCBkZWxldGVDb2x1bW4gPSAoX2lkOiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCB0aXRsZSA9IHN0YXRlLmNvbHVtbnNbX2lkXS50aXRsZTtcbiAgICBmZXRjaChgL2FwaS9kZWxldGUtY29sdW1uYCwge1xuICAgICAgbWV0aG9kOiAnREVMRVRFJyxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgIH0sXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIF9pZCxcbiAgICAgIH0pLFxuICAgIH0pXG4gICAgICAudGhlbigocmVzKSA9PiByZXMuanNvbigpKVxuICAgICAgLnRoZW4oKGRhdGE6IHsgc3VjY2VzczogYm9vbGVhbjsgbWVzc2FnZTogc3RyaW5nIH0pID0+IHtcbiAgICAgICAgaWYgKGRhdGEuc3VjY2Vzcykge1xuICAgICAgICAgIGRlbGV0ZSBzdGF0ZS5jb2x1bW5zW19pZF07XG4gICAgICAgICAgc3RhdGUuY29sdW1uT3JkZXIuc3BsaWNlKHN0YXRlLmNvbHVtbk9yZGVyLmluZGV4T2YoX2lkKSwgMSk7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaGFuZGxlU25hY2tiYXIoYCcke3RpdGxlfScgaXMgZGVsZXRlZGAsICdlcnJvcicpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGhhbmRsZVNuYWNrYmFyKGBGYWlsZWQgdG8gZGVsZXRlIGEgY29sdW1uYCwgJ3dhcm5pbmcnKTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgYFNvbWV0aGluZyB3cm9uZyBoYXBwZW5lZCB3aGlsZSBnZXR0aW5nIGEgcm91dGU6JHtlcnIubWVzc2FnZX1gXG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgfTtcblxuICBjb25zdCBkZWxldGVDYXJkID0gKGNvbHVtbklkOiBzdHJpbmcsIGNhcmRJZDogc3RyaW5nKSA9PiB7XG4gICAgc3RhdGUuY29sdW1uc1tjb2x1bW5JZF0uY2FyZHMubWFwKChjYXJkOiBJQ2FyZCwgaW5kZXg6IG51bWJlcikgPT4ge1xuICAgICAgaWYgKGNhcmQuX2lkID09PSBjYXJkSWQpIHtcbiAgICAgICAgc3RhdGUuY29sdW1uc1tjb2x1bW5JZF0uY2FyZHMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB1cGRhdGVEYXRlKGNvbHVtbklkLCBjYXJkSWQpO1xuICAgIGhhbmRsZVNuYWNrYmFyKCdBIGNhcmQgaXMgZGVsZXRlZCcsICdlcnJvcicpO1xuICAgIHNldFN0YXRlKHtcbiAgICAgIC4uLnN0YXRlLFxuICAgIH0pO1xuICB9O1xuXG4gIGNvbnN0IGFyY2hpdmVDYXJkID0gKGNvbHVtbklkOiBzdHJpbmcsIGNhcmRJZDogc3RyaW5nKSA9PiB7XG4gICAgbGV0IHRlbXBDYXJkOiBJQ2FyZCA9IHt9IGFzIElDYXJkO1xuICAgIHN0YXRlLmNvbHVtbnNbY29sdW1uSWRdLmNhcmRzLm1hcCgoY2FyZDogSUNhcmQsIGluZGV4OiBudW1iZXIpID0+IHtcbiAgICAgIGlmIChjYXJkLl9pZCA9PT0gY2FyZElkKSB7XG4gICAgICAgIGNhcmQuaXNBcmNoaXZlZCA9IHRydWU7XG4gICAgICAgIHRlbXBDYXJkID0gY2FyZDtcbiAgICAgICAgc3RhdGUuY29sdW1uc1tjb2x1bW5JZF0uY2FyZHMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB1cGRhdGVEYXRlKGNvbHVtbklkLCBjYXJkSWQpO1xuICAgIHN0YXRlLmFyY2hpdmUuY2FyZHMucHVzaCh0ZW1wQ2FyZCk7XG4gICAgYWRkQWN0aXZpdHkoJ2FyY2hpdmUnLCBjYXJkSWQsIGBDYXJkIGlzIGFyY2hpdmVkYCk7XG4gICAgc2V0U3RhdGUoe1xuICAgICAgLi4uc3RhdGUsXG4gICAgfSk7XG4gIH07XG5cbiAgY29uc3Qgb25EcmFnRW5kID0gKHJlc3VsdDogYW55KSA9PiB7XG4gICAgaWYgKCFyZXN1bHQuZGVzdGluYXRpb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAocmVzdWx0LnR5cGUgPT09ICdjb2x1bW4nKSB7XG4gICAgICBjb25zdCBjb2x1bW5PcmRlcjogQXJyYXk8c3RyaW5nPiA9IHJlb3JkZXJDb2x1bW4oXG4gICAgICAgIHN0YXRlLmNvbHVtbk9yZGVyLFxuICAgICAgICByZXN1bHQuc291cmNlLmluZGV4LFxuICAgICAgICByZXN1bHQuZGVzdGluYXRpb24uaW5kZXhcbiAgICAgICk7XG4gICAgICBoYW5kbGVTbmFja2JhcihcbiAgICAgICAgYCcke1xuICAgICAgICAgIHN0YXRlLmNvbHVtbnNbc3RhdGUuY29sdW1uT3JkZXJbcmVzdWx0LnNvdXJjZS5pbmRleF1dLnRpdGxlXG4gICAgICAgIH0nIGFuZCAnJHtcbiAgICAgICAgICBzdGF0ZS5jb2x1bW5zW3N0YXRlLmNvbHVtbk9yZGVyW3Jlc3VsdC5kZXN0aW5hdGlvbi5pbmRleF1dLnRpdGxlXG4gICAgICAgIH0nIGFyZSByZW9yZGVyZWRgLFxuICAgICAgICAnc3VjY2VzcydcbiAgICAgICk7XG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBjb2x1bW5PcmRlcixcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChyZXN1bHQuc291cmNlLmRyb3BwYWJsZUlkID09PSByZXN1bHQuZGVzdGluYXRpb24uZHJvcHBhYmxlSWQpIHtcbiAgICAgIGNvbnN0IGNvbHVtbiA9IHN0YXRlLmNvbHVtbnNbcmVzdWx0LnNvdXJjZS5kcm9wcGFibGVJZF07XG4gICAgICBjb25zdCBjYXJkcyA9IHJlb3JkZXJDYXJkcyhcbiAgICAgICAgY29sdW1uLmNhcmRzLFxuICAgICAgICByZXN1bHQuc291cmNlLmluZGV4LFxuICAgICAgICByZXN1bHQuZGVzdGluYXRpb24uaW5kZXhcbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IG5ld1N0YXRlID0ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgY29sdW1uczoge1xuICAgICAgICAgIC4uLnN0YXRlLmNvbHVtbnMsXG4gICAgICAgICAgW2NvbHVtbi5faWRdOiB7XG4gICAgICAgICAgICAuLi5jb2x1bW4sXG4gICAgICAgICAgICBjYXJkcyxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICAgIHNldFN0YXRlKG5ld1N0YXRlKTtcbiAgICAgIGhhbmRsZVNuYWNrYmFyKGBBIGNhcmQgaXMgcmVvcmRlcmVkIGluJyR7Y29sdW1uLnRpdGxlfSdgLCAnc3VjY2VzcycpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHNvdXJjZUNvbHVtbiA9IHN0YXRlLmNvbHVtbnNbcmVzdWx0LnNvdXJjZS5kcm9wcGFibGVJZF07XG4gICAgY29uc3QgZGVzdGluYXRpb25Db2x1bW4gPSBzdGF0ZS5jb2x1bW5zW3Jlc3VsdC5kZXN0aW5hdGlvbi5kcm9wcGFibGVJZF07XG4gICAgY29uc3QgY2FyZCA9IHNvdXJjZUNvbHVtbi5jYXJkc1tyZXN1bHQuc291cmNlLmluZGV4XTtcblxuICAgIGNvbnN0IG5ld1NvdXJjZUNvbHVtbiA9IHtcbiAgICAgIC4uLnNvdXJjZUNvbHVtbixcbiAgICAgIGNhcmRzOiBbLi4uc291cmNlQ29sdW1uLmNhcmRzXSxcbiAgICB9O1xuICAgIG5ld1NvdXJjZUNvbHVtbi5jYXJkcy5zcGxpY2UocmVzdWx0LnNvdXJjZS5pbmRleCwgMSk7XG5cbiAgICBjb25zdCBuZXdEZXN0aW5hdGlvbkNvbHVtbiA9IHtcbiAgICAgIC4uLmRlc3RpbmF0aW9uQ29sdW1uLFxuICAgICAgY2FyZHM6IFsuLi5kZXN0aW5hdGlvbkNvbHVtbi5jYXJkc10sXG4gICAgfTtcbiAgICBuZXdEZXN0aW5hdGlvbkNvbHVtbi5jYXJkcy5zcGxpY2UocmVzdWx0LmRlc3RpbmF0aW9uLmluZGV4LCAwLCBjYXJkKTtcblxuICAgIGNvbnN0IG5ld1N0YXRlID0ge1xuICAgICAgLi4uc3RhdGUsXG4gICAgICBjb2x1bW5zOiB7XG4gICAgICAgIC4uLnN0YXRlLmNvbHVtbnMsXG4gICAgICAgIFtuZXdTb3VyY2VDb2x1bW4uX2lkXTogbmV3U291cmNlQ29sdW1uLFxuICAgICAgICBbbmV3RGVzdGluYXRpb25Db2x1bW4uX2lkXTogbmV3RGVzdGluYXRpb25Db2x1bW4sXG4gICAgICB9LFxuICAgIH07XG4gICAgaGFuZGxlU25hY2tiYXIoXG4gICAgICBgQSBjYXJkIGlzIG1vdmVkIGZyb20gJyR7bmV3U291cmNlQ29sdW1uLnRpdGxlfScgdG8gJyR7bmV3RGVzdGluYXRpb25Db2x1bW4udGl0bGV9J2AsXG4gICAgICAnc3VjY2VzcydcbiAgICApO1xuICAgIHNldFN0YXRlKG5ld1N0YXRlKTtcbiAgfTtcblxuICBjb25zdCBnZXRJdGVtU3R5bGUgPSAoaXNEcmFnZ2luZzogYm9vbGVhbiwgZHJhZ2dhYmxlU3R5bGU6IGFueSkgPT4gKHtcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgZmxleERpcmVjdGlvbjogJ3JvdycsXG4gICAgLi4uZHJhZ2dhYmxlU3R5bGUsXG4gIH0pO1xuXG4gIGNvbnN0IHJlb3JkZXJDYXJkcyA9IChcbiAgICBsaXN0OiBBcnJheTxJQ2FyZD4sXG4gICAgc3RhcnRJbmRleDogbnVtYmVyLFxuICAgIGVuZEluZGV4OiBudW1iZXJcbiAgKSA9PiB7XG4gICAgY29uc3QgcmVzdWx0ID0gQXJyYXkuZnJvbShsaXN0KTtcbiAgICBjb25zdCBbcmVtb3ZlZF0gPSByZXN1bHQuc3BsaWNlKHN0YXJ0SW5kZXgsIDEpO1xuICAgIHJlc3VsdC5zcGxpY2UoZW5kSW5kZXgsIDAsIHJlbW92ZWQpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgY29uc3QgcmVvcmRlckNvbHVtbiA9IChcbiAgICBsaXN0OiBBcnJheTxzdHJpbmc+LFxuICAgIHN0YXJ0SW5kZXg6IG51bWJlcixcbiAgICBlbmRJbmRleDogbnVtYmVyXG4gICkgPT4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IEFycmF5LmZyb20obGlzdCk7XG4gICAgY29uc3QgW3JlbW92ZWRdID0gcmVzdWx0LnNwbGljZShzdGFydEluZGV4LCAxKTtcbiAgICByZXN1bHQuc3BsaWNlKGVuZEluZGV4LCAwLCByZW1vdmVkKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIGNvbnN0IFtvcGVuLCBzZXRPcGVuXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3Qgc2V0Q2FyZEZvck9wZW4gPSAoY29sdW1uSWQ6IHN0cmluZywgY2FyZElkOiBzdHJpbmcpID0+IHtcbiAgICBpZiAoY29sdW1uSWQgPT09ICdhcmNoaXZlJykge1xuICAgICAgY29uc3QgY2FyZCA9IHN0YXRlLmFyY2hpdmUuY2FyZHMuZmlsdGVyKFxuICAgICAgICAoY2FyZDogSUNhcmQpID0+IGNhcmQuX2lkID09PSBjYXJkSWRcbiAgICAgICk7XG4gICAgICBzZXRDdXJyZW50Q2FyZChjYXJkWzBdKTtcbiAgICAgIHNldEN1cnJlbnRDb2x1bW4oc3RhdGUuYXJjaGl2ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGNhcmQgPSBzdGF0ZS5jb2x1bW5zW2NvbHVtbklkXS5jYXJkcy5maWx0ZXIoXG4gICAgICAgIChjYXJkOiBJQ2FyZCkgPT4gY2FyZC5faWQgPT09IGNhcmRJZFxuICAgICAgKTtcbiAgICAgIHNldEN1cnJlbnRDYXJkKGNhcmRbMF0pO1xuICAgICAgc2V0Q3VycmVudENvbHVtbihzdGF0ZS5jb2x1bW5zW2NvbHVtbklkXSk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGhhbmRsZU1vZGFsQ2xvc2UgPSAoKSA9PiB7XG4gICAgc2V0T3BlbihmYWxzZSk7XG4gIH07XG5cbiAgY29uc3QgYWRkQ2hlY2tsaXN0ID0gKFxuICAgIGNvbHVtbklkOiBzdHJpbmcsXG4gICAgY2FyZElkOiBzdHJpbmcsXG4gICAgY2hlY2tsaXN0OiBzdHJpbmdcbiAgKSA9PiB7XG4gICAgZmV0Y2goYC9hcGkvYWRkLWNoZWNrbGlzdGAsIHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgfSxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgY2FyZElkLFxuICAgICAgICBjaGVja2xpc3QsXG4gICAgICB9KSxcbiAgICB9KVxuICAgICAgLnRoZW4oKHJlcykgPT4gcmVzLmpzb24oKSlcbiAgICAgIC50aGVuKChkYXRhOiB7IHN1Y2Nlc3M6IGJvb2xlYW47IGRhdGE6IElDaGVja2xpc3QgfSkgPT4ge1xuICAgICAgICBpZiAoZGF0YS5zdWNjZXNzKSB7XG4gICAgICAgICAgc3RhdGUuY29sdW1uc1tjb2x1bW5JZF0uY2FyZHMubWFwKChjYXJkOiBJQ2FyZCkgPT4ge1xuICAgICAgICAgICAgaWYgKGNhcmQuX2lkID09PSBjYXJkSWQpIHtcbiAgICAgICAgICAgICAgY2FyZC5jaGVja2xpc3RzLnB1c2goZGF0YS5kYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBhZGRBY3Rpdml0eShcbiAgICAgICAgICAgIGNvbHVtbklkLFxuICAgICAgICAgICAgY2FyZElkLFxuICAgICAgICAgICAgYCR7Y2hlY2tsaXN0fSBpcyBhZGRlZCB0byB0aGUgY2hlY2tsaXN0YFxuICAgICAgICAgICk7XG4gICAgICAgICAgLy8gdXBkYXRlRGF0ZShjb2x1bW5JZCwgY2FyZElkKTtcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBoYW5kbGVTbmFja2JhcihcbiAgICAgICAgICAgICdTb21ldGhpbmcgd3JvbmcgaGFwcGVuZWQgd2hpbGUgYWRkaW5nIGEgY2hlY2tsaXN0JyxcbiAgICAgICAgICAgICd3YXJuaW5nJ1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgIGBTb21ldGhpbmcgd3JvbmcgaGFwcGVuZWQgd2hpbGUgYWRkaW5nIGEgY2hlY2tsaXN0OiR7ZXJyLm1lc3NhZ2V9YFxuICAgICAgICApO1xuICAgICAgfSk7XG4gIH07XG5cbiAgY29uc3QgdXBkYXRlRGF0ZSA9IChjb2x1bW5JZDogc3RyaW5nLCBjYXJkSWQ6IHN0cmluZykgPT4ge1xuICAgIGlmIChjYXJkSWQpIHtcbiAgICAgIHN0YXRlLmNvbHVtbnNbY29sdW1uSWRdLmNhcmRzLm1hcCgoY2FyZDogSUNhcmQpID0+IHtcbiAgICAgICAgaWYgKGNhcmQuX2lkID09PSBjYXJkSWQpIHtcbiAgICAgICAgICBjYXJkLnVwZGF0ZWRBdCA9IG5ldyBEYXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBzdGF0ZS5jb2x1bW5zW2NvbHVtbklkXS51cGRhdGVkQXQgPSBuZXcgRGF0ZSgpO1xuICAgIHNldFN0YXRlKHtcbiAgICAgIC4uLnN0YXRlLFxuICAgIH0pO1xuICB9O1xuXG4gIGNvbnN0IHVwZGF0ZUNoZWNrbGlzdCA9IChcbiAgICBjb2x1bW5JZDogc3RyaW5nLFxuICAgIGNhcmRJZDogc3RyaW5nLFxuICAgIGNoZWNrbGlzdElkOiBzdHJpbmcsXG4gICAgY2hlY2tsaXN0Q29udGVudDogc3RyaW5nXG4gICkgPT4ge1xuICAgIHN0YXRlLmNvbHVtbnNbY29sdW1uSWRdLmNhcmRzLm1hcCgoY2FyZDogSUNhcmQpID0+IHtcbiAgICAgIGlmIChjYXJkLl9pZCA9PT0gY2FyZElkKSB7XG4gICAgICAgIGNhcmQuY2hlY2tsaXN0cy5tYXAoKGNoZWNrbGlzdDogSUNoZWNrbGlzdCkgPT4ge1xuICAgICAgICAgIGlmIChjaGVja2xpc3QuX2lkID09PSBjaGVja2xpc3RJZCkge1xuICAgICAgICAgICAgY2hlY2tsaXN0LmNoZWNrbGlzdCA9IGNoZWNrbGlzdENvbnRlbnQ7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB1cGRhdGVEYXRlKGNvbHVtbklkLCBjYXJkSWQpO1xuICAgIGFkZEFjdGl2aXR5KFxuICAgICAgY29sdW1uSWQsXG4gICAgICBjYXJkSWQsXG4gICAgICBgQSBjaGVja2xpc3QgaXMgdXBkYXRlZCB0byAke2NoZWNrbGlzdENvbnRlbnR9YFxuICAgICk7XG4gICAgc2V0U3RhdGUoe1xuICAgICAgLi4uc3RhdGUsXG4gICAgfSk7XG4gIH07XG5cbiAgY29uc3QgY29tcGxldGVDaGVja2xpc3QgPSAoXG4gICAgY29sdW1uSWQ6IHN0cmluZyxcbiAgICBjYXJkSWQ6IHN0cmluZyxcbiAgICBjaGVja2xpc3RJZDogc3RyaW5nLFxuICAgIGlzQ2hlY2tlZDogYm9vbGVhblxuICApID0+IHtcbiAgICBzdGF0ZS5jb2x1bW5zW2NvbHVtbklkXS5jYXJkcy5tYXAoKGNhcmQ6IElDYXJkKSA9PiB7XG4gICAgICBpZiAoY2FyZC5faWQgPT09IGNhcmRJZCkge1xuICAgICAgICBjYXJkLmNoZWNrbGlzdHMubWFwKChjaGVja2xpc3Q6IElDaGVja2xpc3QpID0+IHtcbiAgICAgICAgICBpZiAoY2hlY2tsaXN0Ll9pZCA9PT0gY2hlY2tsaXN0SWQpIHtcbiAgICAgICAgICAgIGNoZWNrbGlzdC5pc0NoZWNrZWQgPSBpc0NoZWNrZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB1cGRhdGVEYXRlKGNvbHVtbklkLCBjYXJkSWQpO1xuICAgIGlmIChpc0NoZWNrZWQpIGFkZEFjdGl2aXR5KGNvbHVtbklkLCBjYXJkSWQsIGBBIGNoZWNrbGlzdCBpcyBjb21wbGV0ZWRgKTtcbiAgICBlbHNlIGFkZEFjdGl2aXR5KGNvbHVtbklkLCBjYXJkSWQsIGBBIGNoZWNrbGlzdCBpcyBjaGFuZ2VkIHRvIGluY29tcGxldGVgKTtcbiAgICBzZXRTdGF0ZSh7XG4gICAgICAuLi5zdGF0ZSxcbiAgICB9KTtcbiAgfTtcblxuICBjb25zdCBkZWxldGVDaGVja2xpc3QgPSAoXG4gICAgY29sdW1uSWQ6IHN0cmluZyxcbiAgICBjYXJkSWQ6IHN0cmluZyxcbiAgICBjaGVja2xpc3RJZDogc3RyaW5nXG4gICkgPT4ge1xuICAgIHN0YXRlLmNvbHVtbnNbY29sdW1uSWRdLmNhcmRzLm1hcCgoY2FyZDogSUNhcmQpID0+IHtcbiAgICAgIGlmIChjYXJkLl9pZCA9PT0gY2FyZElkKSB7XG4gICAgICAgIGNhcmQuY2hlY2tsaXN0cyA9IGNhcmQuY2hlY2tsaXN0cy5maWx0ZXIoXG4gICAgICAgICAgKGNoZWNrbGlzdDogSUNoZWNrbGlzdCkgPT4gY2hlY2tsaXN0Ll9pZCAhPT0gY2hlY2tsaXN0SWRcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB1cGRhdGVEYXRlKGNvbHVtbklkLCBjYXJkSWQpO1xuICAgIGFkZEFjdGl2aXR5KGNvbHVtbklkLCBjYXJkSWQsIGBBIGNoZWNrbGlzdCBpcyBkZWxldGVkYCk7XG4gICAgc2V0U3RhdGUoe1xuICAgICAgLi4uc3RhdGUsXG4gICAgfSk7XG4gIH07XG5cbiAgY29uc3QgY29udmVydERhdGUgPSAoZGF0ZTogRGF0ZSkgPT4ge1xuICAgIGNvbnN0IG1vbnRoID0gZGF0ZS50b1N0cmluZygpLnNwbGl0KCcgJylbMV07XG4gICAgY29uc3QgZGF5ID0gZGF0ZS50b1N0cmluZygpLnNwbGl0KCcgJylbMl07XG4gICAgY29uc3QgeWVhciA9IGRhdGUudG9TdHJpbmcoKS5zcGxpdCgnICcpWzNdO1xuICAgIHJldHVybiBgJHttb250aH0gJHtkYXl9LCAke3llYXJ9YDtcbiAgfTtcblxuICBjb25zdCBzZXREdWVEYXRlID0gKGNvbHVtbklkOiBzdHJpbmcsIGNhcmRJZDogc3RyaW5nLCBkYXRlOiBEYXRlKSA9PiB7XG4gICAgc3RhdGUuY29sdW1uc1tjb2x1bW5JZF0uY2FyZHMubWFwKChjYXJkOiBJQ2FyZCkgPT4ge1xuICAgICAgaWYgKGNhcmQuX2lkID09PSBjYXJkSWQpIHtcbiAgICAgICAgY2FyZC5kdWVEYXRlID0gbmV3IERhdGUoZGF0ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdXBkYXRlRGF0ZShjb2x1bW5JZCwgY2FyZElkKTtcbiAgICBhZGRBY3Rpdml0eShjb2x1bW5JZCwgY2FyZElkLCBgQSBkdWUgZGF0ZSBpcyBzZXQgdG8gJHtjb252ZXJ0RGF0ZShkYXRlKX1gKTtcbiAgICBzZXRTdGF0ZSh7XG4gICAgICAuLi5zdGF0ZSxcbiAgICB9KTtcbiAgfTtcblxuICBjb25zdCBhZGRBY3Rpdml0eSA9IChjb2x1bW5JZDogc3RyaW5nLCBjYXJkSWQ6IHN0cmluZywgYWN0aXZpdHk6IHN0cmluZykgPT4ge1xuICAgIGZldGNoKGAvYXBpL2FkZC1hY3Rpdml0eWAsIHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgfSxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgY2FyZElkLFxuICAgICAgICBhY3Rpdml0eSxcbiAgICAgIH0pLFxuICAgIH0pXG4gICAgICAudGhlbigocmVzKSA9PiByZXMuanNvbigpKVxuICAgICAgLnRoZW4oKGRhdGE6IHsgc3VjY2VzczogYm9vbGVhbjsgZGF0YTogSUFjdGl2aXR5IH0pID0+IHtcbiAgICAgICAgaWYgKGRhdGEuc3VjY2Vzcykge1xuICAgICAgICAgIGlmIChjb2x1bW5JZCA9PT0gJ2FyY2hpdmUnKSB7XG4gICAgICAgICAgICBzdGF0ZS5hcmNoaXZlLmNhcmRzLm1hcCgoY2FyZDogSUNhcmQpID0+IHtcbiAgICAgICAgICAgICAgaWYgKGNhcmQuX2lkID09PSBjYXJkSWQpIHtcbiAgICAgICAgICAgICAgICBjYXJkLmFjdGl2aXRpZXMudW5zaGlmdChkYXRhLmRhdGEpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RhdGUuY29sdW1uc1tjb2x1bW5JZF0uY2FyZHMubWFwKChjYXJkOiBJQ2FyZCkgPT4ge1xuICAgICAgICAgICAgICBpZiAoY2FyZC5faWQgPT09IGNhcmRJZCkge1xuICAgICAgICAgICAgICAgIGNhcmQuYWN0aXZpdGllcy51bnNoaWZ0KGRhdGEuZGF0YSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoYWN0aXZpdHkudG9Mb3dlckNhc2UoKS5pbmNsdWRlcygnYXJjaGl2ZScpKSB7XG4gICAgICAgICAgICBoYW5kbGVTbmFja2JhcihhY3Rpdml0eSwgJ3dhcm5pbmcnKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaGFuZGxlU25hY2tiYXIoYWN0aXZpdHksICdpbmZvJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGhhbmRsZVNuYWNrYmFyKFxuICAgICAgICAgICAgJ1NvbWV0aGluZyB3cm9uZyBoYXBwZW5lZCB3aGlsZSBhZGRpbmcgYW4gYWN0aXZpdHknLFxuICAgICAgICAgICAgJ3dhcm5pbmcnXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgYFNvbWV0aGluZyB3cm9uZyBoYXBwZW5lZCB3aGlsZSBnZXR0aW5nIGFuIGFjdGl2aXR5OiR7ZXJyLm1lc3NhZ2V9YFxuICAgICAgICApO1xuICAgICAgfSk7XG4gIH07XG5cbiAgY29uc3QgY2hhbmdlUHJvamVjdE5hbWUgPSAocHJvamVjdE5hbWU6IHN0cmluZykgPT4ge1xuICAgIGhhbmRsZVNuYWNrYmFyKGBQcm9qZWN0IG5hbWUgaXMgY2hhbmdlZCB0byAnJHtwcm9qZWN0TmFtZX0nYCwgJ2luZm8nKTtcbiAgICBwcm9wcy5zZXRQcm9qZWN0TmFtZShwcm9qZWN0TmFtZSk7XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlU25hY2tiYXIgPSAobWVzc2FnZTogc3RyaW5nLCB2YXJpYW50OiBWYXJpYW50VHlwZSkgPT4ge1xuICAgIGVucXVldWVTbmFja2JhcihtZXNzYWdlLCB7IHZhcmlhbnQgfSk7XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAge2lzTG9hZGluZ0NvbXBsZXRlZCAmJiAoXG4gICAgICAgIDw+XG4gICAgICAgICAgPFRvcFxuICAgICAgICAgICAgX2lkPXtwcm9wcy5faWR9XG4gICAgICAgICAgICBzZXRQcm9qZWN0TmFtZT17Y2hhbmdlUHJvamVjdE5hbWV9XG4gICAgICAgICAgICBwcm9qZWN0TmFtZT17cHJvcHMucHJvamVjdE5hbWV9XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJvYXJkXCI+XG4gICAgICAgICAgICA8RHJhZ0Ryb3BDb250ZXh0IG9uRHJhZ0VuZD17b25EcmFnRW5kfT5cbiAgICAgICAgICAgICAgPERyb3BwYWJsZVxuICAgICAgICAgICAgICAgIGRpcmVjdGlvbj1cImhvcml6b250YWxcIlxuICAgICAgICAgICAgICAgIGRyb3BwYWJsZUlkPVwiYWxsLWRyb3BwYWJsZXNcIlxuICAgICAgICAgICAgICAgIHR5cGU9XCJjb2x1bW5cIlxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgeyhwcm92aWRlZDogYW55LCBzbmFwc2hvdDogYW55KSA9PiAoXG4gICAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgIHJlZj17cHJvdmlkZWQuaW5uZXJSZWZ9XG4gICAgICAgICAgICAgICAgICAgIHsuLi5wcm92aWRlZC5kcm9wcGFibGVQcm9wc31cbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e2dldEl0ZW1TdHlsZShcbiAgICAgICAgICAgICAgICAgICAgICBzbmFwc2hvdC5pc0RyYWdnaW5nLFxuICAgICAgICAgICAgICAgICAgICAgIHByb3ZpZGVkLmRyb3BwYWJsZVByb3BzLnN0eWxlXG4gICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIHtzdGF0ZS5jb2x1bW5PcmRlci5tYXAoXG4gICAgICAgICAgICAgICAgICAgICAgKGNvbHVtbklkOiBzdHJpbmcsIGluZGV4OiBudW1iZXIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxDb2x1bW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk9e2NvbHVtbklkfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbj17c3RhdGUuY29sdW1uc1tjb2x1bW5JZF19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg9e2luZGV4fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZENhcmQ9e2FkZENhcmR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0T3Blbj17c2V0T3Blbn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRDYXJkRm9yT3Blbj17c2V0Q2FyZEZvck9wZW59XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlQ29sdW1uVGl0bGU9e3VwZGF0ZUNvbHVtblRpdGxlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZUNvbHVtbj17ZGVsZXRlQ29sdW1ufVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG9uRHJhZ0VuZD17b25EcmFnRW5kfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnZlcnREYXRlPXtjb252ZXJ0RGF0ZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVuPXt0cnVlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2plY3ROYW1lPXtwcm9wcy5wcm9qZWN0TmFtZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVNb2RhbENsb3NlPXtoYW5kbGVNb2RhbENsb3NlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZENoZWNrbGlzdD17YWRkQ2hlY2tsaXN0fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZUNoZWNrbGlzdD17dXBkYXRlQ2hlY2tsaXN0fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZEFjdGl2aXR5PXthZGRBY3Rpdml0eX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVEYXRlPXt1cGRhdGVEYXRlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZUNhcmRUaXRsZT17dXBkYXRlQ2FyZFRpdGxlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZUNhcmROb3RlPXt1cGRhdGVDYXJkTm90ZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZUNoZWNrbGlzdD17Y29tcGxldGVDaGVja2xpc3R9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlQ2hlY2tsaXN0PXtkZWxldGVDaGVja2xpc3R9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0RHVlRGF0ZT17c2V0RHVlRGF0ZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZUNhcmQ9e2NvbXBsZXRlQ2FyZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGVDYXJkPXtkZWxldGVDYXJkfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyY2hpdmVDYXJkPXthcmNoaXZlQ2FyZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgICAgICB7cHJvdmlkZWQucGxhY2Vob2xkZXJ9XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICA8L0Ryb3BwYWJsZT5cbiAgICAgICAgICAgIDwvRHJhZ0Ryb3BDb250ZXh0PlxuICAgICAgICAgICAge3N0YXRlLmFyY2hpdmUuY2FyZHMubGVuZ3RoID4gMCAmJiAoXG4gICAgICAgICAgICAgIDxBcmNoaXZlXG4gICAgICAgICAgICAgICAgaW5kZXg9ezB9XG4gICAgICAgICAgICAgICAgLy8gb25EcmFnRW5kPXtvbkRyYWdFbmR9XG4gICAgICAgICAgICAgICAgY29sdW1uPXtzdGF0ZS5hcmNoaXZlfVxuICAgICAgICAgICAgICAgIHNldENhcmRGb3JPcGVuPXtzZXRDYXJkRm9yT3Blbn1cbiAgICAgICAgICAgICAgICBjb252ZXJ0RGF0ZT17Y29udmVydERhdGV9XG4gICAgICAgICAgICAgICAgc2V0T3Blbj17c2V0T3Blbn1cbiAgICAgICAgICAgICAgICBvcGVuPXt0cnVlfVxuICAgICAgICAgICAgICAgIHByb2plY3ROYW1lPXtwcm9wcy5wcm9qZWN0TmFtZX1cbiAgICAgICAgICAgICAgICBoYW5kbGVNb2RhbENsb3NlPXtoYW5kbGVNb2RhbENsb3NlfVxuICAgICAgICAgICAgICAgIHVwZGF0ZUNvbHVtblRpdGxlPXt1cGRhdGVDb2x1bW5UaXRsZX1cbiAgICAgICAgICAgICAgICBkZWxldGVDb2x1bW49e2RlbGV0ZUNvbHVtbn1cbiAgICAgICAgICAgICAgICBhZGRDaGVja2xpc3Q9e2FkZENoZWNrbGlzdH1cbiAgICAgICAgICAgICAgICB1cGRhdGVDaGVja2xpc3Q9e3VwZGF0ZUNoZWNrbGlzdH1cbiAgICAgICAgICAgICAgICBhZGRBY3Rpdml0eT17YWRkQWN0aXZpdHl9XG4gICAgICAgICAgICAgICAgdXBkYXRlRGF0ZT17dXBkYXRlRGF0ZX1cbiAgICAgICAgICAgICAgICB1cGRhdGVDYXJkVGl0bGU9e3VwZGF0ZUNhcmRUaXRsZX1cbiAgICAgICAgICAgICAgICB1cGRhdGVDYXJkTm90ZT17dXBkYXRlQ2FyZE5vdGV9XG4gICAgICAgICAgICAgICAgY29tcGxldGVDaGVja2xpc3Q9e2NvbXBsZXRlQ2hlY2tsaXN0fVxuICAgICAgICAgICAgICAgIGRlbGV0ZUNoZWNrbGlzdD17ZGVsZXRlQ2hlY2tsaXN0fVxuICAgICAgICAgICAgICAgIHNldER1ZURhdGU9e3NldER1ZURhdGV9XG4gICAgICAgICAgICAgICAgY29tcGxldGVDYXJkPXtjb21wbGV0ZUNhcmR9XG4gICAgICAgICAgICAgICAgZGVsZXRlQ2FyZD17ZGVsZXRlQ2FyZH1cbiAgICAgICAgICAgICAgICBhcmNoaXZlQ2FyZD17YXJjaGl2ZUNhcmR9XG4gICAgICAgICAgICAgICAgYWRkQ2FyZD17YWRkQ2FyZH1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8QWRkU2VjdGlvbiBjb2xvckluZGV4PXtjb2xvckluZGV4fSBhZGRTZWN0aW9uPXthZGRTZWN0aW9ufSAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIHtvcGVuICYmIChcbiAgICAgICAgICAgIDxDYXJkTW9kYWxcbiAgICAgICAgICAgICAgb3Blbj17dHJ1ZX1cbiAgICAgICAgICAgICAgcHJvamVjdE5hbWU9e3Byb3BzLnByb2plY3ROYW1lfVxuICAgICAgICAgICAgICBjdXJyZW50Q29sdW1uPXtjdXJyZW50Q29sdW1ufVxuICAgICAgICAgICAgICBoYW5kbGVNb2RhbENsb3NlPXtoYW5kbGVNb2RhbENsb3NlfVxuICAgICAgICAgICAgICBjdXJyZW50Q2FyZD17Y3VycmVudENhcmR9XG4gICAgICAgICAgICAgIGFkZENoZWNrbGlzdD17YWRkQ2hlY2tsaXN0fVxuICAgICAgICAgICAgICB1cGRhdGVDaGVja2xpc3Q9e3VwZGF0ZUNoZWNrbGlzdH1cbiAgICAgICAgICAgICAgYWRkQWN0aXZpdHk9e2FkZEFjdGl2aXR5fVxuICAgICAgICAgICAgICB1cGRhdGVEYXRlPXt1cGRhdGVEYXRlfVxuICAgICAgICAgICAgICB1cGRhdGVDYXJkVGl0bGU9e3VwZGF0ZUNhcmRUaXRsZX1cbiAgICAgICAgICAgICAgdXBkYXRlQ2FyZE5vdGU9e3VwZGF0ZUNhcmROb3RlfVxuICAgICAgICAgICAgICBjb21wbGV0ZUNoZWNrbGlzdD17Y29tcGxldGVDaGVja2xpc3R9XG4gICAgICAgICAgICAgIGRlbGV0ZUNoZWNrbGlzdD17ZGVsZXRlQ2hlY2tsaXN0fVxuICAgICAgICAgICAgICBzZXREdWVEYXRlPXtzZXREdWVEYXRlfVxuICAgICAgICAgICAgICBjb252ZXJ0RGF0ZT17Y29udmVydERhdGV9XG4gICAgICAgICAgICAgIGNvbXBsZXRlQ2FyZD17Y29tcGxldGVDYXJkfVxuICAgICAgICAgICAgICBkZWxldGVDYXJkPXtkZWxldGVDYXJkfVxuICAgICAgICAgICAgICBhcmNoaXZlQ2FyZD17YXJjaGl2ZUNhcmR9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICl9XG4gICAgICAgIDwvPlxuICAgICAgKX1cbiAgICA8Lz5cbiAgKTtcbn1cbmV4cG9ydCBkZWZhdWx0IEJvYXJkO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./components/board.tsx\n");

/***/ })

})