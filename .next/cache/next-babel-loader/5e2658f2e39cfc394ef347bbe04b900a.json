{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"/Users/heegupark/Desktop/Workspace/MyProject/omega-kanban/components/board.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport Top from './top';\nimport Column from './column';\nimport AddSection from './add-section';\nimport { v4 as uuidv4 } from 'uuid';\nimport CardModal from './card-modal';\n\nfunction Board(props) {\n  _s();\n\n  var _this = this;\n\n  var _useState = useState({\n    columns: {\n      'column-0': {\n        id: 'column-0',\n        title: 'Plan',\n        cards: [{\n          id: uuidv4(),\n          cardTitle: 'Create HTML skeleton',\n          note: '',\n          checklists: [],\n          activities: [],\n          createdAt: new Date(2020, 8, 11),\n          updatedAt: new Date(2020, 8, 11)\n        }],\n        colorIndex: 0,\n        createdAt: new Date(2020, 8, 1),\n        updatedAt: new Date(2020, 8, 11)\n      },\n      'column-1': {\n        id: 'column-1',\n        title: 'Progress',\n        cards: [],\n        colorIndex: 1,\n        createdAt: new Date(2020, 8, 2),\n        updatedAt: new Date(2020, 8, 2)\n      },\n      'column-2': {\n        id: 'column-2',\n        title: 'Complete',\n        cards: [],\n        colorIndex: 2,\n        createdAt: new Date(2020, 8, 3),\n        updatedAt: new Date(2020, 8, 3)\n      }\n    },\n    columnOrder: ['column-0', 'column-1', 'column-2']\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  var _useState2 = useState(0),\n      colorIndex = _useState2[0],\n      setColorIndex = _useState2[1];\n\n  var _useState3 = useState({}),\n      currentCard = _useState3[0],\n      setCurrentCard = _useState3[1];\n\n  var _useState4 = useState({}),\n      currentColumn = _useState4[0],\n      setCurrentColumn = _useState4[1];\n\n  useEffect(function () {\n    setColorIndex(state.columnOrder.length - 1);\n  }, []);\n\n  var addSection = function addSection(sectionTitle) {\n    var newSection = {\n      id: uuidv4(),\n      title: sectionTitle,\n      cards: [],\n      colorIndex: colorIndex + 1,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    setColorIndex(colorIndex + 1);\n    state.columns[newSection.id] = newSection;\n    state.columnOrder.push(newSection.id);\n    setState(_objectSpread({}, state));\n  };\n\n  var addCard = function addCard(columnId, cardTitle) {\n    var newCard = {\n      id: uuidv4(),\n      cardTitle: cardTitle,\n      note: '',\n      checklists: [],\n      activities: [],\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    state.columns[columnId].updatedAt = new Date();\n    state.columns[columnId].cards.push(newCard);\n    setState(_objectSpread({}, state));\n  };\n\n  var updateSectionTitle = function updateSectionTitle(columnId, sectionTitle) {\n    state.columns[columnId].title = sectionTitle;\n    state.columns[columnId].updatedAt = new Date();\n    setState(_objectSpread({}, state));\n  };\n\n  var updateCardTitle = function updateCardTitle(columnId, cardId, cardTitle) {\n    state.columns[columnId].cards.map(function (card) {\n      if (card.id === cardId) {\n        card.cardTitle = cardTitle;\n      }\n    });\n    state.columns[columnId].updatedAt = new Date();\n    addActivity(columnId, cardId, \"Card title is changed to \".concat(cardTitle));\n    setState(_objectSpread({}, state));\n  };\n\n  var deleteColumn = function deleteColumn(id) {\n    delete state.columns[id];\n    state.columnOrder.splice(state.columnOrder.indexOf(id), 1);\n    setState(_objectSpread({}, state));\n  };\n\n  var onDragEnd = function onDragEnd(result) {\n    var _objectSpread3;\n\n    if (!result.destination) {\n      return;\n    }\n\n    if (result.type === 'column') {\n      var columnOrder = reorder(state.columnOrder, result.source.index, result.destination.index);\n      setState(_objectSpread(_objectSpread({}, state), {}, {\n        columnOrder: columnOrder\n      }));\n      return;\n    }\n\n    if (result.source.droppableId === result.destination.droppableId) {\n      var column = state.columns[result.source.droppableId];\n      var cards = reorder(column.cards, result.source.index, result.destination.index);\n\n      var _newState = _objectSpread(_objectSpread({}, state), {}, {\n        columns: _objectSpread(_objectSpread({}, state.columns), {}, _defineProperty({}, column.id, _objectSpread(_objectSpread({}, column), {}, {\n          cards: cards\n        })))\n      });\n\n      setState(_newState);\n      return;\n    }\n\n    var sourceColumn = state.columns[result.source.droppableId];\n    var destinationColumn = state.columns[result.destination.droppableId];\n    var card = sourceColumn.cards[result.source.index];\n\n    var newSourceColumn = _objectSpread(_objectSpread({}, sourceColumn), {}, {\n      cards: _toConsumableArray(sourceColumn.cards)\n    });\n\n    newSourceColumn.cards.splice(result.source.index, 1);\n\n    var newDestinationColumn = _objectSpread(_objectSpread({}, destinationColumn), {}, {\n      cards: _toConsumableArray(destinationColumn.cards)\n    });\n\n    newDestinationColumn.cards.splice(result.destination.index, 0, card);\n\n    var newState = _objectSpread(_objectSpread({}, state), {}, {\n      columns: _objectSpread(_objectSpread({}, state.columns), {}, (_objectSpread3 = {}, _defineProperty(_objectSpread3, newSourceColumn.id, newSourceColumn), _defineProperty(_objectSpread3, newDestinationColumn.id, newDestinationColumn), _objectSpread3))\n    });\n\n    setState(newState);\n  };\n\n  var getItemStyle = function getItemStyle(isDragging, draggableStyle) {\n    return _objectSpread({\n      display: 'flex',\n      flexDirection: 'row'\n    }, draggableStyle);\n  };\n\n  var reorder = function reorder(list, startIndex, endIndex) {\n    var result = Array.from(list);\n\n    var _result$splice = result.splice(startIndex, 1),\n        _result$splice2 = _slicedToArray(_result$splice, 1),\n        removed = _result$splice2[0];\n\n    result.splice(endIndex, 0, removed);\n    return result;\n  }; //for modal\n\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      open = _React$useState2[0],\n      setOpen = _React$useState2[1];\n\n  var setCardForOpen = function setCardForOpen(columnId, cardId) {\n    var card = state.columns[columnId].cards.filter(function (card) {\n      return card.id === cardId;\n    });\n    setCurrentCard(card[0]);\n    setCurrentColumn(state.columns[columnId]);\n  };\n\n  var handleModalClose = function handleModalClose() {\n    setOpen(false);\n  };\n\n  var addChecklist = function addChecklist(columnId, cardId, checklist) {\n    state.columns[columnId].cards.map(function (card) {\n      if (card.id === cardId) {\n        card.checklists.push({\n          id: uuidv4(),\n          checklist: checklist,\n          date: new Date()\n        });\n      }\n    });\n    setState(_objectSpread({}, state));\n  };\n\n  var updateChecklist = function updateChecklist(columnId, cardId, checklistId, checklistContent) {\n    state.columns[columnId].cards.map(function (card) {\n      if (card.id === cardId) {\n        card.checklists.map(function (checklist) {\n          if (checklist.id === checklistId) {\n            checklist.checklist = checklistContent;\n          }\n        });\n        card.updatedAt = new Date();\n      }\n    });\n    state.columns[columnId].updatedAt = new Date();\n    addActivity(columnId, cardId, \"Checklist is updated to \".concat(checklistContent));\n    setState(_objectSpread({}, state));\n  };\n\n  var addActivity = function addActivity(columnId, cardId, activity) {\n    state.columns[columnId].cards.map(function (card) {\n      if (card.id === cardId) {\n        card.activities.push({\n          id: uuidv4(),\n          activity: activity,\n          date: new Date()\n        });\n      }\n    });\n    setState(_objectSpread({}, state));\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Top, {\n    setView: props.setView,\n    setProjectName: props.setProjectName,\n    projectName: props.projectName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    className: \"board\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 7\n    }\n  }, __jsx(DragDropContext, {\n    onDragEnd: onDragEnd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 9\n    }\n  }, __jsx(Droppable, {\n    direction: \"horizontal\",\n    droppableId: \"all-droppables\",\n    type: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 11\n    }\n  }, function (provided, snapshot) {\n    return __jsx(\"div\", _extends({\n      ref: provided.innerRef\n    }, provided.droppableProps, {\n      style: getItemStyle(snapshot.isDragging, provided.droppableProps.style),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 15\n      }\n    }), state.columnOrder.map(function (columnId, index) {\n      return __jsx(Column, {\n        key: columnId,\n        column: state.columns[columnId],\n        index: index,\n        reorder: reorder,\n        addCard: addCard,\n        setOpen: setOpen,\n        setCardForOpen: setCardForOpen,\n        updateSectionTitle: updateSectionTitle,\n        deleteColumn: deleteColumn,\n        onDragEnd: onDragEnd,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 21\n        }\n      });\n    }), provided.placeholder);\n  })), __jsx(AddSection, {\n    colorIndex: colorIndex,\n    addSection: addSection,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 9\n    }\n  })), open && __jsx(CardModal, {\n    open: true,\n    projectName: props.projectName,\n    currentColumn: currentColumn,\n    handleModalClose: handleModalClose,\n    currentCard: currentCard,\n    addChecklist: addChecklist,\n    updateChecklist: updateChecklist,\n    addActivity: addActivity,\n    updateCardTitle: updateCardTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 9\n    }\n  }));\n}\n\n_s(Board, \"/x+IKdZlMAmyS8G8fWa0dFe60RA=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/heegupark/Desktop/Workspace/MyProject/omega-kanban/components/board.tsx"],"names":["React","useState","useEffect","DragDropContext","Droppable","Top","Column","AddSection","v4","uuidv4","CardModal","Board","props","columns","id","title","cards","cardTitle","note","checklists","activities","createdAt","Date","updatedAt","colorIndex","columnOrder","state","setState","setColorIndex","currentCard","setCurrentCard","currentColumn","setCurrentColumn","length","addSection","sectionTitle","newSection","push","addCard","columnId","newCard","updateSectionTitle","updateCardTitle","cardId","map","card","addActivity","deleteColumn","splice","indexOf","onDragEnd","result","destination","type","reorder","source","index","droppableId","column","newState","sourceColumn","destinationColumn","newSourceColumn","newDestinationColumn","getItemStyle","isDragging","draggableStyle","display","flexDirection","list","startIndex","endIndex","Array","from","removed","open","setOpen","setCardForOpen","filter","handleModalClose","addChecklist","checklist","date","updateChecklist","checklistId","checklistContent","activity","setView","setProjectName","projectName","provided","snapshot","innerRef","droppableProps","style","placeholder"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport Top from './top';\nimport Column from './column';\nimport AddSection from './add-section';\nimport { v4 as uuidv4 } from 'uuid';\nimport CardModal from './card-modal';\n\nfunction Board(props: any) {\n  const [state, setState] = useState({\n    columns: {\n      'column-0': {\n        id: 'column-0',\n        title: 'Plan',\n        cards: [\n          {\n            id: uuidv4(),\n            cardTitle: 'Create HTML skeleton',\n            note: '',\n            checklists: [],\n            activities: [],\n            createdAt: new Date(2020, 8, 11),\n            updatedAt: new Date(2020, 8, 11),\n          },\n        ],\n        colorIndex: 0,\n        createdAt: new Date(2020, 8, 1),\n        updatedAt: new Date(2020, 8, 11),\n      },\n      'column-1': {\n        id: 'column-1',\n        title: 'Progress',\n        cards: [],\n        colorIndex: 1,\n        createdAt: new Date(2020, 8, 2),\n        updatedAt: new Date(2020, 8, 2),\n      },\n      'column-2': {\n        id: 'column-2',\n        title: 'Complete',\n        cards: [],\n        colorIndex: 2,\n        createdAt: new Date(2020, 8, 3),\n        updatedAt: new Date(2020, 8, 3),\n      },\n    },\n    columnOrder: ['column-0', 'column-1', 'column-2'],\n  } as any);\n\n  const [colorIndex, setColorIndex] = useState(0);\n  const [currentCard, setCurrentCard] = useState({} as any);\n  const [currentColumn, setCurrentColumn] = useState({} as any);\n\n  useEffect(() => {\n    setColorIndex(state.columnOrder.length - 1);\n  }, []);\n\n  const addSection = (sectionTitle: any) => {\n    const newSection = {\n      id: uuidv4(),\n      title: sectionTitle,\n      cards: [],\n      colorIndex: colorIndex + 1,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    setColorIndex(colorIndex + 1);\n    state.columns[newSection.id] = newSection;\n    state.columnOrder.push(newSection.id);\n    setState({\n      ...state,\n    } as any);\n  };\n\n  const addCard = (columnId: any, cardTitle: any) => {\n    const newCard = {\n      id: uuidv4(),\n      cardTitle,\n      note: '',\n      checklists: [],\n      activities: [],\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    state.columns[columnId].updatedAt = new Date();\n    state.columns[columnId].cards.push(newCard);\n    setState({\n      ...state,\n    } as any);\n  };\n\n  const updateSectionTitle = (columnId: any, sectionTitle: any) => {\n    state.columns[columnId].title = sectionTitle;\n    state.columns[columnId].updatedAt = new Date();\n    setState({\n      ...state,\n    } as any);\n  };\n\n  const updateCardTitle = (columnId: any, cardId: any, cardTitle: any) => {\n    state.columns[columnId].cards.map((card: any) => {\n      if (card.id === cardId) {\n        card.cardTitle = cardTitle;\n      }\n    });\n    state.columns[columnId].updatedAt = new Date();\n    addActivity(columnId, cardId, `Card title is changed to ${cardTitle}`);\n    setState({\n      ...state,\n    } as any);\n  };\n\n  const deleteColumn = (id: any) => {\n    delete state.columns[id];\n    state.columnOrder.splice(state.columnOrder.indexOf(id), 1);\n    setState({\n      ...state,\n    } as any);\n  };\n\n  const onDragEnd = (result: any) => {\n    if (!result.destination) {\n      return;\n    }\n\n    if (result.type === 'column') {\n      const columnOrder = reorder(\n        state.columnOrder,\n        result.source.index,\n        result.destination.index\n      );\n      setState({\n        ...state,\n        columnOrder,\n      } as any);\n      return;\n    }\n\n    if (result.source.droppableId === result.destination.droppableId) {\n      const column = state.columns[result.source.droppableId];\n      const cards = reorder(\n        column.cards,\n        result.source.index,\n        result.destination.index\n      );\n\n      const newState = {\n        ...state,\n        columns: {\n          ...state.columns,\n          [column.id]: {\n            ...column,\n            cards,\n          },\n        },\n      };\n      setState(newState);\n      return;\n    }\n\n    const sourceColumn = state.columns[result.source.droppableId];\n    const destinationColumn = state.columns[result.destination.droppableId];\n    const card = sourceColumn.cards[result.source.index];\n\n    const newSourceColumn = {\n      ...sourceColumn,\n      cards: [...sourceColumn.cards],\n    };\n    newSourceColumn.cards.splice(result.source.index, 1);\n\n    const newDestinationColumn = {\n      ...destinationColumn,\n      cards: [...destinationColumn.cards],\n    };\n    newDestinationColumn.cards.splice(result.destination.index, 0, card);\n\n    const newState = {\n      ...state,\n      columns: {\n        ...state.columns,\n        [newSourceColumn.id]: newSourceColumn,\n        [newDestinationColumn.id]: newDestinationColumn,\n      },\n    };\n\n    setState(newState);\n  };\n\n  const getItemStyle = (isDragging: any, draggableStyle: any) => ({\n    display: 'flex',\n    flexDirection: 'row',\n    ...draggableStyle,\n  });\n\n  const reorder = (list: any, startIndex: any, endIndex: any) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    return result;\n  };\n\n  //for modal\n  const [open, setOpen] = React.useState(false);\n\n  const setCardForOpen = (columnId: any, cardId: any) => {\n    const card = state.columns[columnId].cards.filter(\n      (card: any) => card.id === cardId\n    );\n    setCurrentCard(card[0]);\n    setCurrentColumn(state.columns[columnId]);\n  };\n\n  const handleModalClose = () => {\n    setOpen(false);\n  };\n\n  const addChecklist = (columnId: any, cardId: any, checklist: any) => {\n    state.columns[columnId].cards.map((card: any) => {\n      if (card.id === cardId) {\n        card.checklists.push({ id: uuidv4(), checklist, date: new Date() });\n      }\n    });\n    setState({\n      ...state,\n    } as any);\n  };\n\n  const updateChecklist = (\n    columnId: any,\n    cardId: any,\n    checklistId: any,\n    checklistContent: any\n  ) => {\n    state.columns[columnId].cards.map((card: any) => {\n      if (card.id === cardId) {\n        card.checklists.map((checklist: any) => {\n          if (checklist.id === checklistId) {\n            checklist.checklist = checklistContent;\n          }\n        });\n        card.updatedAt = new Date();\n      }\n    });\n    state.columns[columnId].updatedAt = new Date();\n    addActivity(\n      columnId,\n      cardId,\n      `Checklist is updated to ${checklistContent}`\n    );\n    setState({\n      ...state,\n    } as any);\n  };\n\n  const addActivity = (columnId: any, cardId: any, activity: any) => {\n    state.columns[columnId].cards.map((card: any) => {\n      if (card.id === cardId) {\n        card.activities.push({ id: uuidv4(), activity, date: new Date() });\n      }\n    });\n    setState({\n      ...state,\n    } as any);\n  };\n\n  return (\n    <>\n      <Top\n        setView={props.setView}\n        setProjectName={props.setProjectName}\n        projectName={props.projectName}\n      />\n      <div className=\"board\">\n        <DragDropContext onDragEnd={onDragEnd}>\n          <Droppable\n            direction=\"horizontal\"\n            droppableId=\"all-droppables\"\n            type=\"column\"\n          >\n            {(provided: any, snapshot: any) => (\n              <div\n                ref={provided.innerRef}\n                {...provided.droppableProps}\n                style={getItemStyle(\n                  snapshot.isDragging,\n                  provided.droppableProps.style\n                )}\n              >\n                {state.columnOrder.map((columnId: any, index: any) => {\n                  return (\n                    <Column\n                      key={columnId}\n                      column={state.columns[columnId]}\n                      index={index}\n                      reorder={reorder}\n                      addCard={addCard}\n                      setOpen={setOpen}\n                      setCardForOpen={setCardForOpen}\n                      updateSectionTitle={updateSectionTitle}\n                      deleteColumn={deleteColumn}\n                      onDragEnd={onDragEnd}\n                    />\n                  );\n                })}\n                {provided.placeholder}\n              </div>\n            )}\n          </Droppable>\n        </DragDropContext>\n        <AddSection colorIndex={colorIndex} addSection={addSection} />\n      </div>\n      {open && (\n        <CardModal\n          open={true}\n          projectName={props.projectName}\n          currentColumn={currentColumn}\n          handleModalClose={handleModalClose}\n          currentCard={currentCard}\n          addChecklist={addChecklist}\n          updateChecklist={updateChecklist}\n          addActivity={addActivity}\n          updateCardTitle={updateCardTitle}\n        />\n      )}\n    </>\n  );\n}\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}