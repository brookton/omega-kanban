{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/heegupark/Desktop/Workspace/MyProject/omega-kanban/components/card-box2.tsx\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'; // fake data generator\n\nvar getItems = function getItems(count) {\n  return Array.from({\n    length: count\n  }, function (v, k) {\n    return k;\n  }).map(function (k) {\n    return {\n      id: \"item-\".concat(k),\n      content: \"item \".concat(k)\n    };\n  });\n}; // a little function to help us with reordering the result\n\n\nvar reorder = function reorder(list, startIndex, endIndex) {\n  var result = Array.from(list);\n\n  var _result$splice = result.splice(startIndex, 1),\n      _result$splice2 = _slicedToArray(_result$splice, 1),\n      removed = _result$splice2[0];\n\n  result.splice(endIndex, 0, removed);\n  return result;\n};\n\nvar grid = 8;\n\nvar getItemStyle = function getItemStyle(isDragging, draggableStyle) {\n  return _objectSpread({\n    // some basic styles to make the items look a bit nicer\n    userSelect: 'none',\n    padding: grid * 2,\n    margin: \"0 0 \".concat(grid, \"px 0\"),\n    // change background colour if dragging\n    background: isDragging ? 'lightgreen' : 'grey'\n  }, draggableStyle);\n};\n\nvar getListStyle = function getListStyle(isDraggingOver) {\n  return {\n    background: isDraggingOver ? 'lightblue' : 'lightgrey',\n    padding: grid,\n    width: 250\n  };\n};\n\nvar CardBox2 = /*#__PURE__*/function (_Component) {\n  _inherits(CardBox2, _Component);\n\n  var _super = _createSuper(CardBox2);\n\n  function CardBox2(props) {\n    var _this;\n\n    _classCallCheck(this, CardBox2);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      items: getItems(10)\n    };\n    _this.onDragEnd = _this.onDragEnd.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(CardBox2, [{\n    key: \"onDragEnd\",\n    value: function onDragEnd(result) {// dropped outside the list\n    } // Normally you would want to split things out into separate components.\n    // But in this example everything is just done in one place for simplicity\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(DragDropContext, {\n        onDragEnd: this.onDragEnd,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 7\n        }\n      }, __jsx(Droppable, {\n        droppableId: \"droppable\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 9\n        }\n      }, function (provided, snapshot) {\n        return __jsx(\"div\", _extends({}, provided.droppableProps, {\n          ref: provided.innerRef,\n          style: getListStyle(snapshot.isDraggingOver),\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }\n        }), _this2.state.items.map(function (item, index) {\n          return __jsx(Draggable, {\n            key: item.id,\n            draggableId: item.id,\n            index: index,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 17\n            }\n          }, function (provided, snapshot) {\n            return __jsx(\"div\", _extends({\n              ref: provided.innerRef\n            }, provided.draggableProps, provided.dragHandleProps, {\n              style: getItemStyle(snapshot.isDragging, provided.draggableProps.style),\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 70,\n                columnNumber: 21\n              }\n            }), item.content);\n          });\n        }), provided.placeholder);\n      }));\n    }\n  }]);\n\n  return CardBox2;\n}(Component); // Put the thing into the DOM!\n\n\nexport default CardBox2;","map":{"version":3,"sources":["/Users/heegupark/Desktop/Workspace/MyProject/omega-kanban/components/card-box2.tsx"],"names":["React","Component","DragDropContext","Droppable","Draggable","getItems","count","Array","from","length","v","k","map","id","content","reorder","list","startIndex","endIndex","result","splice","removed","grid","getItemStyle","isDragging","draggableStyle","userSelect","padding","margin","background","getListStyle","isDraggingOver","width","CardBox2","props","state","items","onDragEnd","bind","provided","snapshot","droppableProps","innerRef","item","index","draggableProps","dragHandleProps","style","placeholder"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n\n// fake data generator\nconst getItems = (count: any) =>\n  Array.from({ length: count }, (v, k) => k).map((k) => ({\n    id: `item-${k}`,\n    content: `item ${k}`,\n  }));\n\n// a little function to help us with reordering the result\nconst reorder = (list: any, startIndex: any, endIndex: any) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging: any, draggableStyle: any) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: 'none',\n  padding: grid * 2,\n  margin: `0 0 ${grid}px 0`,\n\n  // change background colour if dragging\n  background: isDragging ? 'lightgreen' : 'grey',\n\n  // styles we need to apply on draggables\n  ...draggableStyle,\n});\n\nconst getListStyle = (isDraggingOver: any) => ({\n  background: isDraggingOver ? 'lightblue' : 'lightgrey',\n  padding: grid,\n  width: 250,\n});\n\nclass CardBox2 extends Component {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      items: getItems(10) as any,\n    };\n    this.onDragEnd = this.onDragEnd.bind(this);\n  }\n\n  onDragEnd(result: any) {\n    // dropped outside the list\n  }\n\n  // Normally you would want to split things out into separate components.\n  // But in this example everything is just done in one place for simplicity\n  render() {\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        <Droppable droppableId=\"droppable\">\n          {(provided, snapshot) => (\n            <div\n              {...provided.droppableProps}\n              ref={provided.innerRef}\n              style={getListStyle(snapshot.isDraggingOver)}\n            >\n              {this.state.items.map((item: any, index: any) => (\n                <Draggable key={item.id} draggableId={item.id} index={index}>\n                  {(provided, snapshot) => (\n                    <div\n                      ref={provided.innerRef}\n                      {...provided.draggableProps}\n                      {...provided.dragHandleProps}\n                      style={getItemStyle(\n                        snapshot.isDragging,\n                        provided.draggableProps.style\n                      )}\n                    >\n                      {item.content}\n                    </div>\n                  )}\n                </Draggable>\n              ))}\n              {provided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      </DragDropContext>\n    );\n  }\n}\n\n// Put the thing into the DOM!\nexport default CardBox2;\n"]},"metadata":{},"sourceType":"module"}