{"ast":null,"code":"import Card from '../../middleware/models/card';\n\nrequire('../../middleware/db/mongoose');\n\nexport default (async (request, response) => {\n  const {\n    columnId,\n    cardId\n  } = request.body;\n\n  try {\n    // const column = await Column.findOne({ _id: columnId });\n    // column.cardOrder = column.cardOrder.filter((item: object) => {\n    //   return item.toString() !== cardId;\n    // });\n    // await column.save();\n    await Card.deleteOne({\n      _id: cardId\n    });\n    return response.status(201).json({\n      success: true,\n      message: 'successfully deleted'\n    });\n  } catch (e) {\n    return response.status(500).json({\n      success: false,\n      message: 'failed to delete a card'\n    });\n  }\n});","map":{"version":3,"sources":["/Users/heegupark/Desktop/Workspace/MyProject/omega-kanban/pages/api/delete-card.tsx"],"names":["Card","require","request","response","columnId","cardId","body","deleteOne","_id","status","json","success","message","e"],"mappings":"AAEA,OAAOA,IAAP,MAAiB,8BAAjB;;AACAC,OAAO,CAAC,8BAAD,CAAP;;AAEA,gBAAe,OAAOC,OAAP,EAAgCC,QAAhC,KAA8D;AAC3E,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAuBH,OAAO,CAACI,IAArC;;AACA,MAAI;AACF;AACA;AACA;AACA;AACA;AACA,UAAMN,IAAI,CAACO,SAAL,CAAe;AAAEC,MAAAA,GAAG,EAAEH;AAAP,KAAf,CAAN;AAEA,WAAOF,QAAQ,CACZM,MADI,CACG,GADH,EAEJC,IAFI,CAEC;AAAEC,MAAAA,OAAO,EAAE,IAAX;AAAiBC,MAAAA,OAAO,EAAE;AAA1B,KAFD,CAAP;AAGD,GAXD,CAWE,OAAOC,CAAP,EAAU;AACV,WAAOV,QAAQ,CACZM,MADI,CACG,GADH,EAEJC,IAFI,CAEC;AAAEC,MAAAA,OAAO,EAAE,KAAX;AAAkBC,MAAAA,OAAO,EAAE;AAA3B,KAFD,CAAP;AAGD;AACF,CAlBD","sourcesContent":["import { NextApiRequest, NextApiResponse } from 'next';\nimport Column from '../../middleware/models/column';\nimport Card from '../../middleware/models/card';\nrequire('../../middleware/db/mongoose');\n\nexport default async (request: NextApiRequest, response: NextApiResponse) => {\n  const { columnId, cardId } = request.body;\n  try {\n    // const column = await Column.findOne({ _id: columnId });\n    // column.cardOrder = column.cardOrder.filter((item: object) => {\n    //   return item.toString() !== cardId;\n    // });\n    // await column.save();\n    await Card.deleteOne({ _id: cardId });\n\n    return response\n      .status(201)\n      .json({ success: true, message: 'successfully deleted' });\n  } catch (e) {\n    return response\n      .status(500)\n      .json({ success: false, message: 'failed to delete a card' });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}