{"ast":null,"code":"import Column from '../../middleware/models/column';\n\nrequire('../../middleware/db/mongoose');\n\nimport mongoose from 'mongoose';\nconst ObjectId = mongoose.Types.ObjectId; //http://localhost:8080/5f7fd60d50bd1d8dcf2f75ba/running\n//http://localhost:8080/5f7fd77b50bd1d8dcf2f75c0/ask\n\nexport default (async (request, response) => {\n  const {\n    _id\n  } = request.body;\n\n  try {\n    const columns = await Column.aggregate([{\n      $match: {\n        projectId: ObjectId(_id)\n      }\n    }, // {\n    //   $lookup: {\n    //     from: 'cards',\n    //     localField: '_id',\n    //     foreignField: 'columnId',\n    //     as: 'cards',\n    //   },\n    // },\n    {\n      $lookup: {\n        from: 'columns',\n        pipeline: [{\n          $lookup: {\n            from: 'checklists',\n            localField: 'cards._id',\n            foreignField: 'cardId',\n            as: 'checklists'\n          }\n        }, {\n          $lookup: {\n            from: 'activities',\n            localField: 'cards._id',\n            foreignField: 'cardId',\n            as: 'activities'\n          }\n        }],\n        as: 'cards'\n      }\n    }]);\n\n    if (!columns) {\n      return response.status(404).json({\n        success: false,\n        message: 'data not found'\n      });\n    }\n\n    return response.status(200).json({\n      success: true,\n      data: columns\n    });\n  } catch (e) {\n    return response.status(500).json({\n      success: false,\n      message: 'failed to get a board data'\n    });\n  }\n});","map":{"version":3,"sources":["/Users/heegupark/Desktop/Workspace/MyProject/omega-kanban/pages/api/get-columns.tsx"],"names":["Column","require","mongoose","ObjectId","Types","request","response","_id","body","columns","aggregate","$match","projectId","$lookup","from","pipeline","localField","foreignField","as","status","json","success","message","data","e"],"mappings":"AACA,OAAOA,MAAP,MAAmB,gCAAnB;;AACAC,OAAO,CAAC,8BAAD,CAAP;;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,MAAMC,QAAQ,GAAGD,QAAQ,CAACE,KAAT,CAAeD,QAAhC,C,CAEA;AACA;;AAEA,gBAAe,OAAOE,OAAP,EAAgCC,QAAhC,KAA8D;AAC3E,QAAM;AAAEC,IAAAA;AAAF,MAAUF,OAAO,CAACG,IAAxB;;AACA,MAAI;AACF,UAAMC,OAAO,GAAG,MAAMT,MAAM,CAACU,SAAP,CAAiB,CACrC;AACEC,MAAAA,MAAM,EAAE;AACNC,QAAAA,SAAS,EAAET,QAAQ,CAACI,GAAD;AADb;AADV,KADqC,EAMrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEM,MAAAA,OAAO,EAAE;AACPC,QAAAA,IAAI,EAAE,SADC;AAEPC,QAAAA,QAAQ,EAAE,CACR;AACEF,UAAAA,OAAO,EAAE;AACPC,YAAAA,IAAI,EAAE,YADC;AAEPE,YAAAA,UAAU,EAAE,WAFL;AAGPC,YAAAA,YAAY,EAAE,QAHP;AAIPC,YAAAA,EAAE,EAAE;AAJG;AADX,SADQ,EASR;AACEL,UAAAA,OAAO,EAAE;AACPC,YAAAA,IAAI,EAAE,YADC;AAEPE,YAAAA,UAAU,EAAE,WAFL;AAGPC,YAAAA,YAAY,EAAE,QAHP;AAIPC,YAAAA,EAAE,EAAE;AAJG;AADX,SATQ,CAFH;AAoBPA,QAAAA,EAAE,EAAE;AApBG;AADX,KAdqC,CAAjB,CAAtB;;AAuCA,QAAI,CAACT,OAAL,EAAc;AACZ,aAAOH,QAAQ,CAACa,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAC/BC,QAAAA,OAAO,EAAE,KADsB;AAE/BC,QAAAA,OAAO,EAAE;AAFsB,OAA1B,CAAP;AAID;;AACD,WAAOhB,QAAQ,CAACa,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAAEC,MAAAA,OAAO,EAAE,IAAX;AAAiBE,MAAAA,IAAI,EAAEd;AAAvB,KAA1B,CAAP;AACD,GA/CD,CA+CE,OAAOe,CAAP,EAAU;AACV,WAAOlB,QAAQ,CACZa,MADI,CACG,GADH,EAEJC,IAFI,CAEC;AAAEC,MAAAA,OAAO,EAAE,KAAX;AAAkBC,MAAAA,OAAO,EAAE;AAA3B,KAFD,CAAP;AAGD;AACF,CAtDD","sourcesContent":["import { NextApiRequest, NextApiResponse } from 'next';\nimport Column from '../../middleware/models/column';\nrequire('../../middleware/db/mongoose');\nimport mongoose from 'mongoose';\nconst ObjectId = mongoose.Types.ObjectId;\n\n//http://localhost:8080/5f7fd60d50bd1d8dcf2f75ba/running\n//http://localhost:8080/5f7fd77b50bd1d8dcf2f75c0/ask\n\nexport default async (request: NextApiRequest, response: NextApiResponse) => {\n  const { _id } = request.body;\n  try {\n    const columns = await Column.aggregate([\n      {\n        $match: {\n          projectId: ObjectId(_id),\n        },\n      },\n      // {\n      //   $lookup: {\n      //     from: 'cards',\n      //     localField: '_id',\n      //     foreignField: 'columnId',\n      //     as: 'cards',\n      //   },\n      // },\n      {\n        $lookup: {\n          from: 'columns',\n          pipeline: [\n            {\n              $lookup: {\n                from: 'checklists',\n                localField: 'cards._id',\n                foreignField: 'cardId',\n                as: 'checklists',\n              },\n            },\n            {\n              $lookup: {\n                from: 'activities',\n                localField: 'cards._id',\n                foreignField: 'cardId',\n                as: 'activities',\n              },\n            },\n          ],\n          as: 'cards',\n        },\n      },\n    ]);\n    if (!columns) {\n      return response.status(404).json({\n        success: false,\n        message: 'data not found',\n      });\n    }\n    return response.status(200).json({ success: true, data: columns });\n  } catch (e) {\n    return response\n      .status(500)\n      .json({ success: false, message: 'failed to get a board data' });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}