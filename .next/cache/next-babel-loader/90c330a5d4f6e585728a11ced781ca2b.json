{"ast":null,"code":"var _jsxFileName = \"/Users/heegupark/Desktop/Workspace/MyProject/omega-kanban/components/board.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport Top from './top';\nimport CardBox from './card-box';\nimport AddSection from './add-section';\n\nfunction Board(props) {\n  const {\n    0: cardBoxes,\n    1: setCardBoxes\n  } = useState([{\n    title: 'progress'\n  }]);\n\n  const onBeforeCapture = () => {\n    /*...*/\n  };\n\n  const onBeforeDragStart = () => {\n    /*...*/\n  };\n\n  const onDragStart = () => {\n    /*...*/\n  };\n\n  const onDragUpdate = () => {\n    /*...*/\n  };\n\n  const onDragEnd = result => {\n    const {\n      destination,\n      source,\n      draggableId,\n      type\n    } = result;\n    if (!destination) return;\n    if (destination.droppableId === source.droppableId && destination.index === source.index) return;\n\n    if (type === 'column') {\n      const newCardBoxes = reorder(cardBoxes, result.source.index, result.destination.index);\n    }\n\n    const start = result.source.index;\n    const finish = result.destination.index; // Moving tasks between columns\n\n    const startTaskIds = Array.from(start.taskIds);\n    startTaskIds.splice(source.index, 1);\n\n    const newStart = _objectSpread(_objectSpread({}, start), {}, {\n      taskIds: startTaskIds\n    });\n\n    const finishTaskIds = Array.from(finish.taskIds);\n    finishTaskIds.splice(destination.index, 0, draggableId);\n\n    const newFinish = _objectSpread(_objectSpread({}, finish), {}, {\n      taskIds: finishTaskIds\n    });\n\n    const newState = _objectSpread(_objectSpread({}, this.state), {}, {\n      columns: _objectSpread(_objectSpread({}, this.state.columns), {}, {\n        [newStart.id]: newStart,\n        [newFinish.id]: newFinish\n      }),\n      confetti: false\n    });\n\n    this.setState(newState, () => {\n      localStorage.setItem('state', JSON.stringify(this.state));\n\n      if (destination.droppableId === 'column-3') {\n        this.checkCompleted();\n      }\n    });\n  };\n\n  const getItemStyle = (isDragging, draggableStyle) => _objectSpread({\n    display: 'flex',\n    flexDirection: 'row'\n  }, draggableStyle);\n\n  const createCardBox = cardBox => {\n    setCardBoxes([...cardBoxes, cardBox]);\n  };\n\n  const reorder = (list, startIndex, endIndex) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    return result;\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Top, {\n    projectName: props.projectName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    className: \"board\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }, __jsx(DragDropContext, {\n    onBeforeCapture: onBeforeCapture,\n    onBeforeDragStart: onBeforeDragStart,\n    onDragStart: onDragStart,\n    onDragUpdate: onDragUpdate,\n    onDragEnd: onDragEnd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, __jsx(Droppable, {\n    direction: \"horizontal\",\n    droppableId: \"droppable-1\",\n    type: \"COLUMN\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 11\n    }\n  }, (provided, snapshot) => __jsx(\"div\", _extends({\n    ref: provided.innerRef\n  }, provided.droppableProps, {\n    style: getItemStyle(snapshot.isDragging, provided.droppableProps.style),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 15\n    }\n  }), cardBoxes.map((cardBox, index) => {\n    return __jsx(Draggable, {\n      key: index,\n      draggableId: index.toString(),\n      index: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 21\n      }\n    }, (provided, snapshot) => __jsx(React.Fragment, null, __jsx(CardBox, {\n      reorder: reorder,\n      cardBoxTitle: cardBox.title,\n      innerRef: provided.innerRef,\n      draggableProps: provided.draggableProps,\n      dragHandleProps: provided.dragHandleProps,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 27\n      }\n    }), provided.placeholder));\n  }), provided.placeholder))), __jsx(AddSection, {\n    createCardBox: createCardBox,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/heegupark/Desktop/Workspace/MyProject/omega-kanban/components/board.tsx"],"names":["React","useState","DragDropContext","Droppable","Draggable","Top","CardBox","AddSection","Board","props","cardBoxes","setCardBoxes","title","onBeforeCapture","onBeforeDragStart","onDragStart","onDragUpdate","onDragEnd","result","destination","source","draggableId","type","droppableId","index","newCardBoxes","reorder","start","finish","startTaskIds","Array","from","taskIds","splice","newStart","finishTaskIds","newFinish","newState","state","columns","id","confetti","setState","localStorage","setItem","JSON","stringify","checkCompleted","getItemStyle","isDragging","draggableStyle","display","flexDirection","createCardBox","cardBox","list","startIndex","endIndex","removed","projectName","provided","snapshot","innerRef","droppableProps","style","map","toString","draggableProps","dragHandleProps","placeholder"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport Top from './top';\nimport CardBox from './card-box';\nimport AddSection from './add-section';\n\nfunction Board(props: any) {\n  const [cardBoxes, setCardBoxes] = useState([{ title: 'progress' }]);\n  const onBeforeCapture = () => {\n    /*...*/\n  };\n\n  const onBeforeDragStart = () => {\n    /*...*/\n  };\n\n  const onDragStart = () => {\n    /*...*/\n  };\n  const onDragUpdate = () => {\n    /*...*/\n  };\n\n  const onDragEnd = (result: any) => {\n    const { destination, source, draggableId, type } = result;\n    if (!destination) return;\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    )\n      return;\n\n    if (type === 'column') {\n      const newCardBoxes = reorder(\n        cardBoxes,\n        result.source.index,\n        result.destination.index\n      );\n    }\n\n    const start = result.source.index;\n    const finish = result.destination.index;\n\n    // Moving tasks between columns\n    const startTaskIds = Array.from(start.taskIds);\n    startTaskIds.splice(source.index, 1);\n    const newStart = {\n      ...start,\n      taskIds: startTaskIds,\n    };\n\n    const finishTaskIds = Array.from(finish.taskIds);\n    finishTaskIds.splice(destination.index, 0, draggableId);\n    const newFinish = {\n      ...finish,\n      taskIds: finishTaskIds,\n    };\n\n    const newState = {\n      ...this.state,\n      columns: {\n        ...this.state.columns,\n        [newStart.id]: newStart,\n        [newFinish.id]: newFinish,\n      },\n      confetti: false,\n    };\n    this.setState(newState, () => {\n      localStorage.setItem('state', JSON.stringify(this.state));\n      if (destination.droppableId === 'column-3') {\n        this.checkCompleted();\n      }\n    });\n  };\n\n  const getItemStyle = (isDragging: any, draggableStyle: any) => ({\n    display: 'flex',\n    flexDirection: 'row',\n    ...draggableStyle,\n  });\n\n  const createCardBox = (cardBox: any) => {\n    setCardBoxes([...cardBoxes, cardBox] as any);\n  };\n\n  const reorder = (list: any, startIndex: any, endIndex: any) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    return result;\n  };\n\n  return (\n    <>\n      <Top projectName={props.projectName} />\n      <div className=\"board\">\n        <DragDropContext\n          onBeforeCapture={onBeforeCapture}\n          onBeforeDragStart={onBeforeDragStart}\n          onDragStart={onDragStart}\n          onDragUpdate={onDragUpdate}\n          onDragEnd={onDragEnd}\n        >\n          <Droppable\n            direction=\"horizontal\"\n            droppableId=\"droppable-1\"\n            type=\"COLUMN\"\n          >\n            {(provided: any, snapshot: any) => (\n              <div\n                ref={provided.innerRef}\n                {...provided.droppableProps}\n                style={getItemStyle(\n                  snapshot.isDragging,\n                  provided.droppableProps.style\n                )}\n              >\n                {cardBoxes.map((cardBox: any, index: any) => {\n                  return (\n                    <Draggable\n                      key={index}\n                      draggableId={index.toString()}\n                      index={index}\n                    >\n                      {(provided: any, snapshot: any) => (\n                        <>\n                          <CardBox\n                            reorder={reorder}\n                            cardBoxTitle={cardBox.title}\n                            innerRef={provided.innerRef}\n                            draggableProps={provided.draggableProps}\n                            dragHandleProps={provided.dragHandleProps}\n                          />\n                          {provided.placeholder}\n                        </>\n                      )}\n                    </Draggable>\n                  );\n                })}\n                {provided.placeholder}\n              </div>\n            )}\n          </Droppable>\n        </DragDropContext>\n        <AddSection createCardBox={createCardBox} />\n      </div>\n    </>\n  );\n}\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}