{"ast":null,"code":"var _jsxFileName = \"/Users/heegupark/Desktop/Workspace/MyProject/omega-kanban/components/board.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport { v4 as uuidv4 } from 'uuid';\nimport Top from './top';\nimport Column from './column';\nimport AddSection from './add-section';\nimport Archive from './archive';\nimport CardModal from './card-modal';\nimport { useSnackbar } from 'notistack';\n\nfunction Board(props) {\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    columns: {\n      'column-0': {\n        id: 'column-0',\n        title: 'Plan',\n        cards: [{\n          id: uuidv4(),\n          cardTitle: 'Create HTML skeleton',\n          note: '',\n          isCardCompleted: false,\n          isArchived: false,\n          checklists: [],\n          activities: [],\n          dueDate: new Date(2020, 9, 11),\n          createdAt: new Date(2020, 8, 11),\n          updatedAt: new Date(2020, 8, 11)\n        }],\n        colorIndex: 0,\n        createdAt: new Date(2020, 8, 1),\n        updatedAt: new Date(2020, 8, 11)\n      },\n      'column-1': {\n        id: 'column-1',\n        title: 'Progress',\n        cards: [],\n        colorIndex: 1,\n        createdAt: new Date(2020, 8, 2),\n        updatedAt: new Date(2020, 8, 2)\n      },\n      'column-2': {\n        id: 'column-2',\n        title: 'Complete',\n        cards: [],\n        colorIndex: 2,\n        createdAt: new Date(2020, 8, 3),\n        updatedAt: new Date(2020, 8, 3)\n      }\n    },\n    columnOrder: ['column-0', 'column-1', 'column-2'],\n    archive: {\n      id: 'archive',\n      title: 'Archive',\n      cards: [],\n      colorIndex: 0,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    }\n  });\n  const {\n    0: colorIndex,\n    1: setColorIndex\n  } = useState(0);\n  const {\n    0: currentCard,\n    1: setCurrentCard\n  } = useState({});\n  const {\n    0: currentColumn,\n    1: setCurrentColumn\n  } = useState({});\n  useEffect(() => {\n    setColorIndex(state.columnOrder.length - 1);\n  }, []);\n\n  const addSection = (sectionTitle, card) => {\n    const newSection = {\n      id: uuidv4(),\n      title: sectionTitle,\n      cards: [],\n      colorIndex: colorIndex + 1,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n\n    if (card) {\n      newSection.cards.push(card);\n    }\n\n    setColorIndex(colorIndex + 1);\n    state.columns[newSection.id] = newSection;\n    state.columnOrder.push(newSection.id);\n    setState(_objectSpread({}, state));\n  };\n\n  const addCard = (columnId, cardTitle) => {\n    const newCard = {\n      id: uuidv4(),\n      cardTitle,\n      note: '',\n      isCardCompleted: false,\n      isArchived: false,\n      checklists: [],\n      activities: [],\n      dueDate: null,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    addActivity(columnId, newCard.id, `A card with title '${cardTitle}' is created in '${state.columns[columnId].title}'`);\n    updateDate(columnId, null);\n    state.columns[columnId].cards.push(newCard);\n    setState(_objectSpread({}, state));\n  };\n\n  const completeCard = (columnId, cardId) => {\n    let completeCard = null;\n    state.columns[columnId].cards.map((card, index) => {\n      if (card.id === cardId) {\n        card.isCardCompleted = true;\n        completeCard = card;\n        state.columns[columnId].cards.splice(index, 1);\n      }\n    });\n    state.columns[columnId].cards.push(completeCard);\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `Card is completed`);\n    setState(_objectSpread({}, state));\n  };\n\n  const updateSectionTitle = (columnId, sectionTitle) => {\n    state.columns[columnId].title = sectionTitle;\n    state.columns[columnId].updatedAt = new Date();\n    setState(_objectSpread({}, state));\n  };\n\n  const updateCardTitle = (columnId, cardId, cardTitle) => {\n    state.columns[columnId].cards.map(card => {\n      if (card.id === cardId) {\n        card.cardTitle = cardTitle;\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `Card title is changed to ${cardTitle}`);\n    setState(_objectSpread({}, state));\n  };\n\n  const updateCardNote = (columnId, cardId, note) => {\n    state.columns[columnId].cards.map(card => {\n      if (card.id === cardId) {\n        card.note = note;\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `Card note is changed to ||${note}`);\n    setState(_objectSpread({}, state));\n  };\n\n  const deleteColumn = id => {\n    delete state.columns[id];\n    state.columnOrder.splice(state.columnOrder.indexOf(id), 1);\n    setState(_objectSpread({}, state));\n  };\n\n  const deleteCard = (columnId, cardId) => {\n    state.columns[columnId].cards.map((card, index) => {\n      if (card.id === cardId) {\n        state.columns[columnId].cards.splice(index, 1);\n      }\n    });\n    updateDate(columnId, cardId);\n    handleSnackbar('A card is deleted', 'error');\n    setState(_objectSpread({}, state));\n  };\n\n  const archiveCard = (columnId, cardId) => {\n    let tempCard = null;\n    state.columns[columnId].cards.map((card, index) => {\n      if (card.id === cardId) {\n        card.isArchived = true;\n        tempCard = card;\n        state.columns[columnId].cards.splice(index, 1);\n      }\n    });\n    updateDate(columnId, cardId);\n    state.archive.cards.push(tempCard);\n    addActivity('archive', cardId, `Card is archived`);\n    setState(_objectSpread({}, state));\n  };\n\n  const onDragEnd = result => {\n    if (!result.destination) {\n      return;\n    }\n\n    if (result.type === 'column') {\n      const columnOrder = reorder(state.columnOrder, result.source.index, result.destination.index);\n      console.log(result.source);\n      handleSnackbar(`${state.columns.columnOrder[result.source.index].title} and ${state.columns.columnOrder[result.destination.index].title} are reordered`, 'success');\n      setState(_objectSpread(_objectSpread({}, state), {}, {\n        columnOrder\n      }));\n      return;\n    }\n\n    if (result.source.droppableId === result.destination.droppableId) {\n      const column = state.columns[result.source.droppableId];\n      const cards = reorder(column.cards, result.source.index, result.destination.index);\n\n      const newState = _objectSpread(_objectSpread({}, state), {}, {\n        columns: _objectSpread(_objectSpread({}, state.columns), {}, {\n          [column.id]: _objectSpread(_objectSpread({}, column), {}, {\n            cards\n          })\n        })\n      });\n\n      setState(newState);\n      handleSnackbar(`A card is reordered in'${column.title}'`, 'success');\n      return;\n    }\n\n    const sourceColumn = state.columns[result.source.droppableId];\n    const destinationColumn = state.columns[result.destination.droppableId];\n    const card = sourceColumn.cards[result.source.index];\n\n    const newSourceColumn = _objectSpread(_objectSpread({}, sourceColumn), {}, {\n      cards: [...sourceColumn.cards]\n    });\n\n    newSourceColumn.cards.splice(result.source.index, 1);\n\n    const newDestinationColumn = _objectSpread(_objectSpread({}, destinationColumn), {}, {\n      cards: [...destinationColumn.cards]\n    });\n\n    newDestinationColumn.cards.splice(result.destination.index, 0, card);\n\n    const newState = _objectSpread(_objectSpread({}, state), {}, {\n      columns: _objectSpread(_objectSpread({}, state.columns), {}, {\n        [newSourceColumn.id]: newSourceColumn,\n        [newDestinationColumn.id]: newDestinationColumn\n      })\n    });\n\n    handleSnackbar(`A card is moved from '${newSourceColumn.title}' to '${newDestinationColumn.title}'`, 'success');\n    setState(newState);\n  };\n\n  const getItemStyle = (isDragging, draggableStyle) => _objectSpread({\n    display: 'flex',\n    flexDirection: 'row'\n  }, draggableStyle);\n\n  const reorder = (list, startIndex, endIndex) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    return result;\n  };\n\n  const [open, setOpen] = React.useState(false);\n\n  const setCardForOpen = (columnId, cardId) => {\n    if (columnId === 'archive') {\n      const card = state.archive.cards.filter(card => card.id === cardId);\n      setCurrentCard(card[0]);\n      setCurrentColumn(state.archive);\n    } else {\n      const card = state.columns[columnId].cards.filter(card => card.id === cardId);\n      setCurrentCard(card[0]);\n      setCurrentColumn(state.columns[columnId]);\n    }\n  };\n\n  const handleModalClose = () => {\n    setOpen(false);\n  };\n\n  const addChecklist = (columnId, cardId, checklist) => {\n    state.columns[columnId].cards.map(card => {\n      if (card.id === cardId) {\n        card.checklists.push({\n          id: uuidv4(),\n          checklist,\n          isChecked: false,\n          date: new Date()\n        });\n      }\n    });\n    addActivity(columnId, cardId, `${checklist} is added to the checklist`);\n    updateDate(columnId, cardId);\n    setState(_objectSpread({}, state));\n  };\n\n  const updateDate = (columnId, cardId) => {\n    if (cardId) {\n      state.columns[columnId].cards.map(card => {\n        if (card.id === cardId) {\n          card.updatedAt = new Date();\n        }\n      });\n    }\n\n    state.columns[columnId].updatedAt = new Date();\n    setState(_objectSpread({}, state));\n  };\n\n  const updateChecklist = (columnId, cardId, checklistId, checklistContent) => {\n    state.columns[columnId].cards.map(card => {\n      if (card.id === cardId) {\n        card.checklists.map(checklist => {\n          if (checklist.id === checklistId) {\n            checklist.checklist = checklistContent;\n          }\n        });\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `A checklist is updated to ${checklistContent}`);\n    setState(_objectSpread({}, state));\n  };\n\n  const completeChecklist = (columnId, cardId, checklistId, isChecked) => {\n    state.columns[columnId].cards.map(card => {\n      if (card.id === cardId) {\n        card.checklists.map(checklist => {\n          if (checklist.id === checklistId) {\n            checklist.isChecked = isChecked;\n          }\n        });\n      }\n    });\n    updateDate(columnId, cardId);\n    if (isChecked) addActivity(columnId, cardId, `A checklist is completed`);else addActivity(columnId, cardId, `A checklist is changed to incomplete`);\n    setState(_objectSpread({}, state));\n  };\n\n  const deleteChecklist = (columnId, cardId, checklistId) => {\n    state.columns[columnId].cards.map(card => {\n      if (card.id === cardId) {\n        card.checklists = card.checklists.filter(checklist => checklist.id !== checklistId);\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `A checklist is deleted`);\n    setState(_objectSpread({}, state));\n  };\n\n  const convertDate = date => {\n    const month = date.toString().split(' ')[1];\n    const day = date.toString().split(' ')[2];\n    const year = date.toString().split(' ')[3];\n    return `${month} ${day}, ${year}`;\n  };\n\n  const setDueDate = (columnId, cardId, date) => {\n    state.columns[columnId].cards.map(card => {\n      if (card.id === cardId) {\n        card.dueDate = new Date(date);\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `A due date is set to ${convertDate(date)}`);\n    setState(_objectSpread({}, state));\n  };\n\n  const addActivity = (columnId, cardId, activity) => {\n    if (columnId === 'archive') {\n      state.archive.cards.map(card => {\n        if (card.id === cardId) {\n          card.activities.unshift({\n            id: uuidv4(),\n            activity,\n            createdAt: new Date()\n          });\n        }\n      });\n    } else {\n      state.columns[columnId].cards.map(card => {\n        if (card.id === cardId) {\n          card.activities.unshift({\n            id: uuidv4(),\n            activity,\n            createdAt: new Date()\n          });\n        }\n      });\n    }\n\n    handleSnackbar(activity, 'info');\n    setState(_objectSpread({}, state));\n  };\n\n  const handleSnackbar = (message, variant) => {\n    enqueueSnackbar(message, {\n      variant\n    });\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Top, {\n    setView: props.setView,\n    setProjectName: props.setProjectName,\n    projectName: props.projectName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 468,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    className: \"board\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 473,\n      columnNumber: 7\n    }\n  }, __jsx(DragDropContext, {\n    onDragEnd: onDragEnd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 474,\n      columnNumber: 9\n    }\n  }, __jsx(Droppable, {\n    direction: \"horizontal\",\n    droppableId: \"all-droppables\",\n    type: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 475,\n      columnNumber: 11\n    }\n  }, (provided, snapshot) => __jsx(\"div\", _extends({\n    ref: provided.innerRef\n  }, provided.droppableProps, {\n    style: getItemStyle(snapshot.isDragging, provided.droppableProps.style),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 481,\n      columnNumber: 15\n    }\n  }), state.columnOrder.map((columnId, index) => {\n    return __jsx(Column, {\n      key: columnId,\n      column: state.columns[columnId],\n      index: index,\n      reorder: reorder,\n      addCard: addCard,\n      setOpen: setOpen,\n      setCardForOpen: setCardForOpen,\n      updateSectionTitle: updateSectionTitle,\n      deleteColumn: deleteColumn,\n      onDragEnd: onDragEnd,\n      convertDate: convertDate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 21\n      }\n    });\n  }), provided.placeholder))), state.archive.cards.length > 0 && __jsx(Archive, {\n    archive: state.archive,\n    setCardForOpen: setCardForOpen,\n    convertDate: convertDate,\n    setOpen: setOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 512,\n      columnNumber: 11\n    }\n  }), __jsx(AddSection, {\n    colorIndex: colorIndex,\n    addSection: addSection,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 519,\n      columnNumber: 9\n    }\n  })), open && __jsx(CardModal, {\n    open: true,\n    projectName: props.projectName,\n    currentColumn: currentColumn,\n    handleModalClose: handleModalClose,\n    currentCard: currentCard,\n    addChecklist: addChecklist,\n    updateChecklist: updateChecklist,\n    addActivity: addActivity,\n    updateDate: updateDate,\n    updateCardTitle: updateCardTitle,\n    updateCardNote: updateCardNote,\n    completeChecklist: completeChecklist,\n    deleteChecklist: deleteChecklist,\n    setDueDate: setDueDate,\n    convertDate: convertDate,\n    completeCard: completeCard,\n    deleteCard: deleteCard,\n    archiveCard: archiveCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 522,\n      columnNumber: 9\n    }\n  }));\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/heegupark/Desktop/Workspace/MyProject/omega-kanban/components/board.tsx"],"names":["React","useState","useEffect","DragDropContext","Droppable","v4","uuidv4","Top","Column","AddSection","Archive","CardModal","useSnackbar","Board","props","enqueueSnackbar","state","setState","columns","id","title","cards","cardTitle","note","isCardCompleted","isArchived","checklists","activities","dueDate","Date","createdAt","updatedAt","colorIndex","columnOrder","archive","setColorIndex","currentCard","setCurrentCard","currentColumn","setCurrentColumn","length","addSection","sectionTitle","card","newSection","push","addCard","columnId","newCard","addActivity","updateDate","completeCard","cardId","map","index","splice","updateSectionTitle","updateCardTitle","updateCardNote","deleteColumn","indexOf","deleteCard","handleSnackbar","archiveCard","tempCard","onDragEnd","result","destination","type","reorder","source","console","log","droppableId","column","newState","sourceColumn","destinationColumn","newSourceColumn","newDestinationColumn","getItemStyle","isDragging","draggableStyle","display","flexDirection","list","startIndex","endIndex","Array","from","removed","open","setOpen","setCardForOpen","filter","handleModalClose","addChecklist","checklist","isChecked","date","updateChecklist","checklistId","checklistContent","completeChecklist","deleteChecklist","convertDate","month","toString","split","day","year","setDueDate","activity","unshift","message","variant","setView","setProjectName","projectName","provided","snapshot","innerRef","droppableProps","style","placeholder"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { v4 as uuidv4 } from 'uuid';\nimport Top from './top';\nimport Column from './column';\nimport AddSection from './add-section';\nimport Archive from './archive';\nimport CardModal from './card-modal';\nimport { VariantType, useSnackbar } from 'notistack';\n\nfunction Board(props: any) {\n  const { enqueueSnackbar } = useSnackbar();\n  const [state, setState] = useState({\n    columns: {\n      'column-0': {\n        id: 'column-0',\n        title: 'Plan',\n        cards: [\n          {\n            id: uuidv4(),\n            cardTitle: 'Create HTML skeleton',\n            note: '',\n            isCardCompleted: false,\n            isArchived: false,\n            checklists: [],\n            activities: [],\n            dueDate: new Date(2020, 9, 11),\n            createdAt: new Date(2020, 8, 11),\n            updatedAt: new Date(2020, 8, 11),\n          },\n        ],\n        colorIndex: 0,\n        createdAt: new Date(2020, 8, 1),\n        updatedAt: new Date(2020, 8, 11),\n      },\n      'column-1': {\n        id: 'column-1',\n        title: 'Progress',\n        cards: [],\n        colorIndex: 1,\n        createdAt: new Date(2020, 8, 2),\n        updatedAt: new Date(2020, 8, 2),\n      },\n      'column-2': {\n        id: 'column-2',\n        title: 'Complete',\n        cards: [],\n        colorIndex: 2,\n        createdAt: new Date(2020, 8, 3),\n        updatedAt: new Date(2020, 8, 3),\n      },\n    },\n    columnOrder: ['column-0', 'column-1', 'column-2'],\n    archive: {\n      id: 'archive',\n      title: 'Archive',\n      cards: [],\n      colorIndex: 0,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    },\n  } as any);\n\n  const [colorIndex, setColorIndex] = useState(0);\n  const [currentCard, setCurrentCard] = useState({} as any);\n  const [currentColumn, setCurrentColumn] = useState({} as any);\n\n  useEffect(() => {\n    setColorIndex(state.columnOrder.length - 1);\n  }, []);\n\n  const addSection = (sectionTitle: any, card: any) => {\n    const newSection = {\n      id: uuidv4(),\n      title: sectionTitle,\n      cards: [] as any,\n      colorIndex: colorIndex + 1,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    if (card) {\n      newSection.cards.push(card);\n    }\n    setColorIndex(colorIndex + 1);\n    state.columns[newSection.id] = newSection;\n    state.columnOrder.push(newSection.id);\n    setState({\n      ...state,\n    } as any);\n  };\n\n  const addCard = (columnId: any, cardTitle: any) => {\n    const newCard = {\n      id: uuidv4(),\n      cardTitle,\n      note: '',\n      isCardCompleted: false,\n      isArchived: false,\n      checklists: [],\n      activities: [],\n      dueDate: null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    addActivity(\n      columnId,\n      newCard.id,\n      `A card with title '${cardTitle}' is created in '${state.columns[columnId].title}'`\n    );\n    updateDate(columnId, null);\n    state.columns[columnId].cards.push(newCard);\n    setState({\n      ...state,\n    } as any);\n  };\n\n  const completeCard = (columnId: any, cardId: any) => {\n    let completeCard = null;\n    state.columns[columnId].cards.map((card: any, index: any) => {\n      if (card.id === cardId) {\n        card.isCardCompleted = true;\n        completeCard = card;\n        state.columns[columnId].cards.splice(index, 1);\n      }\n    });\n    state.columns[columnId].cards.push(completeCard);\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `Card is completed`);\n    setState({\n      ...state,\n    } as any);\n  };\n  const updateSectionTitle = (columnId: any, sectionTitle: any) => {\n    state.columns[columnId].title = sectionTitle;\n    state.columns[columnId].updatedAt = new Date();\n    setState({\n      ...state,\n    } as any);\n  };\n\n  const updateCardTitle = (columnId: any, cardId: any, cardTitle: any) => {\n    state.columns[columnId].cards.map((card: any) => {\n      if (card.id === cardId) {\n        card.cardTitle = cardTitle;\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `Card title is changed to ${cardTitle}`);\n    setState({\n      ...state,\n    } as any);\n  };\n\n  const updateCardNote = (columnId: any, cardId: any, note: any) => {\n    state.columns[columnId].cards.map((card: any) => {\n      if (card.id === cardId) {\n        card.note = note;\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `Card note is changed to ||${note}`);\n    setState({\n      ...state,\n    } as any);\n  };\n\n  const deleteColumn = (id: any) => {\n    delete state.columns[id];\n    state.columnOrder.splice(state.columnOrder.indexOf(id), 1);\n    setState({\n      ...state,\n    } as any);\n  };\n\n  const deleteCard = (columnId: any, cardId: any) => {\n    state.columns[columnId].cards.map((card: any, index: any) => {\n      if (card.id === cardId) {\n        state.columns[columnId].cards.splice(index, 1);\n      }\n    });\n    updateDate(columnId, cardId);\n    handleSnackbar('A card is deleted', 'error');\n    setState({\n      ...state,\n    } as any);\n  };\n\n  const archiveCard = (columnId: any, cardId: any) => {\n    let tempCard = null as any;\n    state.columns[columnId].cards.map((card: any, index: any) => {\n      if (card.id === cardId) {\n        card.isArchived = true;\n        tempCard = card;\n        state.columns[columnId].cards.splice(index, 1);\n      }\n    });\n    updateDate(columnId, cardId);\n    state.archive.cards.push(tempCard);\n    addActivity('archive', cardId, `Card is archived`);\n    setState({\n      ...state,\n    } as any);\n  };\n\n  const onDragEnd = (result: any) => {\n    if (!result.destination) {\n      return;\n    }\n\n    if (result.type === 'column') {\n      const columnOrder = reorder(\n        state.columnOrder,\n        result.source.index,\n        result.destination.index\n      );\n      console.log(result.source);\n      handleSnackbar(\n        `${state.columns.columnOrder[result.source.index].title} and ${\n          state.columns.columnOrder[result.destination.index].title\n        } are reordered`,\n        'success'\n      );\n      setState({\n        ...state,\n        columnOrder,\n      } as any);\n      return;\n    }\n\n    if (result.source.droppableId === result.destination.droppableId) {\n      const column = state.columns[result.source.droppableId];\n      const cards = reorder(\n        column.cards,\n        result.source.index,\n        result.destination.index\n      );\n\n      const newState = {\n        ...state,\n        columns: {\n          ...state.columns,\n          [column.id]: {\n            ...column,\n            cards,\n          },\n        },\n      };\n      setState(newState);\n      handleSnackbar(`A card is reordered in'${column.title}'`, 'success');\n      return;\n    }\n\n    const sourceColumn = state.columns[result.source.droppableId];\n    const destinationColumn = state.columns[result.destination.droppableId];\n    const card = sourceColumn.cards[result.source.index];\n\n    const newSourceColumn = {\n      ...sourceColumn,\n      cards: [...sourceColumn.cards],\n    };\n    newSourceColumn.cards.splice(result.source.index, 1);\n\n    const newDestinationColumn = {\n      ...destinationColumn,\n      cards: [...destinationColumn.cards],\n    };\n    newDestinationColumn.cards.splice(result.destination.index, 0, card);\n\n    const newState = {\n      ...state,\n      columns: {\n        ...state.columns,\n        [newSourceColumn.id]: newSourceColumn,\n        [newDestinationColumn.id]: newDestinationColumn,\n      },\n    };\n    handleSnackbar(\n      `A card is moved from '${newSourceColumn.title}' to '${newDestinationColumn.title}'`,\n      'success'\n    );\n    setState(newState);\n  };\n\n  const getItemStyle = (isDragging: any, draggableStyle: any) => ({\n    display: 'flex',\n    flexDirection: 'row',\n    ...draggableStyle,\n  });\n\n  const reorder = (list: any, startIndex: any, endIndex: any) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    return result;\n  };\n\n  const [open, setOpen] = React.useState(false);\n  const setCardForOpen = (columnId: any, cardId: any) => {\n    if (columnId === 'archive') {\n      const card = state.archive.cards.filter(\n        (card: any) => card.id === cardId\n      );\n      setCurrentCard(card[0]);\n      setCurrentColumn(state.archive);\n    } else {\n      const card = state.columns[columnId].cards.filter(\n        (card: any) => card.id === cardId\n      );\n      setCurrentCard(card[0]);\n      setCurrentColumn(state.columns[columnId]);\n    }\n  };\n\n  const handleModalClose = () => {\n    setOpen(false);\n  };\n\n  const addChecklist = (columnId: any, cardId: any, checklist: any) => {\n    state.columns[columnId].cards.map((card: any) => {\n      if (card.id === cardId) {\n        card.checklists.push({\n          id: uuidv4(),\n          checklist,\n          isChecked: false,\n          date: new Date(),\n        });\n      }\n    });\n    addActivity(columnId, cardId, `${checklist} is added to the checklist`);\n    updateDate(columnId, cardId);\n    setState({\n      ...state,\n    } as any);\n  };\n\n  const updateDate = (columnId: any, cardId: any) => {\n    if (cardId) {\n      state.columns[columnId].cards.map((card: any) => {\n        if (card.id === cardId) {\n          card.updatedAt = new Date();\n        }\n      });\n    }\n    state.columns[columnId].updatedAt = new Date();\n    setState({\n      ...state,\n    } as any);\n  };\n\n  const updateChecklist = (\n    columnId: any,\n    cardId: any,\n    checklistId: any,\n    checklistContent: any\n  ) => {\n    state.columns[columnId].cards.map((card: any) => {\n      if (card.id === cardId) {\n        card.checklists.map((checklist: any) => {\n          if (checklist.id === checklistId) {\n            checklist.checklist = checklistContent;\n          }\n        });\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(\n      columnId,\n      cardId,\n      `A checklist is updated to ${checklistContent}`\n    );\n    setState({\n      ...state,\n    } as any);\n  };\n\n  const completeChecklist = (\n    columnId: any,\n    cardId: any,\n    checklistId: any,\n    isChecked: any\n  ) => {\n    state.columns[columnId].cards.map((card: any) => {\n      if (card.id === cardId) {\n        card.checklists.map((checklist: any) => {\n          if (checklist.id === checklistId) {\n            checklist.isChecked = isChecked;\n          }\n        });\n      }\n    });\n    updateDate(columnId, cardId);\n    if (isChecked) addActivity(columnId, cardId, `A checklist is completed`);\n    else addActivity(columnId, cardId, `A checklist is changed to incomplete`);\n    setState({\n      ...state,\n    } as any);\n  };\n\n  const deleteChecklist = (columnId: any, cardId: any, checklistId: any) => {\n    state.columns[columnId].cards.map((card: any) => {\n      if (card.id === cardId) {\n        card.checklists = card.checklists.filter(\n          (checklist: any) => checklist.id !== checklistId\n        );\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `A checklist is deleted`);\n    setState({\n      ...state,\n    } as any);\n  };\n\n  const convertDate = (date: Date) => {\n    const month = date.toString().split(' ')[1];\n    const day = date.toString().split(' ')[2];\n    const year = date.toString().split(' ')[3];\n    return `${month} ${day}, ${year}`;\n  };\n\n  const setDueDate = (columnId: any, cardId: any, date: Date) => {\n    state.columns[columnId].cards.map((card: any) => {\n      if (card.id === cardId) {\n        card.dueDate = new Date(date);\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `A due date is set to ${convertDate(date)}`);\n    setState({\n      ...state,\n    } as any);\n  };\n\n  const addActivity = (columnId: any, cardId: any, activity: any) => {\n    if (columnId === 'archive') {\n      state.archive.cards.map((card: any) => {\n        if (card.id === cardId) {\n          card.activities.unshift({\n            id: uuidv4(),\n            activity,\n            createdAt: new Date(),\n          });\n        }\n      });\n    } else {\n      state.columns[columnId].cards.map((card: any) => {\n        if (card.id === cardId) {\n          card.activities.unshift({\n            id: uuidv4(),\n            activity,\n            createdAt: new Date(),\n          });\n        }\n      });\n    }\n    handleSnackbar(activity, 'info');\n    setState({\n      ...state,\n    } as any);\n  };\n\n  const handleSnackbar = (message: string, variant: VariantType) => {\n    enqueueSnackbar(message, { variant });\n  };\n\n  return (\n    <>\n      <Top\n        setView={props.setView}\n        setProjectName={props.setProjectName}\n        projectName={props.projectName}\n      />\n      <div className=\"board\">\n        <DragDropContext onDragEnd={onDragEnd}>\n          <Droppable\n            direction=\"horizontal\"\n            droppableId=\"all-droppables\"\n            type=\"column\"\n          >\n            {(provided: any, snapshot: any) => (\n              <div\n                ref={provided.innerRef}\n                {...provided.droppableProps}\n                style={getItemStyle(\n                  snapshot.isDragging,\n                  provided.droppableProps.style\n                )}\n              >\n                {state.columnOrder.map((columnId: any, index: any) => {\n                  return (\n                    <Column\n                      key={columnId}\n                      column={state.columns[columnId]}\n                      index={index}\n                      reorder={reorder}\n                      addCard={addCard}\n                      setOpen={setOpen}\n                      setCardForOpen={setCardForOpen}\n                      updateSectionTitle={updateSectionTitle}\n                      deleteColumn={deleteColumn}\n                      onDragEnd={onDragEnd}\n                      convertDate={convertDate}\n                    />\n                  );\n                })}\n                {provided.placeholder}\n              </div>\n            )}\n          </Droppable>\n        </DragDropContext>\n        {state.archive.cards.length > 0 && (\n          <Archive\n            archive={state.archive}\n            setCardForOpen={setCardForOpen}\n            convertDate={convertDate}\n            setOpen={setOpen}\n          />\n        )}\n        <AddSection colorIndex={colorIndex} addSection={addSection} />\n      </div>\n      {open && (\n        <CardModal\n          open={true}\n          projectName={props.projectName}\n          currentColumn={currentColumn}\n          handleModalClose={handleModalClose}\n          currentCard={currentCard}\n          addChecklist={addChecklist}\n          updateChecklist={updateChecklist}\n          addActivity={addActivity}\n          updateDate={updateDate}\n          updateCardTitle={updateCardTitle}\n          updateCardNote={updateCardNote}\n          completeChecklist={completeChecklist}\n          deleteChecklist={deleteChecklist}\n          setDueDate={setDueDate}\n          convertDate={convertDate}\n          completeCard={completeCard}\n          deleteCard={deleteCard}\n          archiveCard={archiveCard}\n        />\n      )}\n    </>\n  );\n}\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}