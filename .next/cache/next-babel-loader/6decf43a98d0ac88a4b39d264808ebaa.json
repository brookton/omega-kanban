{"ast":null,"code":"var _jsxFileName = \"/Users/heegupark/Desktop/Workspace/MyProject/omega-kanban/components/board.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport { v4 as uuidv4 } from 'uuid';\nimport Top from './top';\nimport Column from './column';\nimport AddSection from './add-section';\nimport Archive from './archive';\nimport CardModal from './card-modal';\nimport { useSnackbar } from 'notistack';\n\nfunction Board(props) {\n  const {\n    enqueueSnackbar\n  } = useSnackbar(); // const [state, setState] = useState<IColumns>({\n  //   columns: {\n  //     'column-0': {\n  //       id: 'column-0',\n  //       title: 'Plan',\n  //       cards: [\n  //         {\n  //           id: uuidv4(),\n  //           cardTitle: 'Create HTML skeleton',\n  //           note: '',\n  //           isCardCompleted: false,\n  //           isArchived: false,\n  //           checklists: [],\n  //           activities: [],\n  //           dueDate: new Date(2020, 9, 11),\n  //           createdAt: new Date(2020, 8, 11),\n  //           updatedAt: new Date(2020, 8, 11),\n  //         },\n  //       ],\n  //       colorIndex: 0,\n  //       createdAt: new Date(2020, 8, 1),\n  //       updatedAt: new Date(2020, 8, 11),\n  //     },\n  //     'column-1': {\n  //       id: 'column-1',\n  //       title: 'Progress',\n  //       cards: [],\n  //       colorIndex: 1,\n  //       createdAt: new Date(2020, 8, 2),\n  //       updatedAt: new Date(2020, 8, 2),\n  //     },\n  //     'column-2': {\n  //       id: 'column-2',\n  //       title: 'Complete',\n  //       cards: [],\n  //       colorIndex: 2,\n  //       createdAt: new Date(2020, 8, 3),\n  //       updatedAt: new Date(2020, 8, 3),\n  //     },\n  //   },\n  //   columnOrder: ['column-0', 'column-1', 'column-2'],\n  //   archive: {\n  //     id: 'archive',\n  //     title: 'Archive',\n  //     cards: [],\n  //     colorIndex: 0,\n  //     createdAt: new Date(),\n  //     updatedAt: new Date(),\n  //   },\n  // });\n\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    columns: {},\n    columnOrder: [],\n    archive: {\n      id: 'archive',\n      title: 'Archive',\n      cards: [],\n      colorIndex: 0,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    }\n  });\n  const {\n    0: colorIndex,\n    1: setColorIndex\n  } = useState(0);\n  const {\n    0: currentCard,\n    1: setCurrentCard\n  } = useState();\n  const {\n    0: currentColumn,\n    1: setCurrentColumn\n  } = useState();\n  const {\n    0: isLoadingCompleted,\n    1: setIsLoadingCompleted\n  } = useState(false);\n  useEffect(() => {\n    setColorIndex(state.columnOrder.length - 1);\n  }, []);\n  useEffect(() => {\n    getColumns(props._id);\n  }, []);\n\n  const getColumns = _id => {\n    fetch(`/api/get-columns`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        _id\n      })\n    }).then(res => res.json()).then(data => {\n      if (data.success) {\n        console.log(data.data);\n        data.data.map(column => {\n          state.columns[column._id] = column;\n          state.columnOrder.push(column._id);\n          setState(_objectSpread({}, state));\n        });\n        console.log(state);\n        setIsLoadingCompleted(true);\n      } else {}\n    }).catch(err => {\n      console.error(`Something wrong happened while getting a route:${err.message}`);\n    });\n  };\n\n  const addSection = (sectionTitle, card) => {\n    const newSection = {\n      id: uuidv4(),\n      title: sectionTitle,\n      cards: [],\n      colorIndex: colorIndex + 1,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n\n    if (card) {\n      newSection.cards.push(card);\n    }\n\n    handleSnackbar(`'${sectionTitle}' is created`, 'success');\n    setColorIndex(colorIndex + 1);\n    state.columns[newSection.id] = newSection;\n    state.columnOrder.push(newSection.id);\n    setState(_objectSpread({}, state));\n  };\n\n  const addCard = (columnId, cardTitle) => {\n    const newCard = {\n      id: uuidv4(),\n      cardTitle,\n      note: '',\n      isCardCompleted: false,\n      isArchived: false,\n      checklists: [],\n      activities: [],\n      dueDate: undefined,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    addActivity(columnId, newCard.id, `A card with title '${cardTitle}' is created in '${state.columns[columnId].title}'`);\n    updateDate(columnId, '');\n    state.columns[columnId].cards.push(newCard);\n    setState(_objectSpread({}, state));\n  };\n\n  const completeCard = (columnId, cardId) => {\n    let completeCard = {};\n    state.columns[columnId].cards.map((card, index) => {\n      if (card.id === cardId) {\n        card.isCardCompleted = true;\n        completeCard = card;\n        state.columns[columnId].cards.splice(index, 1);\n      }\n    });\n    state.columns[columnId].cards.push(completeCard);\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `Card is completed`);\n    setState(_objectSpread({}, state));\n  };\n\n  const updateSectionTitle = (columnId, sectionTitle) => {\n    state.columns[columnId].title = sectionTitle;\n    state.columns[columnId].updatedAt = new Date();\n    setState(_objectSpread({}, state));\n  };\n\n  const updateCardTitle = (columnId, cardId, cardTitle) => {\n    state.columns[columnId].cards.map(card => {\n      if (card.id === cardId) {\n        card.cardTitle = cardTitle;\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `Card title is changed to ${cardTitle}`);\n    setState(_objectSpread({}, state));\n  };\n\n  const updateCardNote = (columnId, cardId, note) => {\n    state.columns[columnId].cards.map(card => {\n      if (card.id === cardId) {\n        card.note = note;\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `Card note is changed to ||${note}`);\n    setState(_objectSpread({}, state));\n  };\n\n  const deleteColumn = id => {\n    const title = state.columns[id].title;\n    delete state.columns[id];\n    state.columnOrder.splice(state.columnOrder.indexOf(id), 1);\n    handleSnackbar(`'${title}' is deleted`, 'error');\n    setState(_objectSpread({}, state));\n  };\n\n  const deleteCard = (columnId, cardId) => {\n    state.columns[columnId].cards.map((card, index) => {\n      if (card.id === cardId) {\n        state.columns[columnId].cards.splice(index, 1);\n      }\n    });\n    updateDate(columnId, cardId);\n    handleSnackbar('A card is deleted', 'error');\n    setState(_objectSpread({}, state));\n  };\n\n  const archiveCard = (columnId, cardId) => {\n    let tempCard = {};\n    state.columns[columnId].cards.map((card, index) => {\n      if (card.id === cardId) {\n        card.isArchived = true;\n        tempCard = card;\n        state.columns[columnId].cards.splice(index, 1);\n      }\n    });\n    updateDate(columnId, cardId);\n    state.archive.cards.push(tempCard);\n    addActivity('archive', cardId, `Card is archived`);\n    setState(_objectSpread({}, state));\n  };\n\n  const onDragEnd = result => {\n    if (!result.destination) {\n      return;\n    }\n\n    if (result.type === 'column') {\n      const columnOrder = reorderColumn(state.columnOrder, result.source.index, result.destination.index);\n      handleSnackbar(`'${state.columns[state.columnOrder[result.source.index]].title}' and '${state.columns[state.columnOrder[result.destination.index]].title}' are reordered`, 'success');\n      setState(_objectSpread(_objectSpread({}, state), {}, {\n        columnOrder\n      }));\n      return;\n    }\n\n    if (result.source.droppableId === result.destination.droppableId) {\n      const column = state.columns[result.source.droppableId];\n      const cards = reorderCards(column.cards, result.source.index, result.destination.index);\n\n      const newState = _objectSpread(_objectSpread({}, state), {}, {\n        columns: _objectSpread(_objectSpread({}, state.columns), {}, {\n          [column.id]: _objectSpread(_objectSpread({}, column), {}, {\n            cards\n          })\n        })\n      });\n\n      setState(newState);\n      handleSnackbar(`A card is reordered in'${column.title}'`, 'success');\n      return;\n    }\n\n    const sourceColumn = state.columns[result.source.droppableId];\n    const destinationColumn = state.columns[result.destination.droppableId];\n    const card = sourceColumn.cards[result.source.index];\n\n    const newSourceColumn = _objectSpread(_objectSpread({}, sourceColumn), {}, {\n      cards: [...sourceColumn.cards]\n    });\n\n    newSourceColumn.cards.splice(result.source.index, 1);\n\n    const newDestinationColumn = _objectSpread(_objectSpread({}, destinationColumn), {}, {\n      cards: [...destinationColumn.cards]\n    });\n\n    newDestinationColumn.cards.splice(result.destination.index, 0, card);\n\n    const newState = _objectSpread(_objectSpread({}, state), {}, {\n      columns: _objectSpread(_objectSpread({}, state.columns), {}, {\n        [newSourceColumn.id]: newSourceColumn,\n        [newDestinationColumn.id]: newDestinationColumn\n      })\n    });\n\n    handleSnackbar(`A card is moved from '${newSourceColumn.title}' to '${newDestinationColumn.title}'`, 'success');\n    setState(newState);\n  };\n\n  const getItemStyle = (isDragging, draggableStyle) => _objectSpread({\n    display: 'flex',\n    flexDirection: 'row'\n  }, draggableStyle);\n\n  const reorderCards = (list, startIndex, endIndex) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    return result;\n  };\n\n  const reorderColumn = (list, startIndex, endIndex) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    return result;\n  };\n\n  const [open, setOpen] = React.useState(false);\n\n  const setCardForOpen = (columnId, cardId) => {\n    if (columnId === 'archive') {\n      const card = state.archive.cards.filter(card => card.id === cardId);\n      setCurrentCard(card[0]);\n      setCurrentColumn(state.archive);\n    } else {\n      const card = state.columns[columnId].cards.filter(card => card.id === cardId);\n      setCurrentCard(card[0]);\n      setCurrentColumn(state.columns[columnId]);\n    }\n  };\n\n  const handleModalClose = () => {\n    setOpen(false);\n  };\n\n  const addChecklist = (columnId, cardId, checklist) => {\n    state.columns[columnId].cards.map(card => {\n      if (card.id === cardId) {\n        card.checklists.push({\n          id: uuidv4(),\n          checklist,\n          isChecked: false,\n          date: new Date()\n        });\n      }\n    });\n    addActivity(columnId, cardId, `${checklist} is added to the checklist`);\n    updateDate(columnId, cardId);\n    setState(_objectSpread({}, state));\n  };\n\n  const updateDate = (columnId, cardId) => {\n    if (cardId) {\n      state.columns[columnId].cards.map(card => {\n        if (card.id === cardId) {\n          card.updatedAt = new Date();\n        }\n      });\n    }\n\n    state.columns[columnId].updatedAt = new Date();\n    setState(_objectSpread({}, state));\n  };\n\n  const updateChecklist = (columnId, cardId, checklistId, checklistContent) => {\n    state.columns[columnId].cards.map(card => {\n      if (card.id === cardId) {\n        card.checklists.map(checklist => {\n          if (checklist.id === checklistId) {\n            checklist.checklist = checklistContent;\n          }\n        });\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `A checklist is updated to ${checklistContent}`);\n    setState(_objectSpread({}, state));\n  };\n\n  const completeChecklist = (columnId, cardId, checklistId, isChecked) => {\n    state.columns[columnId].cards.map(card => {\n      if (card.id === cardId) {\n        card.checklists.map(checklist => {\n          if (checklist.id === checklistId) {\n            checklist.isChecked = isChecked;\n          }\n        });\n      }\n    });\n    updateDate(columnId, cardId);\n    if (isChecked) addActivity(columnId, cardId, `A checklist is completed`);else addActivity(columnId, cardId, `A checklist is changed to incomplete`);\n    setState(_objectSpread({}, state));\n  };\n\n  const deleteChecklist = (columnId, cardId, checklistId) => {\n    state.columns[columnId].cards.map(card => {\n      if (card.id === cardId) {\n        card.checklists = card.checklists.filter(checklist => checklist.id !== checklistId);\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `A checklist is deleted`);\n    setState(_objectSpread({}, state));\n  };\n\n  const convertDate = date => {\n    const month = date.toString().split(' ')[1];\n    const day = date.toString().split(' ')[2];\n    const year = date.toString().split(' ')[3];\n    return `${month} ${day}, ${year}`;\n  };\n\n  const setDueDate = (columnId, cardId, date) => {\n    state.columns[columnId].cards.map(card => {\n      if (card.id === cardId) {\n        card.dueDate = new Date(date);\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `A due date is set to ${convertDate(date)}`);\n    setState(_objectSpread({}, state));\n  };\n\n  const addActivity = (columnId, cardId, activity) => {\n    if (columnId === 'archive') {\n      state.archive.cards.map(card => {\n        if (card.id === cardId) {\n          card.activities.unshift({\n            id: uuidv4(),\n            activity,\n            createdAt: new Date()\n          });\n        }\n      });\n    } else {\n      state.columns[columnId].cards.map(card => {\n        if (card.id === cardId) {\n          card.activities.unshift({\n            id: uuidv4(),\n            activity,\n            createdAt: new Date()\n          });\n        }\n      });\n    }\n\n    if (activity.toLowerCase().includes('archive')) {\n      handleSnackbar(activity, 'warning');\n    } else {\n      handleSnackbar(activity, 'info');\n    }\n\n    setState(_objectSpread({}, state));\n  };\n\n  const changeProjectName = projectName => {\n    handleSnackbar(`Project name is changed to '${projectName}'`, 'info');\n    props.setProjectName(projectName);\n  };\n\n  const handleSnackbar = (message, variant) => {\n    enqueueSnackbar(message, {\n      variant\n    });\n  };\n\n  return __jsx(React.Fragment, null, isLoadingCompleted && __jsx(React.Fragment, null, __jsx(Top, {\n    _id: props._id,\n    setProjectName: changeProjectName,\n    projectName: props.projectName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 565,\n      columnNumber: 11\n    }\n  }), __jsx(\"div\", {\n    className: \"board\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 570,\n      columnNumber: 11\n    }\n  }, __jsx(DragDropContext, {\n    onDragEnd: onDragEnd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 571,\n      columnNumber: 13\n    }\n  }, __jsx(Droppable, {\n    direction: \"horizontal\",\n    droppableId: \"all-droppables\",\n    type: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 572,\n      columnNumber: 15\n    }\n  }, (provided, snapshot) => __jsx(\"div\", _extends({\n    ref: provided.innerRef\n  }, provided.droppableProps, {\n    style: getItemStyle(snapshot.isDragging, provided.droppableProps.style),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 578,\n      columnNumber: 19\n    }\n  }), state.columnOrder.map((columnId, index) => {\n    return __jsx(Column, {\n      key: columnId,\n      column: state.columns[columnId],\n      index: index,\n      addCard: addCard,\n      setOpen: setOpen,\n      setCardForOpen: setCardForOpen,\n      updateSectionTitle: updateSectionTitle,\n      deleteColumn: deleteColumn // onDragEnd={onDragEnd}\n      ,\n      convertDate: convertDate,\n      open: true,\n      projectName: props.projectName,\n      handleModalClose: handleModalClose,\n      addChecklist: addChecklist,\n      updateChecklist: updateChecklist,\n      addActivity: addActivity,\n      updateDate: updateDate,\n      updateCardTitle: updateCardTitle,\n      updateCardNote: updateCardNote,\n      completeChecklist: completeChecklist,\n      deleteChecklist: deleteChecklist,\n      setDueDate: setDueDate,\n      completeCard: completeCard,\n      deleteCard: deleteCard,\n      archiveCard: archiveCard,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 589,\n        columnNumber: 27\n      }\n    });\n  }), provided.placeholder))), state.archive.cards.length > 0 && __jsx(Archive, {\n    index: 0 // onDragEnd={onDragEnd}\n    ,\n    column: state.archive,\n    setCardForOpen: setCardForOpen,\n    convertDate: convertDate,\n    setOpen: setOpen,\n    open: true,\n    projectName: props.projectName,\n    handleModalClose: handleModalClose,\n    updateSectionTitle: updateSectionTitle,\n    deleteColumn: deleteColumn,\n    addChecklist: addChecklist,\n    updateChecklist: updateChecklist,\n    addActivity: addActivity,\n    updateDate: updateDate,\n    updateCardTitle: updateCardTitle,\n    updateCardNote: updateCardNote,\n    completeChecklist: completeChecklist,\n    deleteChecklist: deleteChecklist,\n    setDueDate: setDueDate,\n    completeCard: completeCard,\n    deleteCard: deleteCard,\n    archiveCard: archiveCard,\n    addCard: addCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 625,\n      columnNumber: 15\n    }\n  }), __jsx(AddSection, {\n    colorIndex: colorIndex,\n    addSection: addSection,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 652,\n      columnNumber: 13\n    }\n  })), open && __jsx(CardModal, {\n    open: true,\n    projectName: props.projectName,\n    currentColumn: currentColumn,\n    handleModalClose: handleModalClose,\n    currentCard: currentCard,\n    addChecklist: addChecklist,\n    updateChecklist: updateChecklist,\n    addActivity: addActivity,\n    updateDate: updateDate,\n    updateCardTitle: updateCardTitle,\n    updateCardNote: updateCardNote,\n    completeChecklist: completeChecklist,\n    deleteChecklist: deleteChecklist,\n    setDueDate: setDueDate,\n    convertDate: convertDate,\n    completeCard: completeCard,\n    deleteCard: deleteCard,\n    archiveCard: archiveCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 655,\n      columnNumber: 13\n    }\n  })));\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/heegupark/Desktop/Workspace/MyProject/omega-kanban/components/board.tsx"],"names":["React","useState","useEffect","DragDropContext","Droppable","v4","uuidv4","Top","Column","AddSection","Archive","CardModal","useSnackbar","Board","props","enqueueSnackbar","state","setState","columns","columnOrder","archive","id","title","cards","colorIndex","createdAt","Date","updatedAt","setColorIndex","currentCard","setCurrentCard","currentColumn","setCurrentColumn","isLoadingCompleted","setIsLoadingCompleted","length","getColumns","_id","fetch","method","headers","body","JSON","stringify","then","res","json","data","success","console","log","map","column","push","catch","err","error","message","addSection","sectionTitle","card","newSection","handleSnackbar","addCard","columnId","cardTitle","newCard","note","isCardCompleted","isArchived","checklists","activities","dueDate","undefined","addActivity","updateDate","completeCard","cardId","index","splice","updateSectionTitle","updateCardTitle","updateCardNote","deleteColumn","indexOf","deleteCard","archiveCard","tempCard","onDragEnd","result","destination","type","reorderColumn","source","droppableId","reorderCards","newState","sourceColumn","destinationColumn","newSourceColumn","newDestinationColumn","getItemStyle","isDragging","draggableStyle","display","flexDirection","list","startIndex","endIndex","Array","from","removed","open","setOpen","setCardForOpen","filter","handleModalClose","addChecklist","checklist","isChecked","date","updateChecklist","checklistId","checklistContent","completeChecklist","deleteChecklist","convertDate","month","toString","split","day","year","setDueDate","activity","unshift","toLowerCase","includes","changeProjectName","projectName","setProjectName","variant","provided","snapshot","innerRef","droppableProps","style","placeholder"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { v4 as uuidv4 } from 'uuid';\nimport Top from './top';\nimport Column from './column';\nimport AddSection from './add-section';\nimport Archive from './archive';\nimport CardModal from './card-modal';\nimport { VariantType, useSnackbar } from 'notistack';\nimport IMainProps from './interfaces/imainprops';\nimport IColumns from './interfaces/icolumns';\nimport ICard from './interfaces/icard';\nimport ISection from './interfaces/isection';\nimport IChecklist from './interfaces/ichecklist';\n\nfunction Board(props: IMainProps) {\n  const { enqueueSnackbar } = useSnackbar();\n  // const [state, setState] = useState<IColumns>({\n  //   columns: {\n  //     'column-0': {\n  //       id: 'column-0',\n  //       title: 'Plan',\n  //       cards: [\n  //         {\n  //           id: uuidv4(),\n  //           cardTitle: 'Create HTML skeleton',\n  //           note: '',\n  //           isCardCompleted: false,\n  //           isArchived: false,\n  //           checklists: [],\n  //           activities: [],\n  //           dueDate: new Date(2020, 9, 11),\n  //           createdAt: new Date(2020, 8, 11),\n  //           updatedAt: new Date(2020, 8, 11),\n  //         },\n  //       ],\n  //       colorIndex: 0,\n  //       createdAt: new Date(2020, 8, 1),\n  //       updatedAt: new Date(2020, 8, 11),\n  //     },\n  //     'column-1': {\n  //       id: 'column-1',\n  //       title: 'Progress',\n  //       cards: [],\n  //       colorIndex: 1,\n  //       createdAt: new Date(2020, 8, 2),\n  //       updatedAt: new Date(2020, 8, 2),\n  //     },\n  //     'column-2': {\n  //       id: 'column-2',\n  //       title: 'Complete',\n  //       cards: [],\n  //       colorIndex: 2,\n  //       createdAt: new Date(2020, 8, 3),\n  //       updatedAt: new Date(2020, 8, 3),\n  //     },\n  //   },\n  //   columnOrder: ['column-0', 'column-1', 'column-2'],\n  //   archive: {\n  //     id: 'archive',\n  //     title: 'Archive',\n  //     cards: [],\n  //     colorIndex: 0,\n  //     createdAt: new Date(),\n  //     updatedAt: new Date(),\n  //   },\n  // });\n\n  const [state, setState] = useState<IColumns>({\n    columns: {},\n    columnOrder: [],\n    archive: {\n      id: 'archive',\n      title: 'Archive',\n      cards: [],\n      colorIndex: 0,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    },\n  });\n\n  const [colorIndex, setColorIndex] = useState(0);\n  const [currentCard, setCurrentCard] = useState<ICard>();\n  const [currentColumn, setCurrentColumn] = useState<ISection>();\n  const [isLoadingCompleted, setIsLoadingCompleted] = useState(false);\n  useEffect(() => {\n    setColorIndex(state.columnOrder.length - 1);\n  }, []);\n\n  useEffect(() => {\n    getColumns(props._id);\n  }, []);\n\n  const getColumns = (_id: String) => {\n    fetch(`/api/get-columns`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        _id,\n      }),\n    })\n      .then((res) => res.json())\n      .then((data: any) => {\n        if (data.success) {\n          console.log(data.data);\n          data.data.map((column: ISection) => {\n            state.columns[column._id] = column;\n            state.columnOrder.push(column._id);\n            setState({\n              ...state,\n            });\n          });\n          console.log(state);\n          setIsLoadingCompleted(true);\n        } else {\n        }\n      })\n      .catch((err) => {\n        console.error(\n          `Something wrong happened while getting a route:${err.message}`\n        );\n      });\n  };\n\n  const addSection = (sectionTitle: string, card: ICard | undefined) => {\n    const newSection: ISection = {\n      id: uuidv4(),\n      title: sectionTitle,\n      cards: [],\n      colorIndex: colorIndex + 1,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    if (card) {\n      newSection.cards.push(card);\n    }\n    handleSnackbar(`'${sectionTitle}' is created`, 'success');\n    setColorIndex(colorIndex + 1);\n    state.columns[newSection.id] = newSection;\n    state.columnOrder.push(newSection.id);\n    setState({\n      ...state,\n    });\n  };\n\n  const addCard = (columnId: string, cardTitle: string) => {\n    const newCard = {\n      id: uuidv4(),\n      cardTitle,\n      note: '',\n      isCardCompleted: false,\n      isArchived: false,\n      checklists: [],\n      activities: [],\n      dueDate: undefined,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    addActivity(\n      columnId,\n      newCard.id,\n      `A card with title '${cardTitle}' is created in '${state.columns[columnId].title}'`\n    );\n    updateDate(columnId, '');\n    state.columns[columnId].cards.push(newCard);\n    setState({\n      ...state,\n    });\n  };\n\n  const completeCard = (columnId: string, cardId: string) => {\n    let completeCard: ICard = {} as ICard;\n    state.columns[columnId].cards.map((card: ICard, index: number) => {\n      if (card.id === cardId) {\n        card.isCardCompleted = true;\n        completeCard = card;\n        state.columns[columnId].cards.splice(index, 1);\n      }\n    });\n    state.columns[columnId].cards.push(completeCard);\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `Card is completed`);\n    setState({\n      ...state,\n    });\n  };\n  const updateSectionTitle = (columnId: string, sectionTitle: string) => {\n    state.columns[columnId].title = sectionTitle;\n    state.columns[columnId].updatedAt = new Date();\n    setState({\n      ...state,\n    });\n  };\n\n  const updateCardTitle = (\n    columnId: string,\n    cardId: string,\n    cardTitle: string\n  ) => {\n    state.columns[columnId].cards.map((card: ICard) => {\n      if (card.id === cardId) {\n        card.cardTitle = cardTitle;\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `Card title is changed to ${cardTitle}`);\n    setState({\n      ...state,\n    });\n  };\n\n  const updateCardNote = (columnId: string, cardId: string, note: string) => {\n    state.columns[columnId].cards.map((card: ICard) => {\n      if (card.id === cardId) {\n        card.note = note;\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `Card note is changed to ||${note}`);\n    setState({\n      ...state,\n    });\n  };\n\n  const deleteColumn = (id: string) => {\n    const title = state.columns[id].title;\n    delete state.columns[id];\n    state.columnOrder.splice(state.columnOrder.indexOf(id), 1);\n    handleSnackbar(`'${title}' is deleted`, 'error');\n    setState({\n      ...state,\n    });\n  };\n\n  const deleteCard = (columnId: string, cardId: string) => {\n    state.columns[columnId].cards.map((card: ICard, index: number) => {\n      if (card.id === cardId) {\n        state.columns[columnId].cards.splice(index, 1);\n      }\n    });\n    updateDate(columnId, cardId);\n    handleSnackbar('A card is deleted', 'error');\n    setState({\n      ...state,\n    });\n  };\n\n  const archiveCard = (columnId: string, cardId: string) => {\n    let tempCard: ICard = {} as ICard;\n    state.columns[columnId].cards.map((card: ICard, index: number) => {\n      if (card.id === cardId) {\n        card.isArchived = true;\n        tempCard = card;\n        state.columns[columnId].cards.splice(index, 1);\n      }\n    });\n    updateDate(columnId, cardId);\n    state.archive.cards.push(tempCard);\n    addActivity('archive', cardId, `Card is archived`);\n    setState({\n      ...state,\n    });\n  };\n\n  const onDragEnd = (result: any) => {\n    if (!result.destination) {\n      return;\n    }\n\n    if (result.type === 'column') {\n      const columnOrder: Array<string> = reorderColumn(\n        state.columnOrder,\n        result.source.index,\n        result.destination.index\n      );\n      handleSnackbar(\n        `'${\n          state.columns[state.columnOrder[result.source.index]].title\n        }' and '${\n          state.columns[state.columnOrder[result.destination.index]].title\n        }' are reordered`,\n        'success'\n      );\n      setState({\n        ...state,\n        columnOrder,\n      });\n      return;\n    }\n\n    if (result.source.droppableId === result.destination.droppableId) {\n      const column = state.columns[result.source.droppableId];\n      const cards = reorderCards(\n        column.cards,\n        result.source.index,\n        result.destination.index\n      );\n\n      const newState = {\n        ...state,\n        columns: {\n          ...state.columns,\n          [column.id]: {\n            ...column,\n            cards,\n          },\n        },\n      };\n      setState(newState);\n      handleSnackbar(`A card is reordered in'${column.title}'`, 'success');\n      return;\n    }\n\n    const sourceColumn = state.columns[result.source.droppableId];\n    const destinationColumn = state.columns[result.destination.droppableId];\n    const card = sourceColumn.cards[result.source.index];\n\n    const newSourceColumn = {\n      ...sourceColumn,\n      cards: [...sourceColumn.cards],\n    };\n    newSourceColumn.cards.splice(result.source.index, 1);\n\n    const newDestinationColumn = {\n      ...destinationColumn,\n      cards: [...destinationColumn.cards],\n    };\n    newDestinationColumn.cards.splice(result.destination.index, 0, card);\n\n    const newState = {\n      ...state,\n      columns: {\n        ...state.columns,\n        [newSourceColumn.id]: newSourceColumn,\n        [newDestinationColumn.id]: newDestinationColumn,\n      },\n    };\n    handleSnackbar(\n      `A card is moved from '${newSourceColumn.title}' to '${newDestinationColumn.title}'`,\n      'success'\n    );\n    setState(newState);\n  };\n\n  const getItemStyle = (isDragging: boolean, draggableStyle: any) => ({\n    display: 'flex',\n    flexDirection: 'row',\n    ...draggableStyle,\n  });\n\n  const reorderCards = (\n    list: Array<ICard>,\n    startIndex: number,\n    endIndex: number\n  ) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    return result;\n  };\n\n  const reorderColumn = (\n    list: Array<string>,\n    startIndex: number,\n    endIndex: number\n  ) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    return result;\n  };\n\n  const [open, setOpen] = React.useState(false);\n  const setCardForOpen = (columnId: string, cardId: string) => {\n    if (columnId === 'archive') {\n      const card = state.archive.cards.filter(\n        (card: ICard) => card.id === cardId\n      );\n      setCurrentCard(card[0]);\n      setCurrentColumn(state.archive);\n    } else {\n      const card = state.columns[columnId].cards.filter(\n        (card: ICard) => card.id === cardId\n      );\n      setCurrentCard(card[0]);\n      setCurrentColumn(state.columns[columnId]);\n    }\n  };\n\n  const handleModalClose = () => {\n    setOpen(false);\n  };\n\n  const addChecklist = (\n    columnId: string,\n    cardId: string,\n    checklist: string\n  ) => {\n    state.columns[columnId].cards.map((card: ICard) => {\n      if (card.id === cardId) {\n        card.checklists.push({\n          id: uuidv4(),\n          checklist,\n          isChecked: false,\n          date: new Date(),\n        });\n      }\n    });\n    addActivity(columnId, cardId, `${checklist} is added to the checklist`);\n    updateDate(columnId, cardId);\n    setState({\n      ...state,\n    });\n  };\n\n  const updateDate = (columnId: string, cardId: string) => {\n    if (cardId) {\n      state.columns[columnId].cards.map((card: ICard) => {\n        if (card.id === cardId) {\n          card.updatedAt = new Date();\n        }\n      });\n    }\n    state.columns[columnId].updatedAt = new Date();\n    setState({\n      ...state,\n    });\n  };\n\n  const updateChecklist = (\n    columnId: string,\n    cardId: string,\n    checklistId: string,\n    checklistContent: string\n  ) => {\n    state.columns[columnId].cards.map((card: ICard) => {\n      if (card.id === cardId) {\n        card.checklists.map((checklist: IChecklist) => {\n          if (checklist.id === checklistId) {\n            checklist.checklist = checklistContent;\n          }\n        });\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(\n      columnId,\n      cardId,\n      `A checklist is updated to ${checklistContent}`\n    );\n    setState({\n      ...state,\n    });\n  };\n\n  const completeChecklist = (\n    columnId: string,\n    cardId: string,\n    checklistId: string,\n    isChecked: boolean\n  ) => {\n    state.columns[columnId].cards.map((card: ICard) => {\n      if (card.id === cardId) {\n        card.checklists.map((checklist: IChecklist) => {\n          if (checklist.id === checklistId) {\n            checklist.isChecked = isChecked;\n          }\n        });\n      }\n    });\n    updateDate(columnId, cardId);\n    if (isChecked) addActivity(columnId, cardId, `A checklist is completed`);\n    else addActivity(columnId, cardId, `A checklist is changed to incomplete`);\n    setState({\n      ...state,\n    });\n  };\n\n  const deleteChecklist = (\n    columnId: string,\n    cardId: string,\n    checklistId: string\n  ) => {\n    state.columns[columnId].cards.map((card: ICard) => {\n      if (card.id === cardId) {\n        card.checklists = card.checklists.filter(\n          (checklist: IChecklist) => checklist.id !== checklistId\n        );\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `A checklist is deleted`);\n    setState({\n      ...state,\n    });\n  };\n\n  const convertDate = (date: Date) => {\n    const month = date.toString().split(' ')[1];\n    const day = date.toString().split(' ')[2];\n    const year = date.toString().split(' ')[3];\n    return `${month} ${day}, ${year}`;\n  };\n\n  const setDueDate = (columnId: string, cardId: string, date: Date) => {\n    state.columns[columnId].cards.map((card: ICard) => {\n      if (card.id === cardId) {\n        card.dueDate = new Date(date);\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `A due date is set to ${convertDate(date)}`);\n    setState({\n      ...state,\n    });\n  };\n\n  const addActivity = (columnId: string, cardId: string, activity: string) => {\n    if (columnId === 'archive') {\n      state.archive.cards.map((card: ICard) => {\n        if (card.id === cardId) {\n          card.activities.unshift({\n            id: uuidv4(),\n            activity,\n            createdAt: new Date(),\n          });\n        }\n      });\n    } else {\n      state.columns[columnId].cards.map((card: ICard) => {\n        if (card.id === cardId) {\n          card.activities.unshift({\n            id: uuidv4(),\n            activity,\n            createdAt: new Date(),\n          });\n        }\n      });\n    }\n    if (activity.toLowerCase().includes('archive')) {\n      handleSnackbar(activity, 'warning');\n    } else {\n      handleSnackbar(activity, 'info');\n    }\n    setState({\n      ...state,\n    });\n  };\n\n  const changeProjectName = (projectName: string) => {\n    handleSnackbar(`Project name is changed to '${projectName}'`, 'info');\n    props.setProjectName(projectName);\n  };\n\n  const handleSnackbar = (message: string, variant: VariantType) => {\n    enqueueSnackbar(message, { variant });\n  };\n\n  return (\n    <>\n      {isLoadingCompleted && (\n        <>\n          <Top\n            _id={props._id}\n            setProjectName={changeProjectName}\n            projectName={props.projectName}\n          />\n          <div className=\"board\">\n            <DragDropContext onDragEnd={onDragEnd}>\n              <Droppable\n                direction=\"horizontal\"\n                droppableId=\"all-droppables\"\n                type=\"column\"\n              >\n                {(provided: any, snapshot: any) => (\n                  <div\n                    ref={provided.innerRef}\n                    {...provided.droppableProps}\n                    style={getItemStyle(\n                      snapshot.isDragging,\n                      provided.droppableProps.style\n                    )}\n                  >\n                    {state.columnOrder.map(\n                      (columnId: string, index: number) => {\n                        return (\n                          <Column\n                            key={columnId}\n                            column={state.columns[columnId]}\n                            index={index}\n                            addCard={addCard}\n                            setOpen={setOpen}\n                            setCardForOpen={setCardForOpen}\n                            updateSectionTitle={updateSectionTitle}\n                            deleteColumn={deleteColumn}\n                            // onDragEnd={onDragEnd}\n                            convertDate={convertDate}\n                            open={true}\n                            projectName={props.projectName}\n                            handleModalClose={handleModalClose}\n                            addChecklist={addChecklist}\n                            updateChecklist={updateChecklist}\n                            addActivity={addActivity}\n                            updateDate={updateDate}\n                            updateCardTitle={updateCardTitle}\n                            updateCardNote={updateCardNote}\n                            completeChecklist={completeChecklist}\n                            deleteChecklist={deleteChecklist}\n                            setDueDate={setDueDate}\n                            completeCard={completeCard}\n                            deleteCard={deleteCard}\n                            archiveCard={archiveCard}\n                          />\n                        );\n                      }\n                    )}\n                    {provided.placeholder}\n                  </div>\n                )}\n              </Droppable>\n            </DragDropContext>\n            {state.archive.cards.length > 0 && (\n              <Archive\n                index={0}\n                // onDragEnd={onDragEnd}\n                column={state.archive}\n                setCardForOpen={setCardForOpen}\n                convertDate={convertDate}\n                setOpen={setOpen}\n                open={true}\n                projectName={props.projectName}\n                handleModalClose={handleModalClose}\n                updateSectionTitle={updateSectionTitle}\n                deleteColumn={deleteColumn}\n                addChecklist={addChecklist}\n                updateChecklist={updateChecklist}\n                addActivity={addActivity}\n                updateDate={updateDate}\n                updateCardTitle={updateCardTitle}\n                updateCardNote={updateCardNote}\n                completeChecklist={completeChecklist}\n                deleteChecklist={deleteChecklist}\n                setDueDate={setDueDate}\n                completeCard={completeCard}\n                deleteCard={deleteCard}\n                archiveCard={archiveCard}\n                addCard={addCard}\n              />\n            )}\n            <AddSection colorIndex={colorIndex} addSection={addSection} />\n          </div>\n          {open && (\n            <CardModal\n              open={true}\n              projectName={props.projectName}\n              currentColumn={currentColumn}\n              handleModalClose={handleModalClose}\n              currentCard={currentCard}\n              addChecklist={addChecklist}\n              updateChecklist={updateChecklist}\n              addActivity={addActivity}\n              updateDate={updateDate}\n              updateCardTitle={updateCardTitle}\n              updateCardNote={updateCardNote}\n              completeChecklist={completeChecklist}\n              deleteChecklist={deleteChecklist}\n              setDueDate={setDueDate}\n              convertDate={convertDate}\n              completeCard={completeCard}\n              deleteCard={deleteCard}\n              archiveCard={archiveCard}\n            />\n          )}\n        </>\n      )}\n    </>\n  );\n}\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}