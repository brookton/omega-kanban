{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"/Users/heegupark/Desktop/Workspace/MyProject/omega-kanban/components/board.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport Top from './top';\nimport CardBox from './card-box';\nimport AddSection from './add-section';\n\nfunction Board(props) {\n  _s();\n\n  var _this = this;\n\n  var _useState = useState([{\n    title: 'progress'\n  }]),\n      cardBoxes = _useState[0],\n      setCardBoxes = _useState[1];\n\n  var onBeforeCapture = function onBeforeCapture() {\n    /*...*/\n  };\n\n  var onBeforeDragStart = function onBeforeDragStart() {\n    /*...*/\n  };\n\n  var onDragStart = function onDragStart() {\n    /*...*/\n  };\n\n  var onDragUpdate = function onDragUpdate() {\n    /*...*/\n  };\n\n  var onDragEnd = function onDragEnd(result) {\n    var _objectSpread3;\n\n    var destination = result.destination,\n        source = result.source,\n        draggableId = result.draggableId,\n        type = result.type;\n    if (!destination) return;\n    if (destination.droppableId === source.droppableId && destination.index === source.index) return;\n\n    if (type === 'column') {\n      var newCardBoxes = Array.from(cardBoxes);\n      newCardBoxes.splice(source.index, 1);\n      newCardBoxes.splice(destination.index, 0, draggableId);\n      setCardBoxes(newCardBoxes);\n      return;\n    }\n\n    var start = _this.state.columns[source.droppableId];\n    var finish = _this.state.columns[destination.droppableId]; // Moving tasks within the same column\n\n    if (start === finish) {\n      var newTaskIds = Array.from(start.taskIds);\n      newTaskIds.splice(source.index, 1);\n      newTaskIds.splice(destination.index, 0, draggableId);\n\n      var newColumn = _objectSpread(_objectSpread({}, start), {}, {\n        taskIds: newTaskIds\n      });\n\n      var _newState = _objectSpread(_objectSpread({}, _this.state), {}, {\n        columns: _objectSpread(_objectSpread({}, _this.state.columns), {}, _defineProperty({}, newColumn.id, newColumn)),\n        confetti: false\n      });\n\n      _this.setState(_newState, function () {\n        return localStorage.setItem('state', JSON.stringify(_this.state));\n      });\n\n      return;\n    } // Moving tasks between columns\n\n\n    var startTaskIds = Array.from(start.taskIds);\n    startTaskIds.splice(source.index, 1);\n\n    var newStart = _objectSpread(_objectSpread({}, start), {}, {\n      taskIds: startTaskIds\n    });\n\n    var finishTaskIds = Array.from(finish.taskIds);\n    finishTaskIds.splice(destination.index, 0, draggableId);\n\n    var newFinish = _objectSpread(_objectSpread({}, finish), {}, {\n      taskIds: finishTaskIds\n    });\n\n    var newState = _objectSpread(_objectSpread({}, _this.state), {}, {\n      columns: _objectSpread(_objectSpread({}, _this.state.columns), {}, (_objectSpread3 = {}, _defineProperty(_objectSpread3, newStart.id, newStart), _defineProperty(_objectSpread3, newFinish.id, newFinish), _objectSpread3)),\n      confetti: false\n    });\n\n    _this.setState(newState, function () {\n      localStorage.setItem('state', JSON.stringify(_this.state));\n\n      if (destination.droppableId === 'column-3') {\n        _this.checkCompleted();\n      }\n    });\n  };\n\n  var getItemStyle = function getItemStyle(isDragging, draggableStyle) {\n    return _objectSpread({\n      display: 'flex',\n      flexDirection: 'row'\n    }, draggableStyle);\n  };\n\n  var createCardBox = function createCardBox(cardBox) {\n    setCardBoxes([].concat(_toConsumableArray(cardBoxes), [cardBox]));\n  };\n\n  var reorder = function reorder(list, startIndex, endIndex) {\n    var result = Array.from(list);\n\n    var _result$splice = result.splice(startIndex, 1),\n        _result$splice2 = _slicedToArray(_result$splice, 1),\n        removed = _result$splice2[0];\n\n    result.splice(endIndex, 0, removed);\n    return result;\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Top, {\n    projectName: props.projectName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    className: \"board\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }\n  }, __jsx(DragDropContext, {\n    onBeforeCapture: onBeforeCapture,\n    onBeforeDragStart: onBeforeDragStart,\n    onDragStart: onDragStart,\n    onDragUpdate: onDragUpdate,\n    onDragEnd: onDragEnd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }, __jsx(Droppable, {\n    direction: \"horizontal\",\n    droppableId: \"droppable-1\",\n    type: \"COLUMN\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 11\n    }\n  }, function (provided, snapshot) {\n    return __jsx(\"div\", _extends({\n      ref: provided.innerRef\n    }, provided.droppableProps, {\n      style: getItemStyle(snapshot.isDragging, provided.droppableProps.style),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 15\n      }\n    }), cardBoxes.map(function (cardBox, index) {\n      return __jsx(Draggable, {\n        key: index,\n        draggableId: index.toString(),\n        index: index,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 21\n        }\n      }, function (provided, snapshot) {\n        return __jsx(React.Fragment, null, __jsx(CardBox, {\n          reorder: reorder,\n          cardBoxTitle: cardBox.title,\n          innerRef: provided.innerRef,\n          draggableProps: provided.draggableProps,\n          dragHandleProps: provided.dragHandleProps,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 27\n          }\n        }), provided.placeholder);\n      });\n    }), provided.placeholder);\n  })), __jsx(AddSection, {\n    createCardBox: createCardBox,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }\n  })));\n}\n\n_s(Board, \"mkS7lwBgNgWnwsk5ViWUqBgQGvo=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/heegupark/Desktop/Workspace/MyProject/omega-kanban/components/board.tsx"],"names":["React","useState","DragDropContext","Droppable","Draggable","Top","CardBox","AddSection","Board","props","title","cardBoxes","setCardBoxes","onBeforeCapture","onBeforeDragStart","onDragStart","onDragUpdate","onDragEnd","result","destination","source","draggableId","type","droppableId","index","newCardBoxes","Array","from","splice","start","state","columns","finish","newTaskIds","taskIds","newColumn","newState","id","confetti","setState","localStorage","setItem","JSON","stringify","startTaskIds","newStart","finishTaskIds","newFinish","checkCompleted","getItemStyle","isDragging","draggableStyle","display","flexDirection","createCardBox","cardBox","reorder","list","startIndex","endIndex","removed","projectName","provided","snapshot","innerRef","droppableProps","style","map","toString","draggableProps","dragHandleProps","placeholder"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport Top from './top';\nimport CardBox from './card-box';\nimport AddSection from './add-section';\n\nfunction Board(props: any) {\n  const [cardBoxes, setCardBoxes] = useState([{ title: 'progress' }]);\n  const onBeforeCapture = () => {\n    /*...*/\n  };\n\n  const onBeforeDragStart = () => {\n    /*...*/\n  };\n\n  const onDragStart = () => {\n    /*...*/\n  };\n  const onDragUpdate = () => {\n    /*...*/\n  };\n  const onDragEnd = (result: any) => {\n    const { destination, source, draggableId, type } = result;\n    if (!destination) return;\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    )\n      return;\n\n    if (type === 'column') {\n      const newCardBoxes = Array.from(cardBoxes);\n      newCardBoxes.splice(source.index, 1);\n      newCardBoxes.splice(destination.index, 0, draggableId);\n      setCardBoxes(newCardBoxes);\n      return;\n    }\n\n    const start = this.state.columns[source.droppableId];\n    const finish = this.state.columns[destination.droppableId];\n\n    // Moving tasks within the same column\n    if (start === finish) {\n      const newTaskIds = Array.from(start.taskIds);\n      newTaskIds.splice(source.index, 1);\n      newTaskIds.splice(destination.index, 0, draggableId);\n\n      const newColumn = {\n        ...start,\n        taskIds: newTaskIds,\n      };\n\n      const newState = {\n        ...this.state,\n        columns: {\n          ...this.state.columns,\n          [newColumn.id]: newColumn,\n        },\n        confetti: false,\n      };\n\n      this.setState(newState, () =>\n        localStorage.setItem('state', JSON.stringify(this.state))\n      );\n      return;\n    }\n\n    // Moving tasks between columns\n    const startTaskIds = Array.from(start.taskIds);\n    startTaskIds.splice(source.index, 1);\n    const newStart = {\n      ...start,\n      taskIds: startTaskIds,\n    };\n\n    const finishTaskIds = Array.from(finish.taskIds);\n    finishTaskIds.splice(destination.index, 0, draggableId);\n    const newFinish = {\n      ...finish,\n      taskIds: finishTaskIds,\n    };\n\n    const newState = {\n      ...this.state,\n      columns: {\n        ...this.state.columns,\n        [newStart.id]: newStart,\n        [newFinish.id]: newFinish,\n      },\n      confetti: false,\n    };\n    this.setState(newState, () => {\n      localStorage.setItem('state', JSON.stringify(this.state));\n      if (destination.droppableId === 'column-3') {\n        this.checkCompleted();\n      }\n    });\n  };\n\n  const getItemStyle = (isDragging: any, draggableStyle: any) => ({\n    display: 'flex',\n    flexDirection: 'row',\n    ...draggableStyle,\n  });\n\n  const createCardBox = (cardBox: any) => {\n    setCardBoxes([...cardBoxes, cardBox] as any);\n  };\n\n  const reorder = (list: any, startIndex: any, endIndex: any) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    return result;\n  };\n\n  return (\n    <>\n      <Top projectName={props.projectName} />\n      <div className=\"board\">\n        <DragDropContext\n          onBeforeCapture={onBeforeCapture}\n          onBeforeDragStart={onBeforeDragStart}\n          onDragStart={onDragStart}\n          onDragUpdate={onDragUpdate}\n          onDragEnd={onDragEnd}\n        >\n          <Droppable\n            direction=\"horizontal\"\n            droppableId=\"droppable-1\"\n            type=\"COLUMN\"\n          >\n            {(provided: any, snapshot: any) => (\n              <div\n                ref={provided.innerRef}\n                {...provided.droppableProps}\n                style={getItemStyle(\n                  snapshot.isDragging,\n                  provided.droppableProps.style\n                )}\n              >\n                {cardBoxes.map((cardBox: any, index: any) => {\n                  return (\n                    <Draggable\n                      key={index}\n                      draggableId={index.toString()}\n                      index={index}\n                    >\n                      {(provided: any, snapshot: any) => (\n                        <>\n                          <CardBox\n                            reorder={reorder}\n                            cardBoxTitle={cardBox.title}\n                            innerRef={provided.innerRef}\n                            draggableProps={provided.draggableProps}\n                            dragHandleProps={provided.dragHandleProps}\n                          />\n                          {provided.placeholder}\n                        </>\n                      )}\n                    </Draggable>\n                  );\n                })}\n                {provided.placeholder}\n              </div>\n            )}\n          </Droppable>\n        </DragDropContext>\n        <AddSection createCardBox={createCardBox} />\n      </div>\n    </>\n  );\n}\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}