{"ast":null,"code":"require('../../middleware/db/mongoose');\n\nimport Router from '../../middleware/models/router';\nimport Column from '../../middleware/models/column';\nimport Card from '../../middleware/models/card';\nimport mongoose from 'mongoose';\nconst ObjectId = mongoose.Types.ObjectId;\nexport default (async (request, response) => {\n  const {\n    _id\n  } = request.body;\n\n  try {\n    const project = await Router.findOne({\n      _id\n    }); // const columns = await Column.aggregate([\n    //   {\n    //     $match: {\n    //       projectId: ObjectId(_id),\n    //     },\n    //   },\n    //   {\n    //     $match: {\n    //       category: 'normal',\n    //     },\n    //   },\n    //   {\n    //     $lookup: {\n    //       from: 'cards',\n    //       let: { id: '$_id' },\n    //       pipeline: [\n    //         { $match: { $expr: { $eq: ['$columnId', '$$id'] } } },\n    //         { $match: { $expr: { $eq: ['$isArchived', false] } } },\n    //         {\n    //           $lookup: {\n    //             from: 'checklists',\n    //             let: { id: '$_id' },\n    //             pipeline: [\n    //               { $match: { $expr: { $eq: ['$cardId', '$$id'] } } },\n    //               { $sort: { createdAt: 1 } },\n    //             ],\n    //             as: 'checklists',\n    //           },\n    //         },\n    //         {\n    //           $lookup: {\n    //             from: 'activities',\n    //             let: { id: '$_id' },\n    //             pipeline: [\n    //               { $match: { $expr: { $eq: ['$cardId', '$$id'] } } },\n    //               { $sort: { createdAt: -1 } },\n    //             ],\n    //             as: 'activities',\n    //           },\n    //         },\n    //       ],\n    //       as: 'cards',\n    //     },\n    //   },\n    // ]);\n\n    const columns = await Column.aggregate([{\n      $match: {\n        projectId: ObjectId(_id)\n      }\n    }, {\n      $match: {\n        category: 'normal'\n      }\n    }]);\n\n    if (!columns) {\n      return response.status(404).json({\n        success: false,\n        message: 'data not found'\n      });\n    }\n\n    const cards = columns.map(column => {\n      return Card.find({\n        columnId: column._id\n      });\n    });\n    console.log(cards);\n    const archive = await Column.aggregate([{\n      $match: {\n        projectId: ObjectId(_id)\n      }\n    }, {\n      $match: {\n        category: 'archive'\n      }\n    }, {\n      $lookup: {\n        from: 'cards',\n        let: {\n          id: '$_id'\n        },\n        pipeline: [{\n          $match: {\n            $expr: {\n              $eq: ['$columnId', '$$id']\n            }\n          }\n        }, {\n          $match: {\n            $expr: {\n              $eq: ['$isArchived', true]\n            }\n          }\n        }, {\n          $lookup: {\n            from: 'checklists',\n            let: {\n              id: '$_id'\n            },\n            pipeline: [{\n              $match: {\n                $expr: {\n                  $eq: ['$cardId', '$$id']\n                }\n              }\n            }, {\n              $sort: {\n                createdAt: 1\n              }\n            }],\n            as: 'checklists'\n          }\n        }, {\n          $lookup: {\n            from: 'activities',\n            let: {\n              id: '$_id'\n            },\n            pipeline: [{\n              $match: {\n                $expr: {\n                  $eq: ['$cardId', '$$id']\n                }\n              }\n            }, {\n              $sort: {\n                createdAt: -1\n              }\n            }],\n            as: 'activities'\n          }\n        }],\n        as: 'cards'\n      }\n    }]);\n    return response.status(200).json({\n      success: true,\n      columns,\n      columnOrder: project.columnOrder,\n      archive\n    });\n  } catch (e) {\n    return response.status(500).json({\n      success: false,\n      message: 'failed to get a board data'\n    });\n  }\n});","map":{"version":3,"sources":["/Users/heegupark/Desktop/Workspace/MyProject/omega-kanban/pages/api/get-columns.tsx"],"names":["require","Router","Column","Card","mongoose","ObjectId","Types","request","response","_id","body","project","findOne","columns","aggregate","$match","projectId","category","status","json","success","message","cards","map","column","find","columnId","console","log","archive","$lookup","from","let","id","pipeline","$expr","$eq","$sort","createdAt","as","columnOrder","e"],"mappings":"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","sourcesContent":["require('../../middleware/db/mongoose');\nimport { NextApiRequest, NextApiResponse } from 'next';\nimport Router from '../../middleware/models/router';\nimport Column from '../../middleware/models/column';\nimport Card from '../../middleware/models/card';\nimport mongoose from 'mongoose';\nconst ObjectId = mongoose.Types.ObjectId;\n\nexport default async (request: NextApiRequest, response: NextApiResponse) => {\n  const { _id } = request.body;\n  try {\n    const project = await Router.findOne({ _id });\n    // const columns = await Column.aggregate([\n    //   {\n    //     $match: {\n    //       projectId: ObjectId(_id),\n    //     },\n    //   },\n    //   {\n    //     $match: {\n    //       category: 'normal',\n    //     },\n    //   },\n    //   {\n    //     $lookup: {\n    //       from: 'cards',\n    //       let: { id: '$_id' },\n    //       pipeline: [\n    //         { $match: { $expr: { $eq: ['$columnId', '$$id'] } } },\n    //         { $match: { $expr: { $eq: ['$isArchived', false] } } },\n    //         {\n    //           $lookup: {\n    //             from: 'checklists',\n    //             let: { id: '$_id' },\n    //             pipeline: [\n    //               { $match: { $expr: { $eq: ['$cardId', '$$id'] } } },\n    //               { $sort: { createdAt: 1 } },\n    //             ],\n    //             as: 'checklists',\n    //           },\n    //         },\n    //         {\n    //           $lookup: {\n    //             from: 'activities',\n    //             let: { id: '$_id' },\n    //             pipeline: [\n    //               { $match: { $expr: { $eq: ['$cardId', '$$id'] } } },\n    //               { $sort: { createdAt: -1 } },\n    //             ],\n    //             as: 'activities',\n    //           },\n    //         },\n    //       ],\n    //       as: 'cards',\n    //     },\n    //   },\n    // ]);\n    const columns = await Column.aggregate([\n      {\n        $match: {\n          projectId: ObjectId(_id),\n        },\n      },\n      {\n        $match: {\n          category: 'normal',\n        },\n      },\n    ]);\n    if (!columns) {\n      return response.status(404).json({\n        success: false,\n        message: 'data not found',\n      });\n    }\n\n    const cards = columns.map((column) => {\n      return Card.find({ columnId: column._id });\n    });\n    console.log(cards);\n    const archive = await Column.aggregate([\n      {\n        $match: {\n          projectId: ObjectId(_id),\n        },\n      },\n      {\n        $match: {\n          category: 'archive',\n        },\n      },\n      {\n        $lookup: {\n          from: 'cards',\n          let: { id: '$_id' },\n          pipeline: [\n            { $match: { $expr: { $eq: ['$columnId', '$$id'] } } },\n            { $match: { $expr: { $eq: ['$isArchived', true] } } },\n            {\n              $lookup: {\n                from: 'checklists',\n                let: { id: '$_id' },\n                pipeline: [\n                  { $match: { $expr: { $eq: ['$cardId', '$$id'] } } },\n                  { $sort: { createdAt: 1 } },\n                ],\n                as: 'checklists',\n              },\n            },\n            {\n              $lookup: {\n                from: 'activities',\n                let: { id: '$_id' },\n                pipeline: [\n                  { $match: { $expr: { $eq: ['$cardId', '$$id'] } } },\n                  { $sort: { createdAt: -1 } },\n                ],\n                as: 'activities',\n              },\n            },\n          ],\n          as: 'cards',\n        },\n      },\n    ]);\n\n    return response.status(200).json({\n      success: true,\n      columns,\n      columnOrder: project.columnOrder,\n      archive,\n    });\n  } catch (e) {\n    return response\n      .status(500)\n      .json({ success: false, message: 'failed to get a board data' });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}