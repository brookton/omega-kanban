{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"/Users/heegupark/Desktop/Workspace/MyProject/omega-kanban/components/board.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport Top from './top';\nimport CardBox from './card-box';\nimport AddSection from './add-section';\n\nfunction Board(props) {\n  _s();\n\n  var _this = this;\n\n  var _useState = useState([{\n    title: 'progress'\n  }]),\n      cardBoxes = _useState[0],\n      setCardBoxes = _useState[1];\n\n  var _useState2 = useState(''),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var onBeforeCapture = function onBeforeCapture() {\n    /*...*/\n  };\n\n  var onBeforeDragStart = function onBeforeDragStart() {\n    /*...*/\n  };\n\n  var onDragStart = function onDragStart() {\n    /*...*/\n  };\n\n  var onDragUpdate = function onDragUpdate() {\n    /*...*/\n  };\n\n  var onDragEnd = function onDragEnd(result) {\n    var _objectSpread3;\n\n    if (!result.destination) {\n      return;\n    }\n\n    if (result.type === 'column') {\n      var columnOrder = reorder(state.columnOrder, result.source.index, result.destination.index);\n      setState(_objectSpread(_objectSpread({}, state), {}, {\n        columnOrder: columnOrder\n      }));\n      return;\n    }\n\n    if (result.source.droppableId === result.destination.droppableId) {\n      var column = state.columns[result.source.droppableId];\n      var items = reorder(column.items, result.source.index, result.destination.index); // updating column entry\n\n      var _newState = _objectSpread(_objectSpread({}, state), {}, {\n        columns: _objectSpread(_objectSpread({}, state.columns), {}, _defineProperty({}, column.id, _objectSpread(_objectSpread({}, column), {}, {\n          items: items\n        })))\n      });\n\n      setState(_newState);\n      return;\n    }\n\n    var sourceColumn = state.columns[result.source.droppableId];\n    var destinationColumn = state.columns[result.destination.droppableId];\n    var item = sourceColumn.items[result.source.index];\n\n    var newSourceColumn = _objectSpread(_objectSpread({}, sourceColumn), {}, {\n      items: _toConsumableArray(sourceColumn.items)\n    });\n\n    newSourceColumn.items.splice(result.source.index, 1);\n\n    var newDestinationColumn = _objectSpread(_objectSpread({}, destinationColumn), {}, {\n      items: _toConsumableArray(destinationColumn.items)\n    });\n\n    newDestinationColumn.items.splice(result.destination.index, 0, item);\n\n    var newState = _objectSpread(_objectSpread({}, state), {}, {\n      columns: _objectSpread(_objectSpread({}, state.columns), {}, (_objectSpread3 = {}, _defineProperty(_objectSpread3, newSourceColumn.id, newSourceColumn), _defineProperty(_objectSpread3, newDestinationColumn.id, newDestinationColumn), _objectSpread3))\n    });\n\n    setState(newState);\n  };\n\n  var getItemStyle = function getItemStyle(isDragging, draggableStyle) {\n    return _objectSpread({\n      display: 'flex',\n      flexDirection: 'row'\n    }, draggableStyle);\n  };\n\n  var createCardBox = function createCardBox(cardBox) {\n    setCardBoxes([].concat(_toConsumableArray(cardBoxes), [cardBox]));\n  };\n\n  var reorder = function reorder(list, startIndex, endIndex) {\n    var result = Array.from(list);\n\n    var _result$splice = result.splice(startIndex, 1),\n        _result$splice2 = _slicedToArray(_result$splice, 1),\n        removed = _result$splice2[0];\n\n    result.splice(endIndex, 0, removed);\n    return result;\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Top, {\n    projectName: props.projectName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    className: \"board\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }, __jsx(DragDropContext, {\n    onDragEnd: onDragEnd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }, __jsx(Droppable, {\n    direction: \"horizontal\",\n    droppableId: \"all-droppables\",\n    type: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 11\n    }\n  }, function (provided, snapshot) {\n    return __jsx(\"div\", _extends({\n      ref: provided.innerRef\n    }, provided.droppableProps, {\n      style: getItemStyle(snapshot.isDragging, provided.droppableProps.style),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 15\n      }\n    }), cardBoxes.map(function (cardBox, index) {\n      return __jsx(Draggable, {\n        key: index,\n        draggableId: index.toString(),\n        index: index,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 21\n        }\n      }, function (provided, snapshot) {\n        return __jsx(React.Fragment, null, __jsx(CardBox, {\n          reorder: reorder,\n          cardBoxTitle: cardBox.title,\n          innerRef: provided.innerRef,\n          draggableProps: provided.draggableProps,\n          dragHandleProps: provided.dragHandleProps,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 27\n          }\n        }), provided.placeholder);\n      });\n    }), provided.placeholder);\n  })), __jsx(AddSection, {\n    createCardBox: createCardBox,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }\n  })));\n}\n\n_s(Board, \"Pb8HHYt/wZEv7CLzKv/wnBKFLWI=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/heegupark/Desktop/Workspace/MyProject/omega-kanban/components/board.tsx"],"names":["React","useState","DragDropContext","Droppable","Draggable","Top","CardBox","AddSection","Board","props","title","cardBoxes","setCardBoxes","state","setState","onBeforeCapture","onBeforeDragStart","onDragStart","onDragUpdate","onDragEnd","result","destination","type","columnOrder","reorder","source","index","droppableId","column","columns","items","newState","id","sourceColumn","destinationColumn","item","newSourceColumn","splice","newDestinationColumn","getItemStyle","isDragging","draggableStyle","display","flexDirection","createCardBox","cardBox","list","startIndex","endIndex","Array","from","removed","projectName","provided","snapshot","innerRef","droppableProps","style","map","toString","draggableProps","dragHandleProps","placeholder"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport Top from './top';\nimport CardBox from './card-box';\nimport AddSection from './add-section';\n\nfunction Board(props: any) {\n  const [cardBoxes, setCardBoxes] = useState([{ title: 'progress' }]);\n  const [state, setState] = useState('' as any);\n\n  const onBeforeCapture = () => {\n    /*...*/\n  };\n\n  const onBeforeDragStart = () => {\n    /*...*/\n  };\n\n  const onDragStart = () => {\n    /*...*/\n  };\n  const onDragUpdate = () => {\n    /*...*/\n  };\n\n  const onDragEnd = (result: any) => {\n    if (!result.destination) {\n      return;\n    }\n\n    if (result.type === 'column') {\n      const columnOrder = reorder(\n        state.columnOrder,\n        result.source.index,\n        result.destination.index\n      );\n      setState({\n        ...state,\n        columnOrder,\n      });\n      return;\n    }\n\n    if (result.source.droppableId === result.destination.droppableId) {\n      const column = state.columns[result.source.droppableId];\n      const items = reorder(\n        column.items,\n        result.source.index,\n        result.destination.index\n      );\n\n      // updating column entry\n      const newState = {\n        ...state,\n        columns: {\n          ...state.columns,\n          [column.id]: {\n            ...column,\n            items,\n          },\n        },\n      };\n      setState(newState);\n      return;\n    }\n\n    const sourceColumn = state.columns[result.source.droppableId];\n    const destinationColumn = state.columns[result.destination.droppableId];\n    const item = sourceColumn.items[result.source.index];\n\n    const newSourceColumn = {\n      ...sourceColumn,\n      items: [...sourceColumn.items],\n    };\n    newSourceColumn.items.splice(result.source.index, 1);\n\n    const newDestinationColumn = {\n      ...destinationColumn,\n      items: [...destinationColumn.items],\n    };\n    newDestinationColumn.items.splice(result.destination.index, 0, item);\n\n    const newState = {\n      ...state,\n      columns: {\n        ...state.columns,\n        [newSourceColumn.id]: newSourceColumn,\n        [newDestinationColumn.id]: newDestinationColumn,\n      },\n    };\n\n    setState(newState);\n  };\n\n  const getItemStyle = (isDragging: any, draggableStyle: any) => ({\n    display: 'flex',\n    flexDirection: 'row',\n    ...draggableStyle,\n  });\n\n  const createCardBox = (cardBox: any) => {\n    setCardBoxes([...cardBoxes, cardBox] as any);\n  };\n\n  const reorder = (list: any, startIndex: any, endIndex: any) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    return result;\n  };\n\n  return (\n    <>\n      <Top projectName={props.projectName} />\n      <div className=\"board\">\n        <DragDropContext onDragEnd={onDragEnd}>\n          <Droppable\n            direction=\"horizontal\"\n            droppableId=\"all-droppables\"\n            type=\"column\"\n          >\n            {(provided: any, snapshot: any) => (\n              <div\n                ref={provided.innerRef}\n                {...provided.droppableProps}\n                style={getItemStyle(\n                  snapshot.isDragging,\n                  provided.droppableProps.style\n                )}\n              >\n                {cardBoxes.map((cardBox: any, index: any) => {\n                  return (\n                    <Draggable\n                      key={index}\n                      draggableId={index.toString()}\n                      index={index}\n                    >\n                      {(provided: any, snapshot: any) => (\n                        <>\n                          <CardBox\n                            reorder={reorder}\n                            cardBoxTitle={cardBox.title}\n                            innerRef={provided.innerRef}\n                            draggableProps={provided.draggableProps}\n                            dragHandleProps={provided.dragHandleProps}\n                          />\n                          {provided.placeholder}\n                        </>\n                      )}\n                    </Draggable>\n                  );\n                })}\n                {provided.placeholder}\n              </div>\n            )}\n          </Droppable>\n        </DragDropContext>\n        <AddSection createCardBox={createCardBox} />\n      </div>\n    </>\n  );\n}\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}