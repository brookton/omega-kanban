{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"/Users/heegupark/Desktop/Workspace/MyProject/omega-kanban/components/board.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport { v4 as uuidv4 } from 'uuid';\nimport Top from './top';\nimport Column from './column';\nimport AddSection from './add-section';\nimport Archive from './archive';\nimport CardModal from './card-modal';\nimport { useSnackbar } from 'notistack';\n\nfunction Board(props) {\n  _s();\n\n  var _this = this;\n\n  var _useSnackbar = useSnackbar(),\n      enqueueSnackbar = _useSnackbar.enqueueSnackbar;\n\n  var _useState = useState({\n    columns: {\n      'column-0': {\n        id: 'column-0',\n        title: 'Plan',\n        cards: [{\n          id: uuidv4(),\n          cardTitle: 'Create HTML skeleton',\n          note: '',\n          isCardCompleted: false,\n          isArchived: false,\n          checklists: [],\n          activities: [],\n          dueDate: new Date(2020, 9, 11),\n          createdAt: new Date(2020, 8, 11),\n          updatedAt: new Date(2020, 8, 11)\n        }],\n        colorIndex: 0,\n        createdAt: new Date(2020, 8, 1),\n        updatedAt: new Date(2020, 8, 11)\n      },\n      'column-1': {\n        id: 'column-1',\n        title: 'Progress',\n        cards: [],\n        colorIndex: 1,\n        createdAt: new Date(2020, 8, 2),\n        updatedAt: new Date(2020, 8, 2)\n      },\n      'column-2': {\n        id: 'column-2',\n        title: 'Complete',\n        cards: [],\n        colorIndex: 2,\n        createdAt: new Date(2020, 8, 3),\n        updatedAt: new Date(2020, 8, 3)\n      }\n    },\n    columnOrder: ['column-0', 'column-1', 'column-2'],\n    archive: {\n      id: 'archive',\n      title: 'Archive',\n      cards: [],\n      colorIndex: 0,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    }\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  var _useState2 = useState(0),\n      colorIndex = _useState2[0],\n      setColorIndex = _useState2[1];\n\n  var _useState3 = useState(),\n      currentCard = _useState3[0],\n      setCurrentCard = _useState3[1];\n\n  var _useState4 = useState(),\n      currentColumn = _useState4[0],\n      setCurrentColumn = _useState4[1];\n\n  useEffect(function () {\n    setColorIndex(state.columnOrder.length - 1);\n  }, []);\n\n  var addSection = function addSection(sectionTitle, card) {\n    var newSection = {\n      id: uuidv4(),\n      title: sectionTitle,\n      cards: [],\n      colorIndex: colorIndex + 1,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n\n    if (card) {\n      newSection.cards.push(card);\n    }\n\n    handleSnackbar(\"'\".concat(sectionTitle, \"' is created\"), 'success');\n    setColorIndex(colorIndex + 1);\n    state.columns[newSection.id] = newSection;\n    state.columnOrder.push(newSection.id);\n    setState(_objectSpread({}, state));\n  };\n\n  var addCard = function addCard(columnId, cardTitle) {\n    var newCard = {\n      id: uuidv4(),\n      cardTitle: cardTitle,\n      note: '',\n      isCardCompleted: false,\n      isArchived: false,\n      checklists: [],\n      activities: [],\n      dueDate: undefined,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    addActivity(columnId, newCard.id, \"A card with title '\".concat(cardTitle, \"' is created in '\").concat(state.columns[columnId].title, \"'\"));\n    updateDate(columnId, '');\n    state.columns[columnId].cards.push(newCard);\n    setState(_objectSpread({}, state));\n  };\n\n  var completeCard = function completeCard(columnId, cardId) {\n    var completeCard = {};\n    state.columns[columnId].cards.map(function (card, index) {\n      if (card.id === cardId) {\n        card.isCardCompleted = true;\n        completeCard = card;\n        state.columns[columnId].cards.splice(index, 1);\n      }\n    });\n    state.columns[columnId].cards.push(completeCard);\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, \"Card is completed\");\n    setState(_objectSpread({}, state));\n  };\n\n  var updateSectionTitle = function updateSectionTitle(columnId, sectionTitle) {\n    state.columns[columnId].title = sectionTitle;\n    state.columns[columnId].updatedAt = new Date();\n    setState(_objectSpread({}, state));\n  };\n\n  var updateCardTitle = function updateCardTitle(columnId, cardId, cardTitle) {\n    state.columns[columnId].cards.map(function (card) {\n      if (card.id === cardId) {\n        card.cardTitle = cardTitle;\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, \"Card title is changed to \".concat(cardTitle));\n    setState(_objectSpread({}, state));\n  };\n\n  var updateCardNote = function updateCardNote(columnId, cardId, note) {\n    state.columns[columnId].cards.map(function (card) {\n      if (card.id === cardId) {\n        card.note = note;\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, \"Card note is changed to ||\".concat(note));\n    setState(_objectSpread({}, state));\n  };\n\n  var deleteColumn = function deleteColumn(id) {\n    var title = state.columns[id].title;\n    delete state.columns[id];\n    state.columnOrder.splice(state.columnOrder.indexOf(id), 1);\n    handleSnackbar(\"'\".concat(title, \"' is deleted\"), 'error');\n    setState(_objectSpread({}, state));\n  };\n\n  var deleteCard = function deleteCard(columnId, cardId) {\n    state.columns[columnId].cards.map(function (card, index) {\n      if (card.id === cardId) {\n        state.columns[columnId].cards.splice(index, 1);\n      }\n    });\n    updateDate(columnId, cardId);\n    handleSnackbar('A card is deleted', 'error');\n    setState(_objectSpread({}, state));\n  };\n\n  var archiveCard = function archiveCard(columnId, cardId) {\n    var tempCard = {};\n    state.columns[columnId].cards.map(function (card, index) {\n      if (card.id === cardId) {\n        card.isArchived = true;\n        tempCard = card;\n        state.columns[columnId].cards.splice(index, 1);\n      }\n    });\n    updateDate(columnId, cardId);\n    state.archive.cards.push(tempCard);\n    addActivity('archive', cardId, \"Card is archived\");\n    setState(_objectSpread({}, state));\n  };\n\n  var onDragEnd = function onDragEnd(result) {\n    var _objectSpread3;\n\n    if (!result.destination) {\n      return;\n    }\n\n    if (result.type === 'column') {\n      var columnOrder = reorderColumn(state.columnOrder, result.source.index, result.destination.index);\n      handleSnackbar(\"'\".concat(state.columns[state.columnOrder[result.source.index]].title, \"' and '\").concat(state.columns[state.columnOrder[result.destination.index]].title, \"' are reordered\"), 'success');\n      setState(_objectSpread(_objectSpread({}, state), {}, {\n        columnOrder: columnOrder\n      }));\n      return;\n    }\n\n    if (result.source.droppableId === result.destination.droppableId) {\n      var column = state.columns[result.source.droppableId];\n      var cards = reorderCards(column.cards, result.source.index, result.destination.index);\n\n      var _newState = _objectSpread(_objectSpread({}, state), {}, {\n        columns: _objectSpread(_objectSpread({}, state.columns), {}, _defineProperty({}, column.id, _objectSpread(_objectSpread({}, column), {}, {\n          cards: cards\n        })))\n      });\n\n      setState(_newState);\n      handleSnackbar(\"A card is reordered in'\".concat(column.title, \"'\"), 'success');\n      return;\n    }\n\n    var sourceColumn = state.columns[result.source.droppableId];\n    var destinationColumn = state.columns[result.destination.droppableId];\n    var card = sourceColumn.cards[result.source.index];\n\n    var newSourceColumn = _objectSpread(_objectSpread({}, sourceColumn), {}, {\n      cards: _toConsumableArray(sourceColumn.cards)\n    });\n\n    newSourceColumn.cards.splice(result.source.index, 1);\n\n    var newDestinationColumn = _objectSpread(_objectSpread({}, destinationColumn), {}, {\n      cards: _toConsumableArray(destinationColumn.cards)\n    });\n\n    newDestinationColumn.cards.splice(result.destination.index, 0, card);\n\n    var newState = _objectSpread(_objectSpread({}, state), {}, {\n      columns: _objectSpread(_objectSpread({}, state.columns), {}, (_objectSpread3 = {}, _defineProperty(_objectSpread3, newSourceColumn.id, newSourceColumn), _defineProperty(_objectSpread3, newDestinationColumn.id, newDestinationColumn), _objectSpread3))\n    });\n\n    handleSnackbar(\"A card is moved from '\".concat(newSourceColumn.title, \"' to '\").concat(newDestinationColumn.title, \"'\"), 'success');\n    setState(newState);\n  };\n\n  var getItemStyle = function getItemStyle(isDragging, draggableStyle) {\n    return _objectSpread({\n      display: 'flex',\n      flexDirection: 'row'\n    }, draggableStyle);\n  };\n\n  var reorderCards = function reorderCards(list, startIndex, endIndex) {\n    var result = Array.from(list);\n\n    var _result$splice = result.splice(startIndex, 1),\n        _result$splice2 = _slicedToArray(_result$splice, 1),\n        removed = _result$splice2[0];\n\n    result.splice(endIndex, 0, removed);\n    return result;\n  };\n\n  var reorderColumn = function reorderColumn(list, startIndex, endIndex) {\n    var result = Array.from(list);\n\n    var _result$splice3 = result.splice(startIndex, 1),\n        _result$splice4 = _slicedToArray(_result$splice3, 1),\n        removed = _result$splice4[0];\n\n    result.splice(endIndex, 0, removed);\n    return result;\n  };\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      open = _React$useState2[0],\n      setOpen = _React$useState2[1];\n\n  var setCardForOpen = function setCardForOpen(columnId, cardId) {\n    if (columnId === 'archive') {\n      var card = state.archive.cards.filter(function (card) {\n        return card.id === cardId;\n      });\n      setCurrentCard(card[0]);\n      setCurrentColumn(state.archive);\n    } else {\n      var _card = state.columns[columnId].cards.filter(function (card) {\n        return card.id === cardId;\n      });\n\n      setCurrentCard(_card[0]);\n      setCurrentColumn(state.columns[columnId]);\n    }\n  };\n\n  var handleModalClose = function handleModalClose() {\n    setOpen(false);\n  };\n\n  var addChecklist = function addChecklist(columnId, cardId, checklist) {\n    state.columns[columnId].cards.map(function (card) {\n      if (card.id === cardId) {\n        card.checklists.push({\n          id: uuidv4(),\n          checklist: checklist,\n          isChecked: false,\n          date: new Date()\n        });\n      }\n    });\n    addActivity(columnId, cardId, \"\".concat(checklist, \" is added to the checklist\"));\n    updateDate(columnId, cardId);\n    setState(_objectSpread({}, state));\n  };\n\n  var updateDate = function updateDate(columnId, cardId) {\n    if (cardId) {\n      state.columns[columnId].cards.map(function (card) {\n        if (card.id === cardId) {\n          card.updatedAt = new Date();\n        }\n      });\n    }\n\n    state.columns[columnId].updatedAt = new Date();\n    setState(_objectSpread({}, state));\n  };\n\n  var updateChecklist = function updateChecklist(columnId, cardId, checklistId, checklistContent) {\n    state.columns[columnId].cards.map(function (card) {\n      if (card.id === cardId) {\n        card.checklists.map(function (checklist) {\n          if (checklist.id === checklistId) {\n            checklist.checklist = checklistContent;\n          }\n        });\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, \"A checklist is updated to \".concat(checklistContent));\n    setState(_objectSpread({}, state));\n  };\n\n  var completeChecklist = function completeChecklist(columnId, cardId, checklistId, isChecked) {\n    state.columns[columnId].cards.map(function (card) {\n      if (card.id === cardId) {\n        card.checklists.map(function (checklist) {\n          if (checklist.id === checklistId) {\n            checklist.isChecked = isChecked;\n          }\n        });\n      }\n    });\n    updateDate(columnId, cardId);\n    if (isChecked) addActivity(columnId, cardId, \"A checklist is completed\");else addActivity(columnId, cardId, \"A checklist is changed to incomplete\");\n    setState(_objectSpread({}, state));\n  };\n\n  var deleteChecklist = function deleteChecklist(columnId, cardId, checklistId) {\n    state.columns[columnId].cards.map(function (card) {\n      if (card.id === cardId) {\n        card.checklists = card.checklists.filter(function (checklist) {\n          return checklist.id !== checklistId;\n        });\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, \"A checklist is deleted\");\n    setState(_objectSpread({}, state));\n  };\n\n  var convertDate = function convertDate(date) {\n    var month = date.toString().split(' ')[1];\n    var day = date.toString().split(' ')[2];\n    var year = date.toString().split(' ')[3];\n    return \"\".concat(month, \" \").concat(day, \", \").concat(year);\n  };\n\n  var setDueDate = function setDueDate(columnId, cardId, date) {\n    state.columns[columnId].cards.map(function (card) {\n      if (card.id === cardId) {\n        card.dueDate = new Date(date);\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, \"A due date is set to \".concat(convertDate(date)));\n    setState(_objectSpread({}, state));\n  };\n\n  var addActivity = function addActivity(columnId, cardId, activity) {\n    if (columnId === 'archive') {\n      state.archive.cards.map(function (card) {\n        if (card.id === cardId) {\n          card.activities.unshift({\n            id: uuidv4(),\n            activity: activity,\n            createdAt: new Date()\n          });\n        }\n      });\n    } else {\n      state.columns[columnId].cards.map(function (card) {\n        if (card.id === cardId) {\n          card.activities.unshift({\n            id: uuidv4(),\n            activity: activity,\n            createdAt: new Date()\n          });\n        }\n      });\n    }\n\n    if (activity.toLowerCase().includes('archive')) {\n      handleSnackbar(activity, 'warning');\n    } else {\n      handleSnackbar(activity, 'info');\n    }\n\n    setState(_objectSpread({}, state));\n  };\n\n  var changeProjectName = function changeProjectName(projectName) {\n    handleSnackbar(\"Project name is changed to '\".concat(projectName, \"'\"), 'info');\n    props.setProjectName(projectName);\n  };\n\n  var handleSnackbar = function handleSnackbar(message, variant) {\n    enqueueSnackbar(message, {\n      variant: variant\n    });\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Top, {\n    setView: props.setView,\n    setProjectName: changeProjectName,\n    projectName: props.projectName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 514,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    className: \"board\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 519,\n      columnNumber: 7\n    }\n  }, __jsx(DragDropContext, {\n    onDragEnd: onDragEnd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 520,\n      columnNumber: 9\n    }\n  }, __jsx(Droppable, {\n    direction: \"horizontal\",\n    droppableId: \"all-droppables\",\n    type: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 521,\n      columnNumber: 11\n    }\n  }, function (provided, snapshot) {\n    return __jsx(\"div\", _extends({\n      ref: provided.innerRef\n    }, provided.droppableProps, {\n      style: getItemStyle(snapshot.isDragging, provided.droppableProps.style),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 527,\n        columnNumber: 15\n      }\n    }), state.columnOrder.map(function (columnId, index) {\n      return __jsx(Column, {\n        key: columnId,\n        column: state.columns[columnId],\n        index: index,\n        addCard: addCard,\n        setOpen: setOpen,\n        setCardForOpen: setCardForOpen,\n        updateSectionTitle: updateSectionTitle,\n        deleteColumn: deleteColumn // onDragEnd={onDragEnd}\n        ,\n        convertDate: convertDate,\n        open: true,\n        projectName: props.projectName,\n        handleModalClose: handleModalClose,\n        addChecklist: addChecklist,\n        updateChecklist: updateChecklist,\n        addActivity: addActivity,\n        updateDate: updateDate,\n        updateCardTitle: updateCardTitle,\n        updateCardNote: updateCardNote,\n        completeChecklist: completeChecklist,\n        deleteChecklist: deleteChecklist,\n        setDueDate: setDueDate,\n        completeCard: completeCard,\n        deleteCard: deleteCard,\n        archiveCard: archiveCard,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 537,\n          columnNumber: 21\n        }\n      });\n    }), provided.placeholder);\n  })), state.archive.cards.length > 0 && __jsx(Archive, {\n    index: 0 // onDragEnd={onDragEnd}\n    ,\n    column: state.archive,\n    setCardForOpen: setCardForOpen,\n    convertDate: convertDate,\n    setOpen: setOpen,\n    open: true,\n    projectName: props.projectName,\n    handleModalClose: handleModalClose,\n    updateSectionTitle: updateSectionTitle,\n    deleteColumn: deleteColumn,\n    addChecklist: addChecklist,\n    updateChecklist: updateChecklist,\n    addActivity: addActivity,\n    updateDate: updateDate,\n    updateCardTitle: updateCardTitle,\n    updateCardNote: updateCardNote,\n    completeChecklist: completeChecklist,\n    deleteChecklist: deleteChecklist,\n    setDueDate: setDueDate,\n    completeCard: completeCard,\n    deleteCard: deleteCard,\n    archiveCard: archiveCard,\n    addCard: addCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 572,\n      columnNumber: 11\n    }\n  }), __jsx(AddSection, {\n    colorIndex: colorIndex,\n    addSection: addSection,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 599,\n      columnNumber: 9\n    }\n  })), open && __jsx(CardModal, {\n    open: true,\n    projectName: props.projectName,\n    currentColumn: currentColumn,\n    handleModalClose: handleModalClose,\n    currentCard: currentCard,\n    addChecklist: addChecklist,\n    updateChecklist: updateChecklist,\n    addActivity: addActivity,\n    updateDate: updateDate,\n    updateCardTitle: updateCardTitle,\n    updateCardNote: updateCardNote,\n    completeChecklist: completeChecklist,\n    deleteChecklist: deleteChecklist,\n    setDueDate: setDueDate,\n    convertDate: convertDate,\n    completeCard: completeCard,\n    deleteCard: deleteCard,\n    archiveCard: archiveCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 602,\n      columnNumber: 9\n    }\n  }));\n}\n\n_s(Board, \"1a0wYCFk//qiXWEPVwRYWdOLvSA=\", false, function () {\n  return [useSnackbar];\n});\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/heegupark/Desktop/Workspace/MyProject/omega-kanban/components/board.tsx"],"names":["React","useState","useEffect","DragDropContext","Droppable","v4","uuidv4","Top","Column","AddSection","Archive","CardModal","useSnackbar","Board","props","enqueueSnackbar","columns","id","title","cards","cardTitle","note","isCardCompleted","isArchived","checklists","activities","dueDate","Date","createdAt","updatedAt","colorIndex","columnOrder","archive","state","setState","setColorIndex","currentCard","setCurrentCard","currentColumn","setCurrentColumn","length","addSection","sectionTitle","card","newSection","push","handleSnackbar","addCard","columnId","newCard","undefined","addActivity","updateDate","completeCard","cardId","map","index","splice","updateSectionTitle","updateCardTitle","updateCardNote","deleteColumn","indexOf","deleteCard","archiveCard","tempCard","onDragEnd","result","destination","type","reorderColumn","source","droppableId","column","reorderCards","newState","sourceColumn","destinationColumn","newSourceColumn","newDestinationColumn","getItemStyle","isDragging","draggableStyle","display","flexDirection","list","startIndex","endIndex","Array","from","removed","open","setOpen","setCardForOpen","filter","handleModalClose","addChecklist","checklist","isChecked","date","updateChecklist","checklistId","checklistContent","completeChecklist","deleteChecklist","convertDate","month","toString","split","day","year","setDueDate","activity","unshift","toLowerCase","includes","changeProjectName","projectName","setProjectName","message","variant","setView","provided","snapshot","innerRef","droppableProps","style","placeholder"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { v4 as uuidv4 } from 'uuid';\nimport Top from './top';\nimport Column from './column';\nimport AddSection from './add-section';\nimport Archive from './archive';\nimport CardModal from './card-modal';\nimport { VariantType, useSnackbar } from 'notistack';\nimport IMainProps from './interfaces/imainprops';\nimport IColumns from './interfaces/icolumns';\nimport IColumn from './interfaces/icolumn';\nimport ICard from './interfaces/icard';\nimport ISection from './interfaces/isection';\nimport IChecklist from './interfaces/ichecklist';\n\nfunction Board(props: IMainProps) {\n  const { enqueueSnackbar } = useSnackbar();\n  const [state, setState] = useState<IColumns>({\n    columns: {\n      'column-0': {\n        id: 'column-0',\n        title: 'Plan',\n        cards: [\n          {\n            id: uuidv4(),\n            cardTitle: 'Create HTML skeleton',\n            note: '',\n            isCardCompleted: false,\n            isArchived: false,\n            checklists: [],\n            activities: [],\n            dueDate: new Date(2020, 9, 11),\n            createdAt: new Date(2020, 8, 11),\n            updatedAt: new Date(2020, 8, 11),\n          },\n        ],\n        colorIndex: 0,\n        createdAt: new Date(2020, 8, 1),\n        updatedAt: new Date(2020, 8, 11),\n      },\n      'column-1': {\n        id: 'column-1',\n        title: 'Progress',\n        cards: [],\n        colorIndex: 1,\n        createdAt: new Date(2020, 8, 2),\n        updatedAt: new Date(2020, 8, 2),\n      },\n      'column-2': {\n        id: 'column-2',\n        title: 'Complete',\n        cards: [],\n        colorIndex: 2,\n        createdAt: new Date(2020, 8, 3),\n        updatedAt: new Date(2020, 8, 3),\n      },\n    },\n    columnOrder: ['column-0', 'column-1', 'column-2'],\n    archive: {\n      id: 'archive',\n      title: 'Archive',\n      cards: [],\n      colorIndex: 0,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    },\n  });\n\n  const [colorIndex, setColorIndex] = useState(0);\n  const [currentCard, setCurrentCard] = useState<ICard>();\n  const [currentColumn, setCurrentColumn] = useState<ISection>();\n\n  useEffect(() => {\n    setColorIndex(state.columnOrder.length - 1);\n  }, []);\n\n  const addSection = (sectionTitle: string, card: ICard | undefined) => {\n    const newSection: ISection = {\n      id: uuidv4(),\n      title: sectionTitle,\n      cards: [],\n      colorIndex: colorIndex + 1,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    if (card) {\n      newSection.cards.push(card);\n    }\n    handleSnackbar(`'${sectionTitle}' is created`, 'success');\n    setColorIndex(colorIndex + 1);\n    state.columns[newSection.id] = newSection;\n    state.columnOrder.push(newSection.id);\n    setState({\n      ...state,\n    });\n  };\n\n  const addCard = (columnId: string, cardTitle: string) => {\n    const newCard = {\n      id: uuidv4(),\n      cardTitle,\n      note: '',\n      isCardCompleted: false,\n      isArchived: false,\n      checklists: [],\n      activities: [],\n      dueDate: undefined,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    addActivity(\n      columnId,\n      newCard.id,\n      `A card with title '${cardTitle}' is created in '${state.columns[columnId].title}'`\n    );\n    updateDate(columnId, '');\n    state.columns[columnId].cards.push(newCard);\n    setState({\n      ...state,\n    });\n  };\n\n  const completeCard = (columnId: string, cardId: string) => {\n    let completeCard: ICard = {} as ICard;\n    state.columns[columnId].cards.map((card: ICard, index: number) => {\n      if (card.id === cardId) {\n        card.isCardCompleted = true;\n        completeCard = card;\n        state.columns[columnId].cards.splice(index, 1);\n      }\n    });\n    state.columns[columnId].cards.push(completeCard);\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `Card is completed`);\n    setState({\n      ...state,\n    });\n  };\n  const updateSectionTitle = (columnId: string, sectionTitle: string) => {\n    state.columns[columnId].title = sectionTitle;\n    state.columns[columnId].updatedAt = new Date();\n    setState({\n      ...state,\n    });\n  };\n\n  const updateCardTitle = (\n    columnId: string,\n    cardId: string,\n    cardTitle: string\n  ) => {\n    state.columns[columnId].cards.map((card: ICard) => {\n      if (card.id === cardId) {\n        card.cardTitle = cardTitle;\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `Card title is changed to ${cardTitle}`);\n    setState({\n      ...state,\n    });\n  };\n\n  const updateCardNote = (columnId: string, cardId: string, note: string) => {\n    state.columns[columnId].cards.map((card: ICard) => {\n      if (card.id === cardId) {\n        card.note = note;\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `Card note is changed to ||${note}`);\n    setState({\n      ...state,\n    });\n  };\n\n  const deleteColumn = (id: string) => {\n    const title = state.columns[id].title;\n    delete state.columns[id];\n    state.columnOrder.splice(state.columnOrder.indexOf(id), 1);\n    handleSnackbar(`'${title}' is deleted`, 'error');\n    setState({\n      ...state,\n    });\n  };\n\n  const deleteCard = (columnId: string, cardId: string) => {\n    state.columns[columnId].cards.map((card: ICard, index: number) => {\n      if (card.id === cardId) {\n        state.columns[columnId].cards.splice(index, 1);\n      }\n    });\n    updateDate(columnId, cardId);\n    handleSnackbar('A card is deleted', 'error');\n    setState({\n      ...state,\n    });\n  };\n\n  const archiveCard = (columnId: string, cardId: string) => {\n    let tempCard: ICard = {} as ICard;\n    state.columns[columnId].cards.map((card: ICard, index: number) => {\n      if (card.id === cardId) {\n        card.isArchived = true;\n        tempCard = card;\n        state.columns[columnId].cards.splice(index, 1);\n      }\n    });\n    updateDate(columnId, cardId);\n    state.archive.cards.push(tempCard);\n    addActivity('archive', cardId, `Card is archived`);\n    setState({\n      ...state,\n    });\n  };\n\n  const onDragEnd = (result: any) => {\n    if (!result.destination) {\n      return;\n    }\n\n    if (result.type === 'column') {\n      const columnOrder: Array<string> = reorderColumn(\n        state.columnOrder,\n        result.source.index,\n        result.destination.index\n      );\n      handleSnackbar(\n        `'${\n          state.columns[state.columnOrder[result.source.index]].title\n        }' and '${\n          state.columns[state.columnOrder[result.destination.index]].title\n        }' are reordered`,\n        'success'\n      );\n      setState({\n        ...state,\n        columnOrder,\n      });\n      return;\n    }\n\n    if (result.source.droppableId === result.destination.droppableId) {\n      const column = state.columns[result.source.droppableId];\n      const cards = reorderCards(\n        column.cards,\n        result.source.index,\n        result.destination.index\n      );\n\n      const newState = {\n        ...state,\n        columns: {\n          ...state.columns,\n          [column.id]: {\n            ...column,\n            cards,\n          },\n        },\n      };\n      setState(newState);\n      handleSnackbar(`A card is reordered in'${column.title}'`, 'success');\n      return;\n    }\n\n    const sourceColumn = state.columns[result.source.droppableId];\n    const destinationColumn = state.columns[result.destination.droppableId];\n    const card = sourceColumn.cards[result.source.index];\n\n    const newSourceColumn = {\n      ...sourceColumn,\n      cards: [...sourceColumn.cards],\n    };\n    newSourceColumn.cards.splice(result.source.index, 1);\n\n    const newDestinationColumn = {\n      ...destinationColumn,\n      cards: [...destinationColumn.cards],\n    };\n    newDestinationColumn.cards.splice(result.destination.index, 0, card);\n\n    const newState = {\n      ...state,\n      columns: {\n        ...state.columns,\n        [newSourceColumn.id]: newSourceColumn,\n        [newDestinationColumn.id]: newDestinationColumn,\n      },\n    };\n    handleSnackbar(\n      `A card is moved from '${newSourceColumn.title}' to '${newDestinationColumn.title}'`,\n      'success'\n    );\n    setState(newState);\n  };\n\n  const getItemStyle = (isDragging: boolean, draggableStyle: any) => ({\n    display: 'flex',\n    flexDirection: 'row',\n    ...draggableStyle,\n  });\n\n  const reorderCards = (\n    list: Array<ICard>,\n    startIndex: number,\n    endIndex: number\n  ) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    return result;\n  };\n\n  const reorderColumn = (\n    list: Array<string>,\n    startIndex: number,\n    endIndex: number\n  ) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    return result;\n  };\n\n  const [open, setOpen] = React.useState(false);\n  const setCardForOpen = (columnId: string, cardId: string) => {\n    if (columnId === 'archive') {\n      const card = state.archive.cards.filter(\n        (card: ICard) => card.id === cardId\n      );\n      setCurrentCard(card[0]);\n      setCurrentColumn(state.archive);\n    } else {\n      const card = state.columns[columnId].cards.filter(\n        (card: ICard) => card.id === cardId\n      );\n      setCurrentCard(card[0]);\n      setCurrentColumn(state.columns[columnId]);\n    }\n  };\n\n  const handleModalClose = () => {\n    setOpen(false);\n  };\n\n  const addChecklist = (\n    columnId: string,\n    cardId: string,\n    checklist: string\n  ) => {\n    state.columns[columnId].cards.map((card: ICard) => {\n      if (card.id === cardId) {\n        card.checklists.push({\n          id: uuidv4(),\n          checklist,\n          isChecked: false,\n          date: new Date(),\n        });\n      }\n    });\n    addActivity(columnId, cardId, `${checklist} is added to the checklist`);\n    updateDate(columnId, cardId);\n    setState({\n      ...state,\n    });\n  };\n\n  const updateDate = (columnId: string, cardId: string) => {\n    if (cardId) {\n      state.columns[columnId].cards.map((card: ICard) => {\n        if (card.id === cardId) {\n          card.updatedAt = new Date();\n        }\n      });\n    }\n    state.columns[columnId].updatedAt = new Date();\n    setState({\n      ...state,\n    });\n  };\n\n  const updateChecklist = (\n    columnId: string,\n    cardId: string,\n    checklistId: string,\n    checklistContent: string\n  ) => {\n    state.columns[columnId].cards.map((card: ICard) => {\n      if (card.id === cardId) {\n        card.checklists.map((checklist: IChecklist) => {\n          if (checklist.id === checklistId) {\n            checklist.checklist = checklistContent;\n          }\n        });\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(\n      columnId,\n      cardId,\n      `A checklist is updated to ${checklistContent}`\n    );\n    setState({\n      ...state,\n    });\n  };\n\n  const completeChecklist = (\n    columnId: string,\n    cardId: string,\n    checklistId: string,\n    isChecked: boolean\n  ) => {\n    state.columns[columnId].cards.map((card: ICard) => {\n      if (card.id === cardId) {\n        card.checklists.map((checklist: IChecklist) => {\n          if (checklist.id === checklistId) {\n            checklist.isChecked = isChecked;\n          }\n        });\n      }\n    });\n    updateDate(columnId, cardId);\n    if (isChecked) addActivity(columnId, cardId, `A checklist is completed`);\n    else addActivity(columnId, cardId, `A checklist is changed to incomplete`);\n    setState({\n      ...state,\n    });\n  };\n\n  const deleteChecklist = (\n    columnId: string,\n    cardId: string,\n    checklistId: string\n  ) => {\n    state.columns[columnId].cards.map((card: ICard) => {\n      if (card.id === cardId) {\n        card.checklists = card.checklists.filter(\n          (checklist: IChecklist) => checklist.id !== checklistId\n        );\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `A checklist is deleted`);\n    setState({\n      ...state,\n    });\n  };\n\n  const convertDate = (date: Date) => {\n    const month = date.toString().split(' ')[1];\n    const day = date.toString().split(' ')[2];\n    const year = date.toString().split(' ')[3];\n    return `${month} ${day}, ${year}`;\n  };\n\n  const setDueDate = (columnId: string, cardId: string, date: Date) => {\n    state.columns[columnId].cards.map((card: ICard) => {\n      if (card.id === cardId) {\n        card.dueDate = new Date(date);\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `A due date is set to ${convertDate(date)}`);\n    setState({\n      ...state,\n    });\n  };\n\n  const addActivity = (columnId: string, cardId: string, activity: string) => {\n    if (columnId === 'archive') {\n      state.archive.cards.map((card: ICard) => {\n        if (card.id === cardId) {\n          card.activities.unshift({\n            id: uuidv4(),\n            activity,\n            createdAt: new Date(),\n          });\n        }\n      });\n    } else {\n      state.columns[columnId].cards.map((card: ICard) => {\n        if (card.id === cardId) {\n          card.activities.unshift({\n            id: uuidv4(),\n            activity,\n            createdAt: new Date(),\n          });\n        }\n      });\n    }\n    if (activity.toLowerCase().includes('archive')) {\n      handleSnackbar(activity, 'warning');\n    } else {\n      handleSnackbar(activity, 'info');\n    }\n    setState({\n      ...state,\n    });\n  };\n\n  const changeProjectName = (projectName: string) => {\n    handleSnackbar(`Project name is changed to '${projectName}'`, 'info');\n    props.setProjectName(projectName);\n  };\n\n  const handleSnackbar = (message: string, variant: VariantType) => {\n    enqueueSnackbar(message, { variant });\n  };\n\n  return (\n    <>\n      <Top\n        setView={props.setView}\n        setProjectName={changeProjectName}\n        projectName={props.projectName}\n      />\n      <div className=\"board\">\n        <DragDropContext onDragEnd={onDragEnd}>\n          <Droppable\n            direction=\"horizontal\"\n            droppableId=\"all-droppables\"\n            type=\"column\"\n          >\n            {(provided: any, snapshot: any) => (\n              <div\n                ref={provided.innerRef}\n                {...provided.droppableProps}\n                style={getItemStyle(\n                  snapshot.isDragging,\n                  provided.droppableProps.style\n                )}\n              >\n                {state.columnOrder.map((columnId: string, index: number) => {\n                  return (\n                    <Column\n                      key={columnId}\n                      column={state.columns[columnId]}\n                      index={index}\n                      addCard={addCard}\n                      setOpen={setOpen}\n                      setCardForOpen={setCardForOpen}\n                      updateSectionTitle={updateSectionTitle}\n                      deleteColumn={deleteColumn}\n                      // onDragEnd={onDragEnd}\n                      convertDate={convertDate}\n                      open={true}\n                      projectName={props.projectName}\n                      handleModalClose={handleModalClose}\n                      addChecklist={addChecklist}\n                      updateChecklist={updateChecklist}\n                      addActivity={addActivity}\n                      updateDate={updateDate}\n                      updateCardTitle={updateCardTitle}\n                      updateCardNote={updateCardNote}\n                      completeChecklist={completeChecklist}\n                      deleteChecklist={deleteChecklist}\n                      setDueDate={setDueDate}\n                      completeCard={completeCard}\n                      deleteCard={deleteCard}\n                      archiveCard={archiveCard}\n                    />\n                  );\n                })}\n                {provided.placeholder}\n              </div>\n            )}\n          </Droppable>\n        </DragDropContext>\n        {state.archive.cards.length > 0 && (\n          <Archive\n            index={0}\n            // onDragEnd={onDragEnd}\n            column={state.archive}\n            setCardForOpen={setCardForOpen}\n            convertDate={convertDate}\n            setOpen={setOpen}\n            open={true}\n            projectName={props.projectName}\n            handleModalClose={handleModalClose}\n            updateSectionTitle={updateSectionTitle}\n            deleteColumn={deleteColumn}\n            addChecklist={addChecklist}\n            updateChecklist={updateChecklist}\n            addActivity={addActivity}\n            updateDate={updateDate}\n            updateCardTitle={updateCardTitle}\n            updateCardNote={updateCardNote}\n            completeChecklist={completeChecklist}\n            deleteChecklist={deleteChecklist}\n            setDueDate={setDueDate}\n            completeCard={completeCard}\n            deleteCard={deleteCard}\n            archiveCard={archiveCard}\n            addCard={addCard}\n          />\n        )}\n        <AddSection colorIndex={colorIndex} addSection={addSection} />\n      </div>\n      {open && (\n        <CardModal\n          open={true}\n          projectName={props.projectName}\n          currentColumn={currentColumn}\n          handleModalClose={handleModalClose}\n          currentCard={currentCard}\n          addChecklist={addChecklist}\n          updateChecklist={updateChecklist}\n          addActivity={addActivity}\n          updateDate={updateDate}\n          updateCardTitle={updateCardTitle}\n          updateCardNote={updateCardNote}\n          completeChecklist={completeChecklist}\n          deleteChecklist={deleteChecklist}\n          setDueDate={setDueDate}\n          convertDate={convertDate}\n          completeCard={completeCard}\n          deleteCard={deleteCard}\n          archiveCard={archiveCard}\n        />\n      )}\n    </>\n  );\n}\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}