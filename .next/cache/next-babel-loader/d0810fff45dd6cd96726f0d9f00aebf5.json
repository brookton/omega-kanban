{"ast":null,"code":"var _jsxFileName = \"/Users/heegupark/Desktop/Workspace/MyProject/omega-kanban/components/board.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport Top from './top';\nimport AddSection from './add-section';\n\nfunction Board(props) {\n  const {\n    0: cardBoxes,\n    1: setCardBoxes\n  } = useState([{\n    title: 'progress'\n  }]);\n  const {\n    0: state,\n    1: setState\n  } = useState('');\n\n  const onDragEnd = result => {\n    if (!result.destination) {\n      return;\n    }\n\n    if (result.type === 'column') {\n      const columnOrder = reorder(state.columnOrder, result.source.index, result.destination.index);\n      setState(_objectSpread(_objectSpread({}, state), {}, {\n        columnOrder\n      }));\n      return;\n    }\n\n    if (result.source.droppableId === result.destination.droppableId) {\n      const column = state.columns[result.source.droppableId];\n      const items = reorder(column.items, result.source.index, result.destination.index); // updating column entry\n\n      const newState = _objectSpread(_objectSpread({}, state), {}, {\n        columns: _objectSpread(_objectSpread({}, state.columns), {}, {\n          [column.id]: _objectSpread(_objectSpread({}, column), {}, {\n            items\n          })\n        })\n      });\n\n      setState(newState);\n      return;\n    }\n\n    const sourceColumn = state.columns[result.source.droppableId];\n    const destinationColumn = state.columns[result.destination.droppableId];\n    const item = sourceColumn.items[result.source.index];\n\n    const newSourceColumn = _objectSpread(_objectSpread({}, sourceColumn), {}, {\n      items: [...sourceColumn.items]\n    });\n\n    newSourceColumn.items.splice(result.source.index, 1);\n\n    const newDestinationColumn = _objectSpread(_objectSpread({}, destinationColumn), {}, {\n      items: [...destinationColumn.items]\n    });\n\n    newDestinationColumn.items.splice(result.destination.index, 0, item);\n\n    const newState = _objectSpread(_objectSpread({}, state), {}, {\n      columns: _objectSpread(_objectSpread({}, state.columns), {}, {\n        [newSourceColumn.id]: newSourceColumn,\n        [newDestinationColumn.id]: newDestinationColumn\n      })\n    });\n\n    setState(newState);\n  };\n\n  const getItemStyle = (isDragging, draggableStyle) => _objectSpread({\n    display: 'flex',\n    flexDirection: 'row'\n  }, draggableStyle);\n\n  const createCardBox = cardBox => {\n    setCardBoxes([...cardBoxes, cardBox]);\n  };\n\n  const reorder = (list, startIndex, endIndex) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    return result;\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Top, {\n    projectName: props.projectName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    className: \"board\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, __jsx(DragDropContext, {\n    onDragEnd: onDragEnd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, __jsx(Droppable, {\n    direction: \"horizontal\",\n    droppableId: \"all-droppables\",\n    type: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 11\n    }\n  }, (provided, snapshot) => __jsx(\"div\", _extends({\n    ref: provided.innerRef\n  }, provided.droppableProps, {\n    style: getItemStyle(snapshot.isDragging, provided.droppableProps.style),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 15\n    }\n  }), state.columnOrder.map((columnId, index) => {\n    __jsx(Column, {\n      key: columnId,\n      column: state.columns[columnId],\n      index: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 19\n      }\n    });\n  }), provided.placeholder))), __jsx(AddSection, {\n    createCardBox: createCardBox,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/heegupark/Desktop/Workspace/MyProject/omega-kanban/components/board.tsx"],"names":["React","useState","DragDropContext","Droppable","Top","AddSection","Board","props","cardBoxes","setCardBoxes","title","state","setState","onDragEnd","result","destination","type","columnOrder","reorder","source","index","droppableId","column","columns","items","newState","id","sourceColumn","destinationColumn","item","newSourceColumn","splice","newDestinationColumn","getItemStyle","isDragging","draggableStyle","display","flexDirection","createCardBox","cardBox","list","startIndex","endIndex","Array","from","removed","projectName","provided","snapshot","innerRef","droppableProps","style","map","columnId","placeholder"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport Top from './top';\nimport CardBox from './card-box';\nimport AddSection from './add-section';\n\nfunction Board(props: any) {\n  const [cardBoxes, setCardBoxes] = useState([{ title: 'progress' }]);\n  const [state, setState] = useState('' as any);\n\n  const onDragEnd = (result: any) => {\n    if (!result.destination) {\n      return;\n    }\n\n    if (result.type === 'column') {\n      const columnOrder = reorder(\n        state.columnOrder,\n        result.source.index,\n        result.destination.index\n      );\n      setState({\n        ...state,\n        columnOrder,\n      });\n      return;\n    }\n\n    if (result.source.droppableId === result.destination.droppableId) {\n      const column = state.columns[result.source.droppableId];\n      const items = reorder(\n        column.items,\n        result.source.index,\n        result.destination.index\n      );\n\n      // updating column entry\n      const newState = {\n        ...state,\n        columns: {\n          ...state.columns,\n          [column.id]: {\n            ...column,\n            items,\n          },\n        },\n      };\n      setState(newState);\n      return;\n    }\n\n    const sourceColumn = state.columns[result.source.droppableId];\n    const destinationColumn = state.columns[result.destination.droppableId];\n    const item = sourceColumn.items[result.source.index];\n\n    const newSourceColumn = {\n      ...sourceColumn,\n      items: [...sourceColumn.items],\n    };\n    newSourceColumn.items.splice(result.source.index, 1);\n\n    const newDestinationColumn = {\n      ...destinationColumn,\n      items: [...destinationColumn.items],\n    };\n    newDestinationColumn.items.splice(result.destination.index, 0, item);\n\n    const newState = {\n      ...state,\n      columns: {\n        ...state.columns,\n        [newSourceColumn.id]: newSourceColumn,\n        [newDestinationColumn.id]: newDestinationColumn,\n      },\n    };\n\n    setState(newState);\n  };\n\n  const getItemStyle = (isDragging: any, draggableStyle: any) => ({\n    display: 'flex',\n    flexDirection: 'row',\n    ...draggableStyle,\n  });\n\n  const createCardBox = (cardBox: any) => {\n    setCardBoxes([...cardBoxes, cardBox] as any);\n  };\n\n  const reorder = (list: any, startIndex: any, endIndex: any) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    return result;\n  };\n\n  return (\n    <>\n      <Top projectName={props.projectName} />\n      <div className=\"board\">\n        <DragDropContext onDragEnd={onDragEnd}>\n          <Droppable\n            direction=\"horizontal\"\n            droppableId=\"all-droppables\"\n            type=\"column\"\n          >\n            {(provided: any, snapshot: any) => (\n              <div\n                ref={provided.innerRef}\n                {...provided.droppableProps}\n                style={getItemStyle(\n                  snapshot.isDragging,\n                  provided.droppableProps.style\n                )}\n              >\n                {state.columnOrder.map((columnId: any, index: any) => {\n                  <Column\n                    key={columnId}\n                    column={state.columns[columnId]}\n                    index={index}\n                  />;\n                })}\n                {provided.placeholder}\n              </div>\n            )}\n          </Droppable>\n        </DragDropContext>\n        <AddSection createCardBox={createCardBox} />\n      </div>\n    </>\n  );\n}\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}