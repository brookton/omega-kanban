{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState } from 'react';\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\nimport Card from './card';\nimport Zoom from '@material-ui/core/Zoom';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nfunction CardBody(props) {\n  // const [cards, setCards] = useState([]);\n  const {\n    0: isAdding,\n    1: setIsAdding\n  } = useState(false);\n  const {\n    0: isDragging,\n    1: setIsDragging\n  } = useState(false);\n  const {\n    0: cardTitle,\n    1: setCardTitle\n  } = useState('');\n\n  const handleAddCard = () => {\n    setIsAdding(true);\n  };\n\n  const handleAddCardBlur = () => {\n    if (cardTitle.length < 1) setIsAdding(false);\n  };\n\n  const handleKeyDownForAddCard = event => {\n    if (event.key === 'Enter') {\n      handleCardTitleSubmit();\n    }\n  };\n\n  const handleCardTitleSubmit = () => {\n    if (cardTitle.length > 0) {\n      props.addCard(props.column.id, cardTitle);\n      setCardTitle('');\n    }\n\n    setIsAdding(false);\n  };\n\n  return __jsx(React.Fragment, null, props.column.id === 'archive' ? __jsx(\"div\", null, props.column.cards.map((card, index) => {\n    return __jsx(\"div\", {\n      key: card.id\n    }, __jsx(Card, {\n      card: card,\n      setOpen: props.setOpen,\n      column: props.column,\n      setCardForOpen: props.setCardForOpen,\n      convertDate: props.convertDate\n    }));\n  })) : __jsx(Droppable, {\n    droppableId: props.column.id\n  }, (provided, snapshot) => __jsx(\"div\", _extends({\n    ref: provided.innerRef\n  }, provided.droppableProps), props.column.cards.map((card, index) => {\n    return __jsx(Draggable, {\n      key: card.id,\n      draggableId: card.id,\n      index: index\n    }, (provided, snapshot) => __jsx(Card, {\n      card: card,\n      setOpen: props.setOpen,\n      column: props.column,\n      provided: provided,\n      isDragging: snapshot.isDragging,\n      setCardForOpen: props.setCardForOpen,\n      convertDate: props.convertDate\n    }));\n  }), isDragging ? '' : isAdding ? __jsx(Zoom, {\n    in: isAdding\n  }, __jsx(\"div\", {\n    className: \"h-top mt-5px flex-center mb-25px\"\n  }, __jsx(\"input\", {\n    className: \"box-shadow-1 w-100per add-card-title\",\n    value: cardTitle,\n    autoFocus: true,\n    onBlur: () => handleAddCardBlur(),\n    onKeyDown: event => handleKeyDownForAddCard(event),\n    onChange: e => setCardTitle(e.target.value)\n  }))) : __jsx(\"div\", {\n    className: \"h-top flex-center mb-25px\"\n  }, __jsx(Tooltip, {\n    title: \"Click to add a card\",\n    arrow: true\n  }, __jsx(\"i\", {\n    onClick: () => handleAddCard(),\n    className: \"add-card-icon box-shadow-1 fas fa-plus cursor-pointer\"\n  }))), !isAdding && props.column.cards.length === 0 && __jsx(\"div\", {\n    className: \"no-task flex-center flex-column\"\n  }, __jsx(\"div\", null, __jsx(\"i\", {\n    className: \"no-task-check text-grey far fa-check-circle\"\n  })), __jsx(\"div\", {\n    className: \"no-task-title text-grey\"\n  }, \"No Task\"), __jsx(\"div\", {\n    className: \"no-task-desc text-grey\"\n  }, \"Drag tasks here\"), __jsx(\"div\", {\n    className: \"no-task-desc text-grey\"\n  }, \"or click + to add new tasks\")), provided.placeholder)));\n}\n\nexport default CardBody;","map":null,"metadata":{},"sourceType":"module"}