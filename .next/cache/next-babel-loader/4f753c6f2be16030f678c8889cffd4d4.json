{"ast":null,"code":"import Card from '../../middleware/models/card';\n\nrequire('../../middleware/db/mongoose');\n\nexport default (async (request, response) => {\n  const _id = request.body._id;\n  const updates = Object.keys(request.body);\n  const allowedUpdates = ['_id', 'cardTitle', 'note', 'isCardCompleted', 'isArchived', 'dueDate'];\n  const isValidOperation = updates.every(update => {\n    return allowedUpdates.includes(update);\n  });\n\n  if (!isValidOperation) {\n    return response.status(400).send({\n      error: 'Invalid card updates!'\n    });\n  }\n\n  try {\n    const newCard = await Card.findOne({\n      _id\n    });\n\n    if (!newCard) {\n      return response.status(404).send({\n        error: 'Failed to find a card'\n      });\n    }\n\n    updates.forEach(update => newCard[update] = request.body[update]);\n    await newCard.save();\n    return response.status(200).json({\n      success: true\n    });\n  } catch (e) {\n    return response.status(500).json({\n      success: false,\n      message: 'failed to update a card '\n    });\n  }\n});","map":{"version":3,"sources":["/Users/heegupark/Desktop/Workspace/MyProject/omega-kanban/pages/api/update-card.tsx"],"names":["Card","require","request","response","_id","body","updates","Object","keys","allowedUpdates","isValidOperation","every","update","includes","status","send","error","newCard","findOne","forEach","save","json","success","e","message"],"mappings":"AACA,OAAOA,IAAP,MAAiB,8BAAjB;;AACAC,OAAO,CAAC,8BAAD,CAAP;;AAEA,gBAAe,OAAOC,OAAP,EAAgCC,QAAhC,KAA8D;AAC3E,QAAMC,GAAG,GAAGF,OAAO,CAACG,IAAR,CAAaD,GAAzB;AACA,QAAME,OAAO,GAAGC,MAAM,CAACC,IAAP,CAAYN,OAAO,CAACG,IAApB,CAAhB;AACA,QAAMI,cAAc,GAAG,CACrB,KADqB,EAErB,WAFqB,EAGrB,MAHqB,EAIrB,iBAJqB,EAKrB,YALqB,EAMrB,SANqB,CAAvB;AAQA,QAAMC,gBAAgB,GAAGJ,OAAO,CAACK,KAAR,CAAeC,MAAD,IAAY;AACjD,WAAOH,cAAc,CAACI,QAAf,CAAwBD,MAAxB,CAAP;AACD,GAFwB,CAAzB;;AAIA,MAAI,CAACF,gBAAL,EAAuB;AACrB,WAAOP,QAAQ,CAACW,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAA1B,CAAP;AACD;;AAED,MAAI;AACF,UAAMC,OAAO,GAAG,MAAMjB,IAAI,CAACkB,OAAL,CAAa;AAAEd,MAAAA;AAAF,KAAb,CAAtB;;AACA,QAAI,CAACa,OAAL,EAAc;AACZ,aAAOd,QAAQ,CAACW,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAA1B,CAAP;AACD;;AACDV,IAAAA,OAAO,CAACa,OAAR,CACGP,MAAD,IACIK,OAAD,CAAiCL,MAAjC,IAA2CV,OAAO,CAACG,IAAR,CAAaO,MAAb,CAFhD;AAIA,UAAMK,OAAO,CAACG,IAAR,EAAN;AACA,WAAOjB,QAAQ,CAACW,MAAT,CAAgB,GAAhB,EAAqBO,IAArB,CAA0B;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAA1B,CAAP;AACD,GAXD,CAWE,OAAOC,CAAP,EAAU;AACV,WAAOpB,QAAQ,CACZW,MADI,CACG,GADH,EAEJO,IAFI,CAEC;AAAEC,MAAAA,OAAO,EAAE,KAAX;AAAkBE,MAAAA,OAAO,EAAE;AAA3B,KAFD,CAAP;AAGD;AACF,CAnCD","sourcesContent":["import { NextApiRequest, NextApiResponse } from 'next';\nimport Card from '../../middleware/models/card';\nrequire('../../middleware/db/mongoose');\n\nexport default async (request: NextApiRequest, response: NextApiResponse) => {\n  const _id = request.body._id;\n  const updates = Object.keys(request.body);\n  const allowedUpdates = [\n    '_id',\n    'cardTitle',\n    'note',\n    'isCardCompleted',\n    'isArchived',\n    'dueDate',\n  ];\n  const isValidOperation = updates.every((update) => {\n    return allowedUpdates.includes(update);\n  });\n\n  if (!isValidOperation) {\n    return response.status(400).send({ error: 'Invalid card updates!' });\n  }\n\n  try {\n    const newCard = await Card.findOne({ _id });\n    if (!newCard) {\n      return response.status(404).send({ error: 'Failed to find a card' });\n    }\n    updates.forEach(\n      (update) =>\n        ((newCard as Record<string, any>)[update] = request.body[update])\n    );\n    await newCard.save();\n    return response.status(200).json({ success: true });\n  } catch (e) {\n    return response\n      .status(500)\n      .json({ success: false, message: 'failed to update a card ' });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}