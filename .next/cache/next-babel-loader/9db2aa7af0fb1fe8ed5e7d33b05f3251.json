{"ast":null,"code":"var _jsxFileName = \"/Users/heegupark/Desktop/Workspace/MyProject/omega-kanban/components/board.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport Top from './top';\nimport Column from './column';\nimport AddColumn from './add-column';\nimport Archive from './archive';\nimport CardModal from './card-modal';\nimport { useSnackbar } from 'notistack';\n\nfunction Board(props) {\n  const {\n    enqueueSnackbar\n  } = useSnackbar(); // const [state, setState] = useState<IColumns>({\n  //   columns: {\n  //     'column-0': {\n  //       id: 'column-0',\n  //       title: 'Plan',\n  //       cards: [\n  //         {\n  //           id: uuidv4(),\n  //           cardTitle: 'Create HTML skeleton',\n  //           note: '',\n  //           isCardCompleted: false,\n  //           isArchived: false,\n  //           checklists: [],\n  //           activities: [],\n  //           dueDate: new Date(2020, 9, 11),\n  //           createdAt: new Date(2020, 8, 11),\n  //           updatedAt: new Date(2020, 8, 11),\n  //         },\n  //       ],\n  //       colorIndex: 0,\n  //       createdAt: new Date(2020, 8, 1),\n  //       updatedAt: new Date(2020, 8, 11),\n  //     },\n  //     'column-1': {\n  //       id: 'column-1',\n  //       title: 'Progress',\n  //       cards: [],\n  //       colorIndex: 1,\n  //       createdAt: new Date(2020, 8, 2),\n  //       updatedAt: new Date(2020, 8, 2),\n  //     },\n  //     'column-2': {\n  //       id: 'column-2',\n  //       title: 'Complete',\n  //       cards: [],\n  //       colorIndex: 2,\n  //       createdAt: new Date(2020, 8, 3),\n  //       updatedAt: new Date(2020, 8, 3),\n  //     },\n  //   },\n  //   columnOrder: ['column-0', 'column-1', 'column-2'],\n  //   archive: {\n  //     id: 'archive',\n  //     title: 'Archive',\n  //     cards: [],\n  //     colorIndex: 0,\n  //     createdAt: new Date(),\n  //     updatedAt: new Date(),\n  //   },\n  // });\n\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    columns: {},\n    columnOrder: [],\n    archive: {\n      _id: 'archive',\n      title: 'Archive',\n      cards: [],\n      colorIndex: 0,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    }\n  });\n  const {\n    0: colorIndex,\n    1: setColorIndex\n  } = useState(0);\n  const {\n    0: currentCard,\n    1: setCurrentCard\n  } = useState({});\n  const {\n    0: currentColumn,\n    1: setCurrentColumn\n  } = useState({});\n  const {\n    0: isLoadingCompleted,\n    1: setIsLoadingCompleted\n  } = useState(false);\n  const {\n    0: archiveColumnId,\n    1: setArchiveColumnId\n  } = useState(''); // useEffect(() => {\n  //   setColorIndex(state.columnOrder.length - 1);\n  // }, []);\n\n  useEffect(() => {\n    getColumns(props._id);\n  }, []);\n\n  const getColumns = _id => {\n    fetch(`/api/get-columns`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        _id\n      })\n    }).then(res => res.json()).then(data => {\n      if (data.success) {\n        // state.columnOrder = [];\n        // state.archive = {\n        //   _id: 'archive',\n        //   title: 'Archive',\n        //   cards: [],\n        //   colorIndex: 0,\n        //   createdAt: new Date(),\n        //   updatedAt: new Date(),\n        // };\n        // state.columnOrder = [...data.columnOrder];\n        state.archive = data.archive[0];\n        setArchiveColumnId(data.archive[0]._id);\n        data.columns.map(column => {\n          state.columns[column._id] = column;\n          state.columnOrder.push(column._id);\n        });\n        setState(_objectSpread({}, state));\n        setColorIndex(data.columns.length);\n        setIsLoadingCompleted(true);\n      } else {}\n    }).catch(err => {\n      console.error(`Something wrong happened while getting a route:${err.message}`);\n    });\n  };\n\n  const addColumn = (sectionTitle, card) => {\n    // const newSection: ISection = {\n    //   _id: uuidv4(),\n    //   title: sectionTitle,\n    //   cards: [],\n    //   colorIndex: colorIndex + 1,\n    //   createdAt: new Date(),\n    //   updatedAt: new Date(),\n    // };\n    // if (card) {\n    //   newSection.cards.push(card);\n    // }\n    fetch('/api/add-column', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        projectId: props._id,\n        title: sectionTitle,\n        colorIndex: colorIndex + 1\n      })\n    }).then(res => res.json()).then(data => {\n      if (data.success) {\n        state.columns[data.data._id] = _objectSpread(_objectSpread({}, data.data), {}, {\n          cards: []\n        });\n        state.columnOrder.push(data.data._id);\n        setColorIndex(colorIndex + 1);\n        setState(_objectSpread({}, state));\n        handleSnackbar(`'${sectionTitle}' is created`, 'success');\n      } else {\n        handleSnackbar(`Failed to add a column`, 'error');\n      }\n    }).catch(err => {\n      console.error(`Something wrong happened while adding a column:${err.message}`);\n    });\n  };\n\n  const updateCard = (columnId, card) => {\n    fetch(`/api/update-card`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(card)\n    }).then(res => res.json()).then(data => {\n      if (data.success) {\n        state.columns[columnId].cards.map((item, index) => {\n          if (item._id === card._id) {\n            if (card.cardTitle) {\n              item.cardTitle = card.cardTitle;\n              addActivity(columnId, card._id, `Card title is changed to ${card.cardTitle}`);\n            }\n\n            if (card.note) {\n              item.note = card.note;\n              addActivity(columnId, card._id, `Card note is changed`);\n            }\n\n            if (card.isCardCompleted) {\n              item.isCardCompleted = card.isCardCompleted;\n              addActivity(columnId, card._id, `Card is completed`);\n            }\n\n            if (card.isArchived) {\n              let tempCard = {};\n              console.log(tempCard);\n              state.columns[columnId].cards.map((card, index) => {\n                if (item._id === card._id) {\n                  item.isArchived = true;\n                  item.columnId = 'archive';\n                  tempCard = card;\n                  state.columns[columnId].cards.splice(index, 1);\n                }\n              });\n              updateDate(columnId, card._id);\n              state.archive.cards.push(tempCard);\n              addActivity('archive', card._id, `Card is archived`);\n            }\n\n            if (card.dueDate) {\n              item.dueDate = card.dueDate;\n              addActivity(columnId, card._id, `A due date is set to ${convertDate(card.dueDate)}`);\n            }\n          }\n        });\n        updateDate(columnId, card._id);\n        setState(_objectSpread({}, state));\n      } else {\n        handleSnackbar('Something wrong happened while updating a card', 'warning');\n      }\n    }).catch(err => {\n      console.error(`Something wrong happened while updating a card:${err.message}`);\n    });\n  };\n\n  const addCard = (columnId, cardTitle) => {\n    fetch(`/api/add-card`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        columnId,\n        cardTitle\n      })\n    }).then(res => res.json()).then(data => {\n      if (data.success) {\n        state.columns[columnId].cards.push(data.data);\n        addActivity(columnId, data.data._id, `A card with title '${cardTitle}' is created in '${state.columns[columnId].title}'`);\n        updateDate(columnId, '');\n        setState(_objectSpread({}, state));\n      } else {\n        handleSnackbar('Something wrong happened while adding a card', 'warning');\n      }\n    }).catch(err => {\n      console.error(`Something wrong happened while adding a card:${err.message}`);\n    });\n  };\n\n  const updateColumnTitle = (_id, title) => {\n    fetch(`/api/update-column-title`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        _id,\n        title\n      })\n    }).then(res => res.json()).then(data => {\n      if (data.success) {\n        state.columns[_id].title = title;\n        state.columns[_id].updatedAt = new Date();\n        setState(_objectSpread({}, state));\n        handleSnackbar(`Column title is updated`, 'info');\n      } else {\n        handleSnackbar(`Failed to update a column title`, 'error');\n      }\n    }).catch(err => {\n      console.error(`Something wrong happened while getting a route:${err.message}`);\n      handleSnackbar(`Failed to update a column title`, 'error');\n    });\n  };\n\n  const deleteColumn = _id => {\n    const title = state.columns[_id].title;\n    fetch(`/api/delete-column`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        _id\n      })\n    }).then(res => res.json()).then(data => {\n      if (data.success) {\n        delete state.columns[_id];\n        state.columnOrder.splice(state.columnOrder.indexOf(_id), 1);\n        setState(_objectSpread({}, state));\n        handleSnackbar(`'${title}' is deleted`, 'error');\n      } else {\n        handleSnackbar(`Failed to delete a column`, 'warning');\n      }\n    }).catch(err => {\n      console.error(`Something wrong happened while deleting a column:${err.message}`);\n    });\n  };\n\n  const deleteCard = (columnId, cardId) => {\n    fetch(`/api/delete-card`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        _id: cardId\n      })\n    }).then(res => res.json()).then(data => {\n      if (data.success) {\n        state.columns[columnId].cards.map((card, index) => {\n          if (card._id === cardId) {\n            state.columns[columnId].cards.splice(index, 1);\n          }\n        });\n        updateDate(columnId, cardId);\n        handleSnackbar('A card is deleted', 'error');\n        setState(_objectSpread({}, state));\n      } else {\n        handleSnackbar(`Failed to delete a card`, 'warning');\n      }\n    }).catch(err => {\n      console.error(`Something wrong happened while deleting a card:${err.message}`);\n    });\n  };\n\n  const archiveCard = (columnId, cardId) => {\n    fetch(`/api/archive-card`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        _id: cardId,\n        projectId: props._id\n      })\n    }).then(res => res.json()).then(data => {\n      if (data.success) {\n        let tempCard = {};\n        state.columns[columnId].cards.map((card, index) => {\n          if (card._id === cardId) {\n            card.isArchived = true;\n            tempCard = card;\n            state.columns[columnId].cards.splice(index, 1);\n          }\n        });\n        updateDate(columnId, cardId);\n        state.archive.cards.push(tempCard);\n        addActivity(archiveColumnId, cardId, `Card is archived`);\n        setState(_objectSpread({}, state));\n      } else {\n        handleSnackbar('Something wrong happened while archiving a card', 'warning');\n      }\n    }).catch(err => {\n      console.error(`Something wrong happened while archiving a card:${err.message}`);\n    });\n  };\n\n  const onDragEnd = result => {\n    if (!result.destination) {\n      return;\n    }\n\n    if (result.type === 'column') {\n      const columnOrder = reorderColumn(state.columnOrder, result.source.index, result.destination.index);\n      handleSnackbar(`'${state.columns[state.columnOrder[result.source.index]].title}' and '${state.columns[state.columnOrder[result.destination.index]].title}' are reordered`, 'success');\n      setState(_objectSpread(_objectSpread({}, state), {}, {\n        columnOrder\n      }));\n      return;\n    }\n\n    if (result.source.droppableId === result.destination.droppableId) {\n      const column = state.columns[result.source.droppableId];\n      const cards = reorderCards(column.cards, result.source.index, result.destination.index);\n\n      const newState = _objectSpread(_objectSpread({}, state), {}, {\n        columns: _objectSpread(_objectSpread({}, state.columns), {}, {\n          [column._id]: _objectSpread(_objectSpread({}, column), {}, {\n            cards\n          })\n        })\n      });\n\n      setState(newState);\n      handleSnackbar(`A card is reordered in'${column.title}'`, 'success');\n      return;\n    }\n\n    const sourceColumn = state.columns[result.source.droppableId];\n    const destinationColumn = state.columns[result.destination.droppableId];\n    const card = sourceColumn.cards[result.source.index];\n\n    const newSourceColumn = _objectSpread(_objectSpread({}, sourceColumn), {}, {\n      cards: [...sourceColumn.cards]\n    });\n\n    newSourceColumn.cards.splice(result.source.index, 1);\n\n    const newDestinationColumn = _objectSpread(_objectSpread({}, destinationColumn), {}, {\n      cards: [...destinationColumn.cards]\n    });\n\n    newDestinationColumn.cards.splice(result.destination.index, 0, card);\n\n    const newState = _objectSpread(_objectSpread({}, state), {}, {\n      columns: _objectSpread(_objectSpread({}, state.columns), {}, {\n        [newSourceColumn._id]: newSourceColumn,\n        [newDestinationColumn._id]: newDestinationColumn\n      })\n    });\n\n    handleSnackbar(`A card is moved from '${newSourceColumn.title}' to '${newDestinationColumn.title}'`, 'success');\n    setState(newState);\n  };\n\n  const getItemStyle = (isDragging, draggableStyle) => _objectSpread({\n    display: 'flex',\n    flexDirection: 'row'\n  }, draggableStyle);\n\n  const reorderCards = (list, startIndex, endIndex) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    return result;\n  };\n\n  const reorderColumn = (list, startIndex, endIndex) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    return result;\n  };\n\n  const [open, setOpen] = React.useState(false);\n\n  const setCardForOpen = (columnId, cardId) => {\n    if (columnId === archiveColumnId) {\n      const card = state.archive.cards.filter(card => card._id === cardId);\n      setCurrentCard(card[0]);\n      setCurrentColumn(state.archive);\n    } else {\n      const card = state.columns[columnId].cards.filter(card => card._id === cardId);\n      setCurrentCard(card[0]);\n      setCurrentColumn(state.columns[columnId]);\n    }\n  };\n\n  const handleModalClose = () => {\n    setOpen(false);\n  };\n\n  const addChecklist = (columnId, cardId, checklist) => {\n    fetch(`/api/add-checklist`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        cardId,\n        checklist\n      })\n    }).then(res => res.json()).then(data => {\n      if (data.success) {\n        state.columns[columnId].cards.map(card => {\n          if (card._id === cardId) {\n            card.checklists.push(data.data);\n          }\n        });\n        addActivity(columnId, cardId, `${checklist} is added to the checklist`); // updateDate(columnId, cardId);\n\n        setState(_objectSpread({}, state));\n      } else {\n        handleSnackbar('Something wrong happened while adding a checklist', 'warning');\n      }\n    }).catch(err => {\n      console.error(`Something wrong happened while adding a checklist:${err.message}`);\n    });\n  };\n\n  const updateDate = (columnId, cardId) => {\n    if (cardId) {\n      state.columns[columnId].cards.map(card => {\n        if (card._id === cardId) {\n          card.updatedAt = new Date();\n        }\n      });\n    }\n\n    state.columns[columnId].updatedAt = new Date();\n    setState(_objectSpread({}, state));\n  };\n\n  const updateChecklist = (columnId, cardId, checklist) => {\n    fetch(`/api/update-checklist`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(checklist)\n    }).then(res => res.json()).then(data => {\n      if (data.success) {\n        state.columns[columnId].cards.map(card => {\n          if (card._id === cardId) {\n            if (checklist.checklist) {\n              card.checklists.map(item => {\n                if (item._id === checklist._id) {\n                  item.checklist = checklist.checklist;\n                }\n              });\n              updateDate(columnId, cardId);\n              addActivity(columnId, cardId, `A checklist is updated to ${checklist.checklist}`);\n            }\n\n            if (checklist.isChecked !== undefined) {\n              if (checklist.isChecked) {\n                card.checklists.map(item => {\n                  if (item._id === checklist._id) {\n                    item.isChecked = true;\n                  }\n                });\n                updateDate(columnId, cardId);\n                addActivity(columnId, cardId, `A checklist is completed`);\n              }\n\n              console.log(checklist.isChecked);\n\n              if (!checklist.isChecked) {\n                card.checklists.map(item => {\n                  if (item._id === checklist._id) {\n                    item.isChecked = false;\n                  }\n                });\n                updateDate(columnId, cardId);\n                addActivity(columnId, cardId, `A checklist is incompleted`);\n              }\n            }\n          }\n        });\n        setState(_objectSpread({}, state));\n      } else {\n        handleSnackbar('Something wrong happened while updating a checklist', 'warning');\n      }\n    }).catch(err => {\n      console.error(`Something wrong happened while updating a checklist:${err.message}`);\n    });\n  };\n\n  const deleteChecklist = (columnId, cardId, checklistId) => {\n    fetch(`/api/delete-checklist`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        _id: checklistId\n      })\n    }).then(res => res.json()).then(data => {\n      if (data.success) {\n        state.columns[columnId].cards.map(card => {\n          if (card._id === cardId) {\n            card.checklists = card.checklists.filter(checklist => checklist._id !== checklistId);\n          }\n        });\n        updateDate(columnId, cardId);\n        addActivity(columnId, cardId, `A checklist is deleted`);\n        setState(_objectSpread({}, state));\n      } else {\n        handleSnackbar(`Failed to delete a checklist`, 'warning');\n      }\n    }).catch(err => {\n      console.error(`Something wrong happened while deleting a checklist:${err.message}`);\n    });\n  };\n\n  const convertDate = date => {\n    const formattedDate = new Date(date);\n    const month = formattedDate.toString().split(' ')[1];\n    const day = formattedDate.toString().split(' ')[2];\n    const year = formattedDate.toString().split(' ')[3];\n    return `${month} ${day}, ${year}`;\n  };\n\n  const addActivity = (columnId, cardId, activity) => {\n    fetch(`/api/add-activity`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        cardId,\n        activity\n      })\n    }).then(res => res.json()).then(data => {\n      if (data.success) {\n        if (columnId === archiveColumnId) {\n          state.archive.cards.map(card => {\n            if (card._id === cardId) {\n              card.activities.unshift(data.data);\n            }\n          });\n        } else {\n          state.columns[columnId].cards.map(card => {\n            if (card._id === cardId) {\n              card.activities.unshift(data.data);\n            }\n          });\n        }\n\n        if (activity.toLowerCase().includes('archive')) {\n          handleSnackbar(activity, 'warning');\n        } else {\n          handleSnackbar(activity, 'info');\n        }\n\n        setState(_objectSpread({}, state));\n      } else {\n        handleSnackbar('Something wrong happened while adding an activity', 'warning');\n      }\n    }).catch(err => {\n      console.error(`Something wrong happened while getting an activity:${err.message}`);\n    });\n  }; // const changeProjectName = (projectName: string) => {\n  //   handleSnackbar(`Project name is changed to '${projectName}'`, 'info');\n  //   props.setProjectName(projectName);\n  // };\n\n\n  const handleSnackbar = (message, variant) => {\n    enqueueSnackbar(message, {\n      variant\n    });\n  };\n\n  return __jsx(React.Fragment, null, isLoadingCompleted && __jsx(React.Fragment, null, __jsx(Top, {\n    _id: props._id,\n    changeProjectName: props.changeProjectName,\n    projectName: props.projectName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 828,\n      columnNumber: 11\n    }\n  }), __jsx(\"div\", {\n    className: \"board\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 833,\n      columnNumber: 11\n    }\n  }, __jsx(DragDropContext, {\n    onDragEnd: onDragEnd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 834,\n      columnNumber: 13\n    }\n  }, __jsx(Droppable, {\n    direction: \"horizontal\",\n    droppableId: \"all-droppables\",\n    type: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 835,\n      columnNumber: 15\n    }\n  }, (provided, snapshot) => __jsx(\"div\", _extends({\n    ref: provided.innerRef\n  }, provided.droppableProps, {\n    style: getItemStyle(snapshot.isDragging, provided.droppableProps.style),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 841,\n      columnNumber: 19\n    }\n  }), state.columnOrder.map((columnId, index) => {\n    return __jsx(Column, {\n      key: columnId,\n      column: state.columns[columnId],\n      index: index,\n      addCard: addCard,\n      setOpen: setOpen,\n      setCardForOpen: setCardForOpen,\n      updateColumnTitle: updateColumnTitle,\n      deleteColumn: deleteColumn // onDragEnd={onDragEnd}\n      ,\n      convertDate: convertDate,\n      open: true,\n      projectName: props.projectName,\n      handleModalClose: handleModalClose,\n      addChecklist: addChecklist,\n      updateChecklist: updateChecklist,\n      addActivity: addActivity,\n      updateDate: updateDate,\n      updateCard: updateCard,\n      deleteChecklist: deleteChecklist,\n      deleteCard: deleteCard,\n      archiveCard: archiveCard,\n      archiveColumnId: archiveColumnId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 852,\n        columnNumber: 27\n      }\n    });\n  }), provided.placeholder))), state.archive.cards.length > 0 && __jsx(Archive, {\n    index: 0 // onDragEnd={onDragEnd}\n    ,\n    column: state.archive,\n    archiveColumnId: archiveColumnId,\n    setCardForOpen: setCardForOpen,\n    convertDate: convertDate,\n    setOpen: setOpen,\n    open: true,\n    projectName: props.projectName,\n    handleModalClose: handleModalClose,\n    updateColumnTitle: updateColumnTitle,\n    deleteColumn: deleteColumn,\n    addChecklist: addChecklist,\n    updateChecklist: updateChecklist,\n    addActivity: addActivity,\n    updateDate: updateDate,\n    updateCard: updateCard,\n    deleteChecklist: deleteChecklist,\n    deleteCard: deleteCard,\n    addCard: addCard,\n    archiveCard: archiveCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 885,\n      columnNumber: 15\n    }\n  }), __jsx(AddColumn, {\n    colorIndex: colorIndex,\n    addColumn: addColumn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 909,\n      columnNumber: 13\n    }\n  })), open && __jsx(CardModal, {\n    open: true // column={}\n    ,\n    addCard: addCard,\n    projectName: props.projectName,\n    currentCard: currentCard,\n    currentColumn: currentColumn,\n    handleModalClose: handleModalClose,\n    addChecklist: addChecklist,\n    updateChecklist: updateChecklist,\n    addActivity: addActivity,\n    updateDate: updateDate,\n    updateCard: updateCard,\n    deleteChecklist: deleteChecklist,\n    convertDate: convertDate,\n    deleteCard: deleteCard,\n    archiveCard: archiveCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 912,\n      columnNumber: 13\n    }\n  })));\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/heegupark/Desktop/Workspace/MyProject/omega-kanban/components/board.tsx"],"names":["React","useState","useEffect","DragDropContext","Droppable","Top","Column","AddColumn","Archive","CardModal","useSnackbar","Board","props","enqueueSnackbar","state","setState","columns","columnOrder","archive","_id","title","cards","colorIndex","createdAt","Date","updatedAt","setColorIndex","currentCard","setCurrentCard","currentColumn","setCurrentColumn","isLoadingCompleted","setIsLoadingCompleted","archiveColumnId","setArchiveColumnId","getColumns","fetch","method","headers","body","JSON","stringify","then","res","json","data","success","map","column","push","length","catch","err","console","error","message","addColumn","sectionTitle","card","projectId","handleSnackbar","updateCard","columnId","item","index","cardTitle","addActivity","note","isCardCompleted","isArchived","tempCard","log","splice","updateDate","dueDate","convertDate","addCard","updateColumnTitle","deleteColumn","indexOf","deleteCard","cardId","archiveCard","onDragEnd","result","destination","type","reorderColumn","source","droppableId","reorderCards","newState","sourceColumn","destinationColumn","newSourceColumn","newDestinationColumn","getItemStyle","isDragging","draggableStyle","display","flexDirection","list","startIndex","endIndex","Array","from","removed","open","setOpen","setCardForOpen","filter","handleModalClose","addChecklist","checklist","checklists","updateChecklist","isChecked","undefined","deleteChecklist","checklistId","date","formattedDate","month","toString","split","day","year","activity","activities","unshift","toLowerCase","includes","variant","changeProjectName","projectName","provided","snapshot","innerRef","droppableProps","style","placeholder"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport Top from './top';\nimport Column from './column';\nimport AddColumn from './add-column';\nimport Archive from './archive';\nimport CardModal from './card-modal';\nimport { VariantType, useSnackbar } from 'notistack';\nimport IMainProps from './interfaces/imainprops';\nimport IColumns from './interfaces/icolumns';\nimport ICard from './interfaces/icard';\nimport IColumnItem from './interfaces/icolumnitem';\nimport IChecklist from './interfaces/ichecklist';\nimport IColumnData from './interfaces/icolumndata';\nimport { IActivity } from '../middleware/models/activity';\nimport { IColumn } from '../middleware/models/column';\n\nfunction Board(props: IMainProps) {\n  const { enqueueSnackbar } = useSnackbar();\n  // const [state, setState] = useState<IColumns>({\n  //   columns: {\n  //     'column-0': {\n  //       id: 'column-0',\n  //       title: 'Plan',\n  //       cards: [\n  //         {\n  //           id: uuidv4(),\n  //           cardTitle: 'Create HTML skeleton',\n  //           note: '',\n  //           isCardCompleted: false,\n  //           isArchived: false,\n  //           checklists: [],\n  //           activities: [],\n  //           dueDate: new Date(2020, 9, 11),\n  //           createdAt: new Date(2020, 8, 11),\n  //           updatedAt: new Date(2020, 8, 11),\n  //         },\n  //       ],\n  //       colorIndex: 0,\n  //       createdAt: new Date(2020, 8, 1),\n  //       updatedAt: new Date(2020, 8, 11),\n  //     },\n  //     'column-1': {\n  //       id: 'column-1',\n  //       title: 'Progress',\n  //       cards: [],\n  //       colorIndex: 1,\n  //       createdAt: new Date(2020, 8, 2),\n  //       updatedAt: new Date(2020, 8, 2),\n  //     },\n  //     'column-2': {\n  //       id: 'column-2',\n  //       title: 'Complete',\n  //       cards: [],\n  //       colorIndex: 2,\n  //       createdAt: new Date(2020, 8, 3),\n  //       updatedAt: new Date(2020, 8, 3),\n  //     },\n  //   },\n  //   columnOrder: ['column-0', 'column-1', 'column-2'],\n  //   archive: {\n  //     id: 'archive',\n  //     title: 'Archive',\n  //     cards: [],\n  //     colorIndex: 0,\n  //     createdAt: new Date(),\n  //     updatedAt: new Date(),\n  //   },\n  // });\n\n  const [state, setState] = useState<IColumns>({\n    columns: {},\n    columnOrder: [],\n    archive: {\n      _id: 'archive',\n      title: 'Archive',\n      cards: [],\n      colorIndex: 0,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    },\n  });\n\n  const [colorIndex, setColorIndex] = useState(0);\n  const [currentCard, setCurrentCard] = useState<ICard>({} as ICard);\n  const [currentColumn, setCurrentColumn] = useState<IColumnItem>(\n    {} as IColumnItem\n  );\n  const [isLoadingCompleted, setIsLoadingCompleted] = useState(false);\n  const [archiveColumnId, setArchiveColumnId] = useState('');\n  // useEffect(() => {\n  //   setColorIndex(state.columnOrder.length - 1);\n  // }, []);\n\n  useEffect(() => {\n    getColumns(props._id);\n  }, []);\n\n  const getColumns = (_id: String) => {\n    fetch(`/api/get-columns`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        _id,\n      }),\n    })\n      .then((res) => res.json())\n      .then(\n        (data: {\n          success: boolean;\n          columns: [IColumnItem];\n          columnOrder: [];\n          archive: [IColumnItem];\n        }) => {\n          if (data.success) {\n            // state.columnOrder = [];\n            // state.archive = {\n            //   _id: 'archive',\n            //   title: 'Archive',\n            //   cards: [],\n            //   colorIndex: 0,\n            //   createdAt: new Date(),\n            //   updatedAt: new Date(),\n            // };\n            // state.columnOrder = [...data.columnOrder];\n            state.archive = data.archive[0];\n            setArchiveColumnId(data.archive[0]._id);\n            data.columns.map((column: IColumnItem) => {\n              state.columns[column._id] = column;\n              state.columnOrder.push(column._id);\n            });\n            setState({\n              ...state,\n            });\n            setColorIndex(data.columns.length);\n            setIsLoadingCompleted(true);\n          } else {\n          }\n        }\n      )\n      .catch((err) => {\n        console.error(\n          `Something wrong happened while getting a route:${err.message}`\n        );\n      });\n  };\n\n  const addColumn = (sectionTitle: string, card: ICard | undefined) => {\n    // const newSection: ISection = {\n    //   _id: uuidv4(),\n    //   title: sectionTitle,\n    //   cards: [],\n    //   colorIndex: colorIndex + 1,\n    //   createdAt: new Date(),\n    //   updatedAt: new Date(),\n    // };\n    // if (card) {\n    //   newSection.cards.push(card);\n    // }\n\n    fetch('/api/add-column', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        projectId: props._id,\n        title: sectionTitle,\n        colorIndex: colorIndex + 1,\n      }),\n    })\n      .then((res) => res.json())\n      .then((data: IColumnData) => {\n        if (data.success) {\n          state.columns[data.data._id] = { ...data.data, cards: [] };\n          state.columnOrder.push(data.data._id);\n          setColorIndex(colorIndex + 1);\n          setState({\n            ...state,\n          });\n          handleSnackbar(`'${sectionTitle}' is created`, 'success');\n        } else {\n          handleSnackbar(`Failed to add a column`, 'error');\n        }\n      })\n      .catch((err) => {\n        console.error(\n          `Something wrong happened while adding a column:${err.message}`\n        );\n      });\n  };\n\n  const updateCard = (\n    columnId: string,\n    card: {\n      _id: string;\n      columnId: string | undefined;\n      cardTitle: string | undefined;\n      note: string | undefined;\n      isCardCompleted: boolean | undefined;\n      isArchived: boolean | undefined;\n      dueDate: Date | null;\n    }\n  ) => {\n    fetch(`/api/update-card`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(card),\n    })\n      .then((res) => res.json())\n      .then((data: { success: boolean; data: ICard }) => {\n        if (data.success) {\n          state.columns[columnId].cards.map((item: ICard, index: number) => {\n            if (item._id === card._id) {\n              if (card.cardTitle) {\n                item.cardTitle = card.cardTitle;\n                addActivity(\n                  columnId,\n                  card._id,\n                  `Card title is changed to ${card.cardTitle}`\n                );\n              }\n              if (card.note) {\n                item.note = card.note;\n                addActivity(columnId, card._id, `Card note is changed`);\n              }\n              if (card.isCardCompleted) {\n                item.isCardCompleted = card.isCardCompleted;\n                addActivity(columnId, card._id, `Card is completed`);\n              }\n              if (card.isArchived) {\n                let tempCard: ICard = {} as ICard;\n                console.log(tempCard);\n                state.columns[columnId].cards.map(\n                  (card: ICard, index: number) => {\n                    if (item._id === card._id) {\n                      item.isArchived = true;\n                      item.columnId = 'archive';\n                      tempCard = card;\n                      state.columns[columnId].cards.splice(index, 1);\n                    }\n                  }\n                );\n                updateDate(columnId, card._id);\n                state.archive.cards.push(tempCard);\n                addActivity('archive', card._id, `Card is archived`);\n              }\n              if (card.dueDate) {\n                item.dueDate = card.dueDate;\n                addActivity(\n                  columnId,\n                  card._id,\n                  `A due date is set to ${convertDate(card.dueDate)}`\n                );\n              }\n            }\n          });\n          updateDate(columnId, card._id);\n          setState({\n            ...state,\n          });\n        } else {\n          handleSnackbar(\n            'Something wrong happened while updating a card',\n            'warning'\n          );\n        }\n      })\n      .catch((err) => {\n        console.error(\n          `Something wrong happened while updating a card:${err.message}`\n        );\n      });\n  };\n\n  const addCard = (columnId: string, cardTitle: string) => {\n    fetch(`/api/add-card`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        columnId,\n        cardTitle,\n      }),\n    })\n      .then((res) => res.json())\n      .then((data: { success: boolean; data: ICard }) => {\n        if (data.success) {\n          state.columns[columnId].cards.push(data.data);\n          addActivity(\n            columnId,\n            data.data._id,\n            `A card with title '${cardTitle}' is created in '${state.columns[columnId].title}'`\n          );\n          updateDate(columnId, '');\n          setState({\n            ...state,\n          });\n        } else {\n          handleSnackbar(\n            'Something wrong happened while adding a card',\n            'warning'\n          );\n        }\n      })\n      .catch((err) => {\n        console.error(\n          `Something wrong happened while adding a card:${err.message}`\n        );\n      });\n  };\n\n  const updateColumnTitle = (_id: string, title: string) => {\n    fetch(`/api/update-column-title`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        _id,\n        title,\n      }),\n    })\n      .then((res) => res.json())\n      .then((data: { success: boolean }) => {\n        if (data.success) {\n          state.columns[_id].title = title;\n          state.columns[_id].updatedAt = new Date();\n          setState({\n            ...state,\n          });\n          handleSnackbar(`Column title is updated`, 'info');\n        } else {\n          handleSnackbar(`Failed to update a column title`, 'error');\n        }\n      })\n      .catch((err) => {\n        console.error(\n          `Something wrong happened while getting a route:${err.message}`\n        );\n        handleSnackbar(`Failed to update a column title`, 'error');\n      });\n  };\n\n  const deleteColumn = (_id: string) => {\n    const title = state.columns[_id].title;\n    fetch(`/api/delete-column`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        _id,\n      }),\n    })\n      .then((res) => res.json())\n      .then((data: { success: boolean; message: string }) => {\n        if (data.success) {\n          delete state.columns[_id];\n          state.columnOrder.splice(state.columnOrder.indexOf(_id), 1);\n          setState({\n            ...state,\n          });\n          handleSnackbar(`'${title}' is deleted`, 'error');\n        } else {\n          handleSnackbar(`Failed to delete a column`, 'warning');\n        }\n      })\n      .catch((err) => {\n        console.error(\n          `Something wrong happened while deleting a column:${err.message}`\n        );\n      });\n  };\n\n  const deleteCard = (columnId: string, cardId: string) => {\n    fetch(`/api/delete-card`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        _id: cardId,\n      }),\n    })\n      .then((res) => res.json())\n      .then((data: { success: boolean; message: string }) => {\n        if (data.success) {\n          state.columns[columnId].cards.map((card: ICard, index: number) => {\n            if (card._id === cardId) {\n              state.columns[columnId].cards.splice(index, 1);\n            }\n          });\n          updateDate(columnId, cardId);\n          handleSnackbar('A card is deleted', 'error');\n          setState({\n            ...state,\n          });\n        } else {\n          handleSnackbar(`Failed to delete a card`, 'warning');\n        }\n      })\n      .catch((err) => {\n        console.error(\n          `Something wrong happened while deleting a card:${err.message}`\n        );\n      });\n  };\n\n  const archiveCard = (columnId: string, cardId: string) => {\n    fetch(`/api/archive-card`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ _id: cardId, projectId: props._id }),\n    })\n      .then((res) => res.json())\n      .then((data: { success: boolean; data: ICard }) => {\n        if (data.success) {\n          let tempCard: ICard = {} as ICard;\n          state.columns[columnId].cards.map((card: ICard, index: number) => {\n            if (card._id === cardId) {\n              card.isArchived = true;\n              tempCard = card;\n              state.columns[columnId].cards.splice(index, 1);\n            }\n          });\n          updateDate(columnId, cardId);\n          state.archive.cards.push(tempCard);\n          addActivity(archiveColumnId, cardId, `Card is archived`);\n          setState({\n            ...state,\n          });\n        } else {\n          handleSnackbar(\n            'Something wrong happened while archiving a card',\n            'warning'\n          );\n        }\n      })\n      .catch((err) => {\n        console.error(\n          `Something wrong happened while archiving a card:${err.message}`\n        );\n      });\n  };\n\n  const onDragEnd = (result: any) => {\n    if (!result.destination) {\n      return;\n    }\n\n    if (result.type === 'column') {\n      const columnOrder: Array<string> = reorderColumn(\n        state.columnOrder,\n        result.source.index,\n        result.destination.index\n      );\n      handleSnackbar(\n        `'${\n          state.columns[state.columnOrder[result.source.index]].title\n        }' and '${\n          state.columns[state.columnOrder[result.destination.index]].title\n        }' are reordered`,\n        'success'\n      );\n      setState({\n        ...state,\n        columnOrder,\n      });\n      return;\n    }\n\n    if (result.source.droppableId === result.destination.droppableId) {\n      const column = state.columns[result.source.droppableId];\n      const cards = reorderCards(\n        column.cards,\n        result.source.index,\n        result.destination.index\n      );\n\n      const newState = {\n        ...state,\n        columns: {\n          ...state.columns,\n          [column._id]: {\n            ...column,\n            cards,\n          },\n        },\n      };\n      setState(newState);\n      handleSnackbar(`A card is reordered in'${column.title}'`, 'success');\n      return;\n    }\n\n    const sourceColumn = state.columns[result.source.droppableId];\n    const destinationColumn = state.columns[result.destination.droppableId];\n    const card = sourceColumn.cards[result.source.index];\n\n    const newSourceColumn = {\n      ...sourceColumn,\n      cards: [...sourceColumn.cards],\n    };\n    newSourceColumn.cards.splice(result.source.index, 1);\n\n    const newDestinationColumn = {\n      ...destinationColumn,\n      cards: [...destinationColumn.cards],\n    };\n    newDestinationColumn.cards.splice(result.destination.index, 0, card);\n\n    const newState = {\n      ...state,\n      columns: {\n        ...state.columns,\n        [newSourceColumn._id]: newSourceColumn,\n        [newDestinationColumn._id]: newDestinationColumn,\n      },\n    };\n    handleSnackbar(\n      `A card is moved from '${newSourceColumn.title}' to '${newDestinationColumn.title}'`,\n      'success'\n    );\n    setState(newState);\n  };\n\n  const getItemStyle = (isDragging: boolean, draggableStyle: any) => ({\n    display: 'flex',\n    flexDirection: 'row',\n    ...draggableStyle,\n  });\n\n  const reorderCards = (\n    list: Array<ICard>,\n    startIndex: number,\n    endIndex: number\n  ) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    return result;\n  };\n\n  const reorderColumn = (\n    list: Array<string>,\n    startIndex: number,\n    endIndex: number\n  ) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    return result;\n  };\n\n  const [open, setOpen] = React.useState(false);\n  const setCardForOpen = (columnId: string, cardId: string) => {\n    if (columnId === archiveColumnId) {\n      const card = state.archive.cards.filter(\n        (card: ICard) => card._id === cardId\n      );\n      setCurrentCard(card[0]);\n      setCurrentColumn(state.archive);\n    } else {\n      const card = state.columns[columnId].cards.filter(\n        (card: ICard) => card._id === cardId\n      );\n      setCurrentCard(card[0]);\n      setCurrentColumn(state.columns[columnId]);\n    }\n  };\n\n  const handleModalClose = () => {\n    setOpen(false);\n  };\n\n  const addChecklist = (\n    columnId: string,\n    cardId: string,\n    checklist: string\n  ) => {\n    fetch(`/api/add-checklist`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        cardId,\n        checklist,\n      }),\n    })\n      .then((res) => res.json())\n      .then((data: { success: boolean; data: IChecklist }) => {\n        if (data.success) {\n          state.columns[columnId].cards.map((card: ICard) => {\n            if (card._id === cardId) {\n              card.checklists.push(data.data);\n            }\n          });\n          addActivity(\n            columnId,\n            cardId,\n            `${checklist} is added to the checklist`\n          );\n          // updateDate(columnId, cardId);\n          setState({\n            ...state,\n          });\n        } else {\n          handleSnackbar(\n            'Something wrong happened while adding a checklist',\n            'warning'\n          );\n        }\n      })\n      .catch((err) => {\n        console.error(\n          `Something wrong happened while adding a checklist:${err.message}`\n        );\n      });\n  };\n\n  const updateDate = (columnId: string, cardId: string) => {\n    if (cardId) {\n      state.columns[columnId].cards.map((card: ICard) => {\n        if (card._id === cardId) {\n          card.updatedAt = new Date();\n        }\n      });\n    }\n    state.columns[columnId].updatedAt = new Date();\n    setState({\n      ...state,\n    });\n  };\n\n  const updateChecklist = (\n    columnId: string,\n    cardId: string,\n    checklist: {\n      _id: string;\n      checklist: string | undefined;\n      isChecked: boolean | undefined;\n    }\n  ) => {\n    fetch(`/api/update-checklist`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(checklist),\n    })\n      .then((res) => res.json())\n      .then((data: { success: boolean; data: ICard }) => {\n        if (data.success) {\n          state.columns[columnId].cards.map((card: ICard) => {\n            if (card._id === cardId) {\n              if (checklist.checklist) {\n                card.checklists.map((item: IChecklist) => {\n                  if (item._id === checklist._id) {\n                    item.checklist = checklist.checklist as string;\n                  }\n                });\n                updateDate(columnId, cardId);\n                addActivity(\n                  columnId,\n                  cardId,\n                  `A checklist is updated to ${checklist.checklist}`\n                );\n              }\n              if (checklist.isChecked !== undefined) {\n                if (checklist.isChecked) {\n                  card.checklists.map((item: IChecklist) => {\n                    if (item._id === checklist._id) {\n                      item.isChecked = true;\n                    }\n                  });\n                  updateDate(columnId, cardId);\n                  addActivity(columnId, cardId, `A checklist is completed`);\n                }\n                console.log(checklist.isChecked);\n                if (!checklist.isChecked) {\n                  card.checklists.map((item: IChecklist) => {\n                    if (item._id === checklist._id) {\n                      item.isChecked = false;\n                    }\n                  });\n                  updateDate(columnId, cardId);\n                  addActivity(columnId, cardId, `A checklist is incompleted`);\n                }\n              }\n            }\n          });\n\n          setState({\n            ...state,\n          });\n        } else {\n          handleSnackbar(\n            'Something wrong happened while updating a checklist',\n            'warning'\n          );\n        }\n      })\n      .catch((err) => {\n        console.error(\n          `Something wrong happened while updating a checklist:${err.message}`\n        );\n      });\n  };\n\n  const deleteChecklist = (\n    columnId: string,\n    cardId: string,\n    checklistId: string\n  ) => {\n    fetch(`/api/delete-checklist`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        _id: checklistId,\n      }),\n    })\n      .then((res) => res.json())\n      .then((data: { success: boolean; message: string }) => {\n        if (data.success) {\n          state.columns[columnId].cards.map((card: ICard) => {\n            if (card._id === cardId) {\n              card.checklists = card.checklists.filter(\n                (checklist: IChecklist) => checklist._id !== checklistId\n              );\n            }\n          });\n          updateDate(columnId, cardId);\n          addActivity(columnId, cardId, `A checklist is deleted`);\n          setState({\n            ...state,\n          });\n        } else {\n          handleSnackbar(`Failed to delete a checklist`, 'warning');\n        }\n      })\n      .catch((err) => {\n        console.error(\n          `Something wrong happened while deleting a checklist:${err.message}`\n        );\n      });\n  };\n\n  const convertDate = (date: Date) => {\n    const formattedDate = new Date(date);\n    const month = formattedDate.toString().split(' ')[1];\n    const day = formattedDate.toString().split(' ')[2];\n    const year = formattedDate.toString().split(' ')[3];\n    return `${month} ${day}, ${year}`;\n  };\n\n  const addActivity = (columnId: string, cardId: string, activity: string) => {\n    fetch(`/api/add-activity`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        cardId,\n        activity,\n      }),\n    })\n      .then((res) => res.json())\n      .then((data: { success: boolean; data: IActivity }) => {\n        if (data.success) {\n          if (columnId === archiveColumnId) {\n            state.archive.cards.map((card: ICard) => {\n              if (card._id === cardId) {\n                card.activities.unshift(data.data);\n              }\n            });\n          } else {\n            state.columns[columnId].cards.map((card: ICard) => {\n              if (card._id === cardId) {\n                card.activities.unshift(data.data);\n              }\n            });\n          }\n          if (activity.toLowerCase().includes('archive')) {\n            handleSnackbar(activity, 'warning');\n          } else {\n            handleSnackbar(activity, 'info');\n          }\n          setState({\n            ...state,\n          });\n        } else {\n          handleSnackbar(\n            'Something wrong happened while adding an activity',\n            'warning'\n          );\n        }\n      })\n      .catch((err) => {\n        console.error(\n          `Something wrong happened while getting an activity:${err.message}`\n        );\n      });\n  };\n\n  // const changeProjectName = (projectName: string) => {\n  //   handleSnackbar(`Project name is changed to '${projectName}'`, 'info');\n  //   props.setProjectName(projectName);\n  // };\n\n  const handleSnackbar = (message: string, variant: VariantType) => {\n    enqueueSnackbar(message, { variant });\n  };\n\n  return (\n    <>\n      {isLoadingCompleted && (\n        <>\n          <Top\n            _id={props._id}\n            changeProjectName={props.changeProjectName}\n            projectName={props.projectName}\n          />\n          <div className=\"board\">\n            <DragDropContext onDragEnd={onDragEnd}>\n              <Droppable\n                direction=\"horizontal\"\n                droppableId=\"all-droppables\"\n                type=\"column\"\n              >\n                {(provided: any, snapshot: any) => (\n                  <div\n                    ref={provided.innerRef}\n                    {...provided.droppableProps}\n                    style={getItemStyle(\n                      snapshot.isDragging,\n                      provided.droppableProps.style\n                    )}\n                  >\n                    {state.columnOrder.map(\n                      (columnId: string, index: number) => {\n                        return (\n                          <Column\n                            key={columnId}\n                            column={state.columns[columnId]}\n                            index={index}\n                            addCard={addCard}\n                            setOpen={setOpen}\n                            setCardForOpen={setCardForOpen}\n                            updateColumnTitle={updateColumnTitle}\n                            deleteColumn={deleteColumn}\n                            // onDragEnd={onDragEnd}\n                            convertDate={convertDate}\n                            open={true}\n                            projectName={props.projectName}\n                            handleModalClose={handleModalClose}\n                            addChecklist={addChecklist}\n                            updateChecklist={updateChecklist}\n                            addActivity={addActivity}\n                            updateDate={updateDate}\n                            updateCard={updateCard}\n                            deleteChecklist={deleteChecklist}\n                            deleteCard={deleteCard}\n                            archiveCard={archiveCard}\n                            archiveColumnId={archiveColumnId}\n                          />\n                        );\n                      }\n                    )}\n                    {provided.placeholder}\n                  </div>\n                )}\n              </Droppable>\n            </DragDropContext>\n            {state.archive.cards.length > 0 && (\n              <Archive\n                index={0}\n                // onDragEnd={onDragEnd}\n                column={state.archive}\n                archiveColumnId={archiveColumnId}\n                setCardForOpen={setCardForOpen}\n                convertDate={convertDate}\n                setOpen={setOpen}\n                open={true}\n                projectName={props.projectName}\n                handleModalClose={handleModalClose}\n                updateColumnTitle={updateColumnTitle}\n                deleteColumn={deleteColumn}\n                addChecklist={addChecklist}\n                updateChecklist={updateChecklist}\n                addActivity={addActivity}\n                updateDate={updateDate}\n                updateCard={updateCard}\n                deleteChecklist={deleteChecklist}\n                deleteCard={deleteCard}\n                addCard={addCard}\n                archiveCard={archiveCard}\n              />\n            )}\n            <AddColumn colorIndex={colorIndex} addColumn={addColumn} />\n          </div>\n          {open && (\n            <CardModal\n              open={true}\n              // column={}\n              addCard={addCard}\n              projectName={props.projectName}\n              currentCard={currentCard}\n              currentColumn={currentColumn}\n              handleModalClose={handleModalClose}\n              addChecklist={addChecklist}\n              updateChecklist={updateChecklist}\n              addActivity={addActivity}\n              updateDate={updateDate}\n              updateCard={updateCard}\n              deleteChecklist={deleteChecklist}\n              convertDate={convertDate}\n              deleteCard={deleteCard}\n              archiveCard={archiveCard}\n            />\n          )}\n        </>\n      )}\n    </>\n  );\n}\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}