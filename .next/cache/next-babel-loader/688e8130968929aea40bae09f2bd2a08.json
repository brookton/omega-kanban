{"ast":null,"code":"import Router from '../../middleware/models/router';\nimport Column from '../../middleware/models/column';\n\nrequire('../../middleware/db/mongoose');\n\nexport default (async (request, response) => {\n  const {\n    project\n  } = request.body;\n\n  try {\n    const newProject = new Router({\n      project\n    }); // await newProject.save();\n\n    try {\n      try {\n        const planColumn = new Column({\n          projectId: newProject._id,\n          title: 'Plan',\n          colorIndex: 0\n        });\n        await planColumn.save();\n        const progressColumn = new Column({\n          projectId: newProject._id,\n          title: 'Progress',\n          colorIndex: 1\n        });\n        await progressColumn.save();\n        const completeColumn = new Column({\n          projectId: newProject._id,\n          title: 'Complete',\n          colorIndex: 2\n        });\n        await completeColumn.save();\n        const archiveColumn = new Column({\n          projectId: newProject._id,\n          title: 'Archive',\n          colorIndex: 0,\n          category: 'archive'\n        });\n        await archiveColumn.save();\n        newProject.columnOrder.push(planColumn);\n        newProject.columnOrder.push(progressColumn);\n        newProject.columnOrder.push(completeColumn);\n        await newProject.save();\n        return response.status(200).json({\n          success: true,\n          data: newProject\n        });\n      } catch (e) {\n        return response.status(500).json({\n          success: false,\n          message: 'failed to create basic columns'\n        });\n      }\n    } catch (e) {\n      return response.status(500).json({\n        success: false,\n        message: 'failed to add router'\n      });\n    }\n  } catch (e) {\n    return response.status(500).json({\n      success: false,\n      message: 'failed to add router'\n    });\n  }\n});","map":{"version":3,"sources":["/Users/heegupark/Desktop/Workspace/MyProject/omega-kanban/pages/api/add-router.tsx"],"names":["Router","Column","require","request","response","project","body","newProject","planColumn","projectId","_id","title","colorIndex","save","progressColumn","completeColumn","archiveColumn","category","columnOrder","push","status","json","success","data","e","message"],"mappings":"AACA,OAAOA,MAAP,MAAmB,gCAAnB;AACA,OAAOC,MAAP,MAAmB,gCAAnB;;AACAC,OAAO,CAAC,8BAAD,CAAP;;AAEA,gBAAe,OAAOC,OAAP,EAAgCC,QAAhC,KAA8D;AAC3E,QAAM;AAAEC,IAAAA;AAAF,MAAcF,OAAO,CAACG,IAA5B;;AACA,MAAI;AACF,UAAMC,UAAU,GAAG,IAAIP,MAAJ,CAAW;AAAEK,MAAAA;AAAF,KAAX,CAAnB,CADE,CAEF;;AACA,QAAI;AACF,UAAI;AACF,cAAMG,UAAU,GAAG,IAAIP,MAAJ,CAAW;AAC5BQ,UAAAA,SAAS,EAAEF,UAAU,CAACG,GADM;AAE5BC,UAAAA,KAAK,EAAE,MAFqB;AAG5BC,UAAAA,UAAU,EAAE;AAHgB,SAAX,CAAnB;AAKA,cAAMJ,UAAU,CAACK,IAAX,EAAN;AAEA,cAAMC,cAAc,GAAG,IAAIb,MAAJ,CAAW;AAChCQ,UAAAA,SAAS,EAAEF,UAAU,CAACG,GADU;AAEhCC,UAAAA,KAAK,EAAE,UAFyB;AAGhCC,UAAAA,UAAU,EAAE;AAHoB,SAAX,CAAvB;AAKA,cAAME,cAAc,CAACD,IAAf,EAAN;AAEA,cAAME,cAAc,GAAG,IAAId,MAAJ,CAAW;AAChCQ,UAAAA,SAAS,EAAEF,UAAU,CAACG,GADU;AAEhCC,UAAAA,KAAK,EAAE,UAFyB;AAGhCC,UAAAA,UAAU,EAAE;AAHoB,SAAX,CAAvB;AAKA,cAAMG,cAAc,CAACF,IAAf,EAAN;AAEA,cAAMG,aAAa,GAAG,IAAIf,MAAJ,CAAW;AAC/BQ,UAAAA,SAAS,EAAEF,UAAU,CAACG,GADS;AAE/BC,UAAAA,KAAK,EAAE,SAFwB;AAG/BC,UAAAA,UAAU,EAAE,CAHmB;AAI/BK,UAAAA,QAAQ,EAAE;AAJqB,SAAX,CAAtB;AAMA,cAAMD,aAAa,CAACH,IAAd,EAAN;AAEAN,QAAAA,UAAU,CAACW,WAAX,CAAuBC,IAAvB,CAA4BX,UAA5B;AACAD,QAAAA,UAAU,CAACW,WAAX,CAAuBC,IAAvB,CAA4BL,cAA5B;AACAP,QAAAA,UAAU,CAACW,WAAX,CAAuBC,IAAvB,CAA4BJ,cAA5B;AAEA,cAAMR,UAAU,CAACM,IAAX,EAAN;AAEA,eAAOT,QAAQ,CAACgB,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAAEC,UAAAA,OAAO,EAAE,IAAX;AAAiBC,UAAAA,IAAI,EAAEhB;AAAvB,SAA1B,CAAP;AACD,OArCD,CAqCE,OAAOiB,CAAP,EAAU;AACV,eAAOpB,QAAQ,CAACgB,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAC/BC,UAAAA,OAAO,EAAE,KADsB;AAE/BG,UAAAA,OAAO,EAAE;AAFsB,SAA1B,CAAP;AAID;AACF,KA5CD,CA4CE,OAAOD,CAAP,EAAU;AACV,aAAOpB,QAAQ,CAACgB,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAC/BC,QAAAA,OAAO,EAAE,KADsB;AAE/BG,QAAAA,OAAO,EAAE;AAFsB,OAA1B,CAAP;AAID;AACF,GArDD,CAqDE,OAAOD,CAAP,EAAU;AACV,WAAOpB,QAAQ,CACZgB,MADI,CACG,GADH,EAEJC,IAFI,CAEC;AAAEC,MAAAA,OAAO,EAAE,KAAX;AAAkBG,MAAAA,OAAO,EAAE;AAA3B,KAFD,CAAP;AAGD;AACF,CA5DD","sourcesContent":["import { NextApiRequest, NextApiResponse } from 'next';\nimport Router from '../../middleware/models/router';\nimport Column from '../../middleware/models/column';\nrequire('../../middleware/db/mongoose');\n\nexport default async (request: NextApiRequest, response: NextApiResponse) => {\n  const { project } = request.body;\n  try {\n    const newProject = new Router({ project });\n    // await newProject.save();\n    try {\n      try {\n        const planColumn = new Column({\n          projectId: newProject._id,\n          title: 'Plan',\n          colorIndex: 0,\n        });\n        await planColumn.save();\n\n        const progressColumn = new Column({\n          projectId: newProject._id,\n          title: 'Progress',\n          colorIndex: 1,\n        });\n        await progressColumn.save();\n\n        const completeColumn = new Column({\n          projectId: newProject._id,\n          title: 'Complete',\n          colorIndex: 2,\n        });\n        await completeColumn.save();\n\n        const archiveColumn = new Column({\n          projectId: newProject._id,\n          title: 'Archive',\n          colorIndex: 0,\n          category: 'archive',\n        });\n        await archiveColumn.save();\n\n        newProject.columnOrder.push(planColumn);\n        newProject.columnOrder.push(progressColumn);\n        newProject.columnOrder.push(completeColumn);\n\n        await newProject.save();\n\n        return response.status(200).json({ success: true, data: newProject });\n      } catch (e) {\n        return response.status(500).json({\n          success: false,\n          message: 'failed to create basic columns',\n        });\n      }\n    } catch (e) {\n      return response.status(500).json({\n        success: false,\n        message: 'failed to add router',\n      });\n    }\n  } catch (e) {\n    return response\n      .status(500)\n      .json({ success: false, message: 'failed to add router' });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}