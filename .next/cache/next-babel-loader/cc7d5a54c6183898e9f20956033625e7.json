{"ast":null,"code":"import Column from '../../middleware/models/column';\nimport Router from '../../middleware/models/router';\n\nrequire('../../middleware/db/mongoose');\n\nimport mongoose from 'mongoose';\nconst ObjectId = mongoose.Types.ObjectId;\nexport default (async (request, response) => {\n  const {\n    _id\n  } = request.body;\n\n  try {\n    const project = await Router.findOne({\n      _id\n    });\n    const columns = await Column.aggregate([{\n      $match: {\n        projectId: ObjectId(_id)\n      }\n    }, {\n      $match: {\n        category: 'normal'\n      }\n    }, {\n      $lookup: {\n        from: 'cards',\n        let: {\n          id: '$_id'\n        },\n        pipeline: [{\n          $match: {\n            $expr: {\n              $eq: ['$columnId', '$$id']\n            }\n          }\n        }, {\n          $match: {\n            $expr: {\n              $eq: ['$isArchived', false]\n            }\n          }\n        }, {\n          $lookup: {\n            from: 'checklists',\n            let: {\n              id: '$_id'\n            },\n            pipeline: [{\n              $match: {\n                $expr: {\n                  $eq: ['$cardId', '$$id']\n                }\n              }\n            }, {\n              $sort: {\n                createdAt: 1\n              }\n            }],\n            as: 'checklists'\n          }\n        }, {\n          $lookup: {\n            from: 'activities',\n            let: {\n              id: '$_id'\n            },\n            pipeline: [{\n              $match: {\n                $expr: {\n                  $eq: ['$cardId', '$$id']\n                }\n              }\n            }, {\n              $sort: {\n                createdAt: -1\n              }\n            }],\n            as: 'activities'\n          }\n        }],\n        as: 'cards'\n      }\n    }]);\n\n    if (!columns) {\n      return response.status(404).json({\n        success: false,\n        message: 'data not found'\n      });\n    }\n\n    const archive = await Column.aggregate([{\n      $match: {\n        projectId: ObjectId(_id)\n      }\n    }, {\n      $match: {\n        category: 'archive'\n      }\n    }, {\n      $lookup: {\n        from: 'cards',\n        let: {\n          id: '$_id'\n        },\n        pipeline: [{\n          $match: {\n            $expr: {\n              $eq: ['$columnId', '$$id']\n            }\n          }\n        }, {\n          $match: {\n            $expr: {\n              $eq: ['$isArchived', true]\n            }\n          }\n        }, {\n          $lookup: {\n            from: 'checklists',\n            let: {\n              id: '$_id'\n            },\n            pipeline: [{\n              $match: {\n                $expr: {\n                  $eq: ['$cardId', '$$id']\n                }\n              }\n            }, {\n              $sort: {\n                createdAt: 1\n              }\n            }],\n            as: 'checklists'\n          }\n        }, {\n          $lookup: {\n            from: 'activities',\n            let: {\n              id: '$_id'\n            },\n            pipeline: [{\n              $match: {\n                $expr: {\n                  $eq: ['$cardId', '$$id']\n                }\n              }\n            }, {\n              $sort: {\n                createdAt: -1\n              }\n            }],\n            as: 'activities'\n          }\n        }],\n        as: 'cards'\n      }\n    }]);\n    return response.status(200).json({\n      success: true,\n      columns,\n      columnOrder: project.columnOrder,\n      archive\n    });\n  } catch (e) {\n    return response.status(500).json({\n      success: false,\n      message: 'failed to get a board data'\n    });\n  }\n});","map":null,"metadata":{},"sourceType":"module"}