{"ast":null,"code":"var _jsxFileName = \"/Users/heegupark/Desktop/Workspace/MyProject/omega-kanban/components/board.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport Top from './top';\nimport Column from './column';\nimport AddSection from './add-section';\nimport { v4 as uuidv4 } from 'uuid';\nimport CardModal from './card-modal';\n\nfunction Board(props) {\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    columns: {\n      'column-0': {\n        id: 'column-0',\n        title: 'Plan',\n        cards: [],\n        colorIndex: 0,\n        createdAt: new Date(2020, 8, 1),\n        updatedAt: null\n      },\n      'column-1': {\n        id: 'column-1',\n        title: 'Progress',\n        cards: [],\n        colorIndex: 1,\n        createdAt: new Date(2020, 8, 2),\n        updatedAt: null\n      },\n      'column-2': {\n        id: 'column-2',\n        title: 'Complete',\n        cards: [],\n        colorIndex: 2,\n        createdAt: new Date(2020, 8, 3),\n        updatedAt: null\n      }\n    },\n    columnOrder: ['column-0', 'column-1', 'column-2']\n  });\n  const {\n    0: colorIndex,\n    1: setColorIndex\n  } = useState(0);\n  const {\n    0: currentCard,\n    1: setCurrentCard\n  } = useState({});\n  const {\n    0: currentColumn,\n    1: setCurrentColumn\n  } = useState({});\n  useEffect(() => {\n    setColorIndex(state.columnOrder.length - 1);\n  }, []);\n\n  const addCard = (columnId, cardTitle) => {\n    const newCard = {\n      id: uuidv4(),\n      cardTitle,\n      note: '',\n      checklists: [],\n      activities: []\n    };\n    state.columns[columnId].cards.push(newCard);\n    setState(_objectSpread({}, state));\n  };\n\n  const addSection = sectionTitle => {\n    const newSection = {\n      id: uuidv4(),\n      title: sectionTitle,\n      cards: [],\n      colorIndex: colorIndex + 1\n    };\n    setColorIndex(colorIndex + 1);\n    state.columns[newSection.id] = newSection;\n    state.columnOrder.push(newSection.id);\n    setState(_objectSpread({}, state));\n  };\n\n  const updateSectionTitle = (id, sectionTitle) => {\n    state.columns[id].title = sectionTitle;\n    setState(_objectSpread({}, state));\n  };\n\n  const deleteColumn = id => {\n    delete state.columns[id];\n    state.columnOrder.splice(state.columnOrder.indexOf(id), 1);\n    setState(_objectSpread({}, state));\n  };\n\n  const onDragEnd = result => {\n    if (!result.destination) {\n      return;\n    }\n\n    if (result.type === 'column') {\n      const columnOrder = reorder(state.columnOrder, result.source.index, result.destination.index);\n      setState(_objectSpread(_objectSpread({}, state), {}, {\n        columnOrder\n      }));\n      return;\n    }\n\n    if (result.source.droppableId === result.destination.droppableId) {\n      const column = state.columns[result.source.droppableId];\n      const cards = reorder(column.cards, result.source.index, result.destination.index);\n\n      const newState = _objectSpread(_objectSpread({}, state), {}, {\n        columns: _objectSpread(_objectSpread({}, state.columns), {}, {\n          [column.id]: _objectSpread(_objectSpread({}, column), {}, {\n            cards\n          })\n        })\n      });\n\n      setState(newState);\n      return;\n    }\n\n    const sourceColumn = state.columns[result.source.droppableId];\n    const destinationColumn = state.columns[result.destination.droppableId];\n    const card = sourceColumn.cards[result.source.index];\n\n    const newSourceColumn = _objectSpread(_objectSpread({}, sourceColumn), {}, {\n      cards: [...sourceColumn.cards]\n    });\n\n    newSourceColumn.cards.splice(result.source.index, 1);\n\n    const newDestinationColumn = _objectSpread(_objectSpread({}, destinationColumn), {}, {\n      cards: [...destinationColumn.cards]\n    });\n\n    newDestinationColumn.cards.splice(result.destination.index, 0, card);\n\n    const newState = _objectSpread(_objectSpread({}, state), {}, {\n      columns: _objectSpread(_objectSpread({}, state.columns), {}, {\n        [newSourceColumn.id]: newSourceColumn,\n        [newDestinationColumn.id]: newDestinationColumn\n      })\n    });\n\n    setState(newState);\n  };\n\n  const getItemStyle = (isDragging, draggableStyle) => _objectSpread({\n    display: 'flex',\n    flexDirection: 'row'\n  }, draggableStyle);\n\n  const reorder = (list, startIndex, endIndex) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    return result;\n  }; //for modal\n\n\n  const [open, setOpen] = React.useState(false);\n\n  const setCardForOpen = (columnId, cardId) => {\n    const card = state.columns[columnId].cards.filter(card => card.id === cardId);\n    setCurrentCard(card[0]);\n    setCurrentColumn(state.columns[columnId]);\n  };\n\n  const handleModalClose = () => {\n    setOpen(false);\n  };\n\n  const addChecklist = (columnId, cardId, checklist) => {\n    state.columns[columnId].cards.map(card => {\n      if (card.id === cardId) {\n        card.checklists.push({\n          id: uuidv4(),\n          checklist\n        });\n      }\n    });\n    setState(_objectSpread({}, state));\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Top, {\n    setView: props.setView,\n    setProjectName: props.setProjectName,\n    projectName: props.projectName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    className: \"board\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }\n  }, __jsx(DragDropContext, {\n    onDragEnd: onDragEnd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 9\n    }\n  }, __jsx(Droppable, {\n    direction: \"horizontal\",\n    droppableId: \"all-droppables\",\n    type: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 11\n    }\n  }, (provided, snapshot) => __jsx(\"div\", _extends({\n    ref: provided.innerRef\n  }, provided.droppableProps, {\n    style: getItemStyle(snapshot.isDragging, provided.droppableProps.style),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 15\n    }\n  }), state.columnOrder.map((columnId, index) => {\n    return __jsx(Column, {\n      key: columnId,\n      column: state.columns[columnId],\n      index: index,\n      reorder: reorder,\n      addCard: addCard,\n      setOpen: setOpen,\n      setCardForOpen: setCardForOpen,\n      updateSectionTitle: updateSectionTitle,\n      deleteColumn: deleteColumn,\n      onDragEnd: onDragEnd,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 21\n      }\n    });\n  }), provided.placeholder))), __jsx(AddSection, {\n    colorIndex: colorIndex,\n    addSection: addSection,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 9\n    }\n  })), open && __jsx(CardModal, {\n    open: true,\n    projectName: props.projectName,\n    currentColumn: currentColumn,\n    handleModalClose: handleModalClose,\n    currentCard: currentCard,\n    addChecklist: addChecklist,\n    updateChecklist: updateChecklist,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 9\n    }\n  }));\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/heegupark/Desktop/Workspace/MyProject/omega-kanban/components/board.tsx"],"names":["React","useState","useEffect","DragDropContext","Droppable","Top","Column","AddSection","v4","uuidv4","CardModal","Board","props","state","setState","columns","id","title","cards","colorIndex","createdAt","Date","updatedAt","columnOrder","setColorIndex","currentCard","setCurrentCard","currentColumn","setCurrentColumn","length","addCard","columnId","cardTitle","newCard","note","checklists","activities","push","addSection","sectionTitle","newSection","updateSectionTitle","deleteColumn","splice","indexOf","onDragEnd","result","destination","type","reorder","source","index","droppableId","column","newState","sourceColumn","destinationColumn","card","newSourceColumn","newDestinationColumn","getItemStyle","isDragging","draggableStyle","display","flexDirection","list","startIndex","endIndex","Array","from","removed","open","setOpen","setCardForOpen","cardId","filter","handleModalClose","addChecklist","checklist","map","setView","setProjectName","projectName","provided","snapshot","innerRef","droppableProps","style","placeholder","updateChecklist"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,eAAT,EAA0BC,SAA1B,QAAsD,qBAAtD;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AACA,OAAOC,SAAP,MAAsB,cAAtB;;AAEA,SAASC,KAAT,CAAeC,KAAf,EAA2B;AACzB,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBb,QAAQ,CAAC;AACjCc,IAAAA,OAAO,EAAE;AACP,kBAAY;AACVC,QAAAA,EAAE,EAAE,UADM;AAEVC,QAAAA,KAAK,EAAE,MAFG;AAGVC,QAAAA,KAAK,EAAE,EAHG;AAIVC,QAAAA,UAAU,EAAE,CAJF;AAKVC,QAAAA,SAAS,EAAE,IAAIC,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,CAAlB,CALD;AAMVC,QAAAA,SAAS,EAAE;AAND,OADL;AASP,kBAAY;AACVN,QAAAA,EAAE,EAAE,UADM;AAEVC,QAAAA,KAAK,EAAE,UAFG;AAGVC,QAAAA,KAAK,EAAE,EAHG;AAIVC,QAAAA,UAAU,EAAE,CAJF;AAKVC,QAAAA,SAAS,EAAE,IAAIC,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,CAAlB,CALD;AAMVC,QAAAA,SAAS,EAAE;AAND,OATL;AAiBP,kBAAY;AACVN,QAAAA,EAAE,EAAE,UADM;AAEVC,QAAAA,KAAK,EAAE,UAFG;AAGVC,QAAAA,KAAK,EAAE,EAHG;AAIVC,QAAAA,UAAU,EAAE,CAJF;AAKVC,QAAAA,SAAS,EAAE,IAAIC,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,CAAlB,CALD;AAMVC,QAAAA,SAAS,EAAE;AAND;AAjBL,KADwB;AA2BjCC,IAAAA,WAAW,EAAE,CAAC,UAAD,EAAa,UAAb,EAAyB,UAAzB;AA3BoB,GAAD,CAAlC;AA8BA,QAAM;AAAA,OAACJ,UAAD;AAAA,OAAaK;AAAb,MAA8BvB,QAAQ,CAAC,CAAD,CAA5C;AACA,QAAM;AAAA,OAACwB,WAAD;AAAA,OAAcC;AAAd,MAAgCzB,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM;AAAA,OAAC0B,aAAD;AAAA,OAAgBC;AAAhB,MAAoC3B,QAAQ,CAAC,EAAD,CAAlD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdsB,IAAAA,aAAa,CAACX,KAAK,CAACU,WAAN,CAAkBM,MAAlB,GAA2B,CAA5B,CAAb;AACD,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMC,OAAO,GAAG,CAACC,QAAD,EAAgBC,SAAhB,KAAmC;AACjD,UAAMC,OAAO,GAAG;AACdjB,MAAAA,EAAE,EAAEP,MAAM,EADI;AAEduB,MAAAA,SAFc;AAGdE,MAAAA,IAAI,EAAE,EAHQ;AAIdC,MAAAA,UAAU,EAAE,EAJE;AAKdC,MAAAA,UAAU,EAAE;AALE,KAAhB;AAOAvB,IAAAA,KAAK,CAACE,OAAN,CAAcgB,QAAd,EAAwBb,KAAxB,CAA8BmB,IAA9B,CAAmCJ,OAAnC;AACAnB,IAAAA,QAAQ,mBACHD,KADG,EAAR;AAGD,GAZD;;AAcA,QAAMyB,UAAU,GAAIC,YAAD,IAAuB;AACxC,UAAMC,UAAU,GAAG;AACjBxB,MAAAA,EAAE,EAAEP,MAAM,EADO;AAEjBQ,MAAAA,KAAK,EAAEsB,YAFU;AAGjBrB,MAAAA,KAAK,EAAE,EAHU;AAIjBC,MAAAA,UAAU,EAAEA,UAAU,GAAG;AAJR,KAAnB;AAMAK,IAAAA,aAAa,CAACL,UAAU,GAAG,CAAd,CAAb;AACAN,IAAAA,KAAK,CAACE,OAAN,CAAcyB,UAAU,CAACxB,EAAzB,IAA+BwB,UAA/B;AACA3B,IAAAA,KAAK,CAACU,WAAN,CAAkBc,IAAlB,CAAuBG,UAAU,CAACxB,EAAlC;AACAF,IAAAA,QAAQ,mBACHD,KADG,EAAR;AAGD,GAbD;;AAeA,QAAM4B,kBAAkB,GAAG,CAACzB,EAAD,EAAUuB,YAAV,KAAgC;AACzD1B,IAAAA,KAAK,CAACE,OAAN,CAAcC,EAAd,EAAkBC,KAAlB,GAA0BsB,YAA1B;AACAzB,IAAAA,QAAQ,mBACHD,KADG,EAAR;AAGD,GALD;;AAOA,QAAM6B,YAAY,GAAI1B,EAAD,IAAa;AAChC,WAAOH,KAAK,CAACE,OAAN,CAAcC,EAAd,CAAP;AACAH,IAAAA,KAAK,CAACU,WAAN,CAAkBoB,MAAlB,CAAyB9B,KAAK,CAACU,WAAN,CAAkBqB,OAAlB,CAA0B5B,EAA1B,CAAzB,EAAwD,CAAxD;AACAF,IAAAA,QAAQ,mBACHD,KADG,EAAR;AAGD,GAND;;AAQA,QAAMgC,SAAS,GAAIC,MAAD,IAAiB;AACjC,QAAI,CAACA,MAAM,CAACC,WAAZ,EAAyB;AACvB;AACD;;AAED,QAAID,MAAM,CAACE,IAAP,KAAgB,QAApB,EAA8B;AAC5B,YAAMzB,WAAW,GAAG0B,OAAO,CACzBpC,KAAK,CAACU,WADmB,EAEzBuB,MAAM,CAACI,MAAP,CAAcC,KAFW,EAGzBL,MAAM,CAACC,WAAP,CAAmBI,KAHM,CAA3B;AAKArC,MAAAA,QAAQ,iCACHD,KADG;AAENU,QAAAA;AAFM,SAAR;AAIA;AACD;;AAED,QAAIuB,MAAM,CAACI,MAAP,CAAcE,WAAd,KAA8BN,MAAM,CAACC,WAAP,CAAmBK,WAArD,EAAkE;AAChE,YAAMC,MAAM,GAAGxC,KAAK,CAACE,OAAN,CAAc+B,MAAM,CAACI,MAAP,CAAcE,WAA5B,CAAf;AACA,YAAMlC,KAAK,GAAG+B,OAAO,CACnBI,MAAM,CAACnC,KADY,EAEnB4B,MAAM,CAACI,MAAP,CAAcC,KAFK,EAGnBL,MAAM,CAACC,WAAP,CAAmBI,KAHA,CAArB;;AAMA,YAAMG,QAAQ,mCACTzC,KADS;AAEZE,QAAAA,OAAO,kCACFF,KAAK,CAACE,OADJ;AAEL,WAACsC,MAAM,CAACrC,EAAR,mCACKqC,MADL;AAEEnC,YAAAA;AAFF;AAFK;AAFK,QAAd;;AAUAJ,MAAAA,QAAQ,CAACwC,QAAD,CAAR;AACA;AACD;;AAED,UAAMC,YAAY,GAAG1C,KAAK,CAACE,OAAN,CAAc+B,MAAM,CAACI,MAAP,CAAcE,WAA5B,CAArB;AACA,UAAMI,iBAAiB,GAAG3C,KAAK,CAACE,OAAN,CAAc+B,MAAM,CAACC,WAAP,CAAmBK,WAAjC,CAA1B;AACA,UAAMK,IAAI,GAAGF,YAAY,CAACrC,KAAb,CAAmB4B,MAAM,CAACI,MAAP,CAAcC,KAAjC,CAAb;;AAEA,UAAMO,eAAe,mCAChBH,YADgB;AAEnBrC,MAAAA,KAAK,EAAE,CAAC,GAAGqC,YAAY,CAACrC,KAAjB;AAFY,MAArB;;AAIAwC,IAAAA,eAAe,CAACxC,KAAhB,CAAsByB,MAAtB,CAA6BG,MAAM,CAACI,MAAP,CAAcC,KAA3C,EAAkD,CAAlD;;AAEA,UAAMQ,oBAAoB,mCACrBH,iBADqB;AAExBtC,MAAAA,KAAK,EAAE,CAAC,GAAGsC,iBAAiB,CAACtC,KAAtB;AAFiB,MAA1B;;AAIAyC,IAAAA,oBAAoB,CAACzC,KAArB,CAA2ByB,MAA3B,CAAkCG,MAAM,CAACC,WAAP,CAAmBI,KAArD,EAA4D,CAA5D,EAA+DM,IAA/D;;AAEA,UAAMH,QAAQ,mCACTzC,KADS;AAEZE,MAAAA,OAAO,kCACFF,KAAK,CAACE,OADJ;AAEL,SAAC2C,eAAe,CAAC1C,EAAjB,GAAsB0C,eAFjB;AAGL,SAACC,oBAAoB,CAAC3C,EAAtB,GAA2B2C;AAHtB;AAFK,MAAd;;AASA7C,IAAAA,QAAQ,CAACwC,QAAD,CAAR;AACD,GAlED;;AAoEA,QAAMM,YAAY,GAAG,CAACC,UAAD,EAAkBC,cAAlB;AACnBC,IAAAA,OAAO,EAAE,MADU;AAEnBC,IAAAA,aAAa,EAAE;AAFI,KAGhBF,cAHgB,CAArB;;AAMA,QAAMb,OAAO,GAAG,CAACgB,IAAD,EAAYC,UAAZ,EAA6BC,QAA7B,KAA+C;AAC7D,UAAMrB,MAAM,GAAGsB,KAAK,CAACC,IAAN,CAAWJ,IAAX,CAAf;AACA,UAAM,CAACK,OAAD,IAAYxB,MAAM,CAACH,MAAP,CAAcuB,UAAd,EAA0B,CAA1B,CAAlB;AACApB,IAAAA,MAAM,CAACH,MAAP,CAAcwB,QAAd,EAAwB,CAAxB,EAA2BG,OAA3B;AACA,WAAOxB,MAAP;AACD,GALD,CA7JyB,CAoKzB;;;AACA,QAAM,CAACyB,IAAD,EAAOC,OAAP,IAAkBxE,KAAK,CAACC,QAAN,CAAe,KAAf,CAAxB;;AAEA,QAAMwE,cAAc,GAAG,CAAC1C,QAAD,EAAgB2C,MAAhB,KAAgC;AACrD,UAAMjB,IAAI,GAAG5C,KAAK,CAACE,OAAN,CAAcgB,QAAd,EAAwBb,KAAxB,CAA8ByD,MAA9B,CACVlB,IAAD,IAAeA,IAAI,CAACzC,EAAL,KAAY0D,MADhB,CAAb;AAGAhD,IAAAA,cAAc,CAAC+B,IAAI,CAAC,CAAD,CAAL,CAAd;AACA7B,IAAAA,gBAAgB,CAACf,KAAK,CAACE,OAAN,CAAcgB,QAAd,CAAD,CAAhB;AACD,GAND;;AAQA,QAAM6C,gBAAgB,GAAG,MAAM;AAC7BJ,IAAAA,OAAO,CAAC,KAAD,CAAP;AACD,GAFD;;AAIA,QAAMK,YAAY,GAAG,CAAC9C,QAAD,EAAgB2C,MAAhB,EAA6BI,SAA7B,KAAgD;AACnEjE,IAAAA,KAAK,CAACE,OAAN,CAAcgB,QAAd,EAAwBb,KAAxB,CAA8B6D,GAA9B,CAAmCtB,IAAD,IAAe;AAC/C,UAAIA,IAAI,CAACzC,EAAL,KAAY0D,MAAhB,EAAwB;AACtBjB,QAAAA,IAAI,CAACtB,UAAL,CAAgBE,IAAhB,CAAqB;AAAErB,UAAAA,EAAE,EAAEP,MAAM,EAAZ;AAAgBqE,UAAAA;AAAhB,SAArB;AACD;AACF,KAJD;AAKAhE,IAAAA,QAAQ,mBACHD,KADG,EAAR;AAGD,GATD;;AAWA,SACE,4BACE,MAAC,GAAD;AACE,IAAA,OAAO,EAAED,KAAK,CAACoE,OADjB;AAEE,IAAA,cAAc,EAAEpE,KAAK,CAACqE,cAFxB;AAGE,IAAA,WAAW,EAAErE,KAAK,CAACsE,WAHrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAME;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,eAAD;AAAiB,IAAA,SAAS,EAAErC,SAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AACE,IAAA,SAAS,EAAC,YADZ;AAEE,IAAA,WAAW,EAAC,gBAFd;AAGE,IAAA,IAAI,EAAC,QAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKG,CAACsC,QAAD,EAAgBC,QAAhB,KACC;AACE,IAAA,GAAG,EAAED,QAAQ,CAACE;AADhB,KAEMF,QAAQ,CAACG,cAFf;AAGE,IAAA,KAAK,EAAE1B,YAAY,CACjBwB,QAAQ,CAACvB,UADQ,EAEjBsB,QAAQ,CAACG,cAAT,CAAwBC,KAFP,CAHrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQG1E,KAAK,CAACU,WAAN,CAAkBwD,GAAlB,CAAsB,CAAChD,QAAD,EAAgBoB,KAAhB,KAA+B;AACpD,WACE,MAAC,MAAD;AACE,MAAA,GAAG,EAAEpB,QADP;AAEE,MAAA,MAAM,EAAElB,KAAK,CAACE,OAAN,CAAcgB,QAAd,CAFV;AAGE,MAAA,KAAK,EAAEoB,KAHT;AAIE,MAAA,OAAO,EAAEF,OAJX;AAKE,MAAA,OAAO,EAAEnB,OALX;AAME,MAAA,OAAO,EAAE0C,OANX;AAOE,MAAA,cAAc,EAAEC,cAPlB;AAQE,MAAA,kBAAkB,EAAEhC,kBARtB;AASE,MAAA,YAAY,EAAEC,YAThB;AAUE,MAAA,SAAS,EAAEG,SAVb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAcD,GAfA,CARH,EAwBGsC,QAAQ,CAACK,WAxBZ,CANJ,CADF,CADF,EAqCE,MAAC,UAAD;AAAY,IAAA,UAAU,EAAErE,UAAxB;AAAoC,IAAA,UAAU,EAAEmB,UAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IArCF,CANF,EA6CGiC,IAAI,IACH,MAAC,SAAD;AACE,IAAA,IAAI,EAAE,IADR;AAEE,IAAA,WAAW,EAAE3D,KAAK,CAACsE,WAFrB;AAGE,IAAA,aAAa,EAAEvD,aAHjB;AAIE,IAAA,gBAAgB,EAAEiD,gBAJpB;AAKE,IAAA,WAAW,EAAEnD,WALf;AAME,IAAA,YAAY,EAAEoD,YANhB;AAOE,IAAA,eAAe,EAAEY,eAPnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA9CJ,CADF;AA2DD;;AACD,eAAe9E,KAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport Top from './top';\nimport Column from './column';\nimport AddSection from './add-section';\nimport { v4 as uuidv4 } from 'uuid';\nimport CardModal from './card-modal';\n\nfunction Board(props: any) {\n  const [state, setState] = useState({\n    columns: {\n      'column-0': {\n        id: 'column-0',\n        title: 'Plan',\n        cards: [],\n        colorIndex: 0,\n        createdAt: new Date(2020, 8, 1),\n        updatedAt: null,\n      },\n      'column-1': {\n        id: 'column-1',\n        title: 'Progress',\n        cards: [],\n        colorIndex: 1,\n        createdAt: new Date(2020, 8, 2),\n        updatedAt: null,\n      },\n      'column-2': {\n        id: 'column-2',\n        title: 'Complete',\n        cards: [],\n        colorIndex: 2,\n        createdAt: new Date(2020, 8, 3),\n        updatedAt: null,\n      },\n    },\n    columnOrder: ['column-0', 'column-1', 'column-2'],\n  } as any);\n\n  const [colorIndex, setColorIndex] = useState(0);\n  const [currentCard, setCurrentCard] = useState({} as any);\n  const [currentColumn, setCurrentColumn] = useState({} as any);\n\n  useEffect(() => {\n    setColorIndex(state.columnOrder.length - 1);\n  }, []);\n\n  const addCard = (columnId: any, cardTitle: any) => {\n    const newCard = {\n      id: uuidv4(),\n      cardTitle,\n      note: '',\n      checklists: [],\n      activities: [],\n    };\n    state.columns[columnId].cards.push(newCard);\n    setState({\n      ...state,\n    } as any);\n  };\n\n  const addSection = (sectionTitle: any) => {\n    const newSection = {\n      id: uuidv4(),\n      title: sectionTitle,\n      cards: [],\n      colorIndex: colorIndex + 1,\n    };\n    setColorIndex(colorIndex + 1);\n    state.columns[newSection.id] = newSection;\n    state.columnOrder.push(newSection.id);\n    setState({\n      ...state,\n    } as any);\n  };\n\n  const updateSectionTitle = (id: any, sectionTitle: any) => {\n    state.columns[id].title = sectionTitle;\n    setState({\n      ...state,\n    } as any);\n  };\n\n  const deleteColumn = (id: any) => {\n    delete state.columns[id];\n    state.columnOrder.splice(state.columnOrder.indexOf(id), 1);\n    setState({\n      ...state,\n    } as any);\n  };\n\n  const onDragEnd = (result: any) => {\n    if (!result.destination) {\n      return;\n    }\n\n    if (result.type === 'column') {\n      const columnOrder = reorder(\n        state.columnOrder,\n        result.source.index,\n        result.destination.index\n      );\n      setState({\n        ...state,\n        columnOrder,\n      } as any);\n      return;\n    }\n\n    if (result.source.droppableId === result.destination.droppableId) {\n      const column = state.columns[result.source.droppableId];\n      const cards = reorder(\n        column.cards,\n        result.source.index,\n        result.destination.index\n      );\n\n      const newState = {\n        ...state,\n        columns: {\n          ...state.columns,\n          [column.id]: {\n            ...column,\n            cards,\n          },\n        },\n      };\n      setState(newState);\n      return;\n    }\n\n    const sourceColumn = state.columns[result.source.droppableId];\n    const destinationColumn = state.columns[result.destination.droppableId];\n    const card = sourceColumn.cards[result.source.index];\n\n    const newSourceColumn = {\n      ...sourceColumn,\n      cards: [...sourceColumn.cards],\n    };\n    newSourceColumn.cards.splice(result.source.index, 1);\n\n    const newDestinationColumn = {\n      ...destinationColumn,\n      cards: [...destinationColumn.cards],\n    };\n    newDestinationColumn.cards.splice(result.destination.index, 0, card);\n\n    const newState = {\n      ...state,\n      columns: {\n        ...state.columns,\n        [newSourceColumn.id]: newSourceColumn,\n        [newDestinationColumn.id]: newDestinationColumn,\n      },\n    };\n\n    setState(newState);\n  };\n\n  const getItemStyle = (isDragging: any, draggableStyle: any) => ({\n    display: 'flex',\n    flexDirection: 'row',\n    ...draggableStyle,\n  });\n\n  const reorder = (list: any, startIndex: any, endIndex: any) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    return result;\n  };\n\n  //for modal\n  const [open, setOpen] = React.useState(false);\n\n  const setCardForOpen = (columnId: any, cardId: any) => {\n    const card = state.columns[columnId].cards.filter(\n      (card: any) => card.id === cardId\n    );\n    setCurrentCard(card[0]);\n    setCurrentColumn(state.columns[columnId]);\n  };\n\n  const handleModalClose = () => {\n    setOpen(false);\n  };\n\n  const addChecklist = (columnId: any, cardId: any, checklist: any) => {\n    state.columns[columnId].cards.map((card: any) => {\n      if (card.id === cardId) {\n        card.checklists.push({ id: uuidv4(), checklist });\n      }\n    });\n    setState({\n      ...state,\n    } as any);\n  };\n\n  return (\n    <>\n      <Top\n        setView={props.setView}\n        setProjectName={props.setProjectName}\n        projectName={props.projectName}\n      />\n      <div className=\"board\">\n        <DragDropContext onDragEnd={onDragEnd}>\n          <Droppable\n            direction=\"horizontal\"\n            droppableId=\"all-droppables\"\n            type=\"column\"\n          >\n            {(provided: any, snapshot: any) => (\n              <div\n                ref={provided.innerRef}\n                {...provided.droppableProps}\n                style={getItemStyle(\n                  snapshot.isDragging,\n                  provided.droppableProps.style\n                )}\n              >\n                {state.columnOrder.map((columnId: any, index: any) => {\n                  return (\n                    <Column\n                      key={columnId}\n                      column={state.columns[columnId]}\n                      index={index}\n                      reorder={reorder}\n                      addCard={addCard}\n                      setOpen={setOpen}\n                      setCardForOpen={setCardForOpen}\n                      updateSectionTitle={updateSectionTitle}\n                      deleteColumn={deleteColumn}\n                      onDragEnd={onDragEnd}\n                    />\n                  );\n                })}\n                {provided.placeholder}\n              </div>\n            )}\n          </Droppable>\n        </DragDropContext>\n        <AddSection colorIndex={colorIndex} addSection={addSection} />\n      </div>\n      {open && (\n        <CardModal\n          open={true}\n          projectName={props.projectName}\n          currentColumn={currentColumn}\n          handleModalClose={handleModalClose}\n          currentCard={currentCard}\n          addChecklist={addChecklist}\n          updateChecklist={updateChecklist}\n        />\n      )}\n    </>\n  );\n}\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}