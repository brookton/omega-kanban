{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Card from '../../middleware/models/card';\n\nrequire('../../middleware/db/mongoose');\n\nexport default (async (request, response) => {\n  const {\n    columnId,\n    cardTitle\n  } = request.body;\n\n  try {\n    const cards = await Card.find({\n      columnId\n    });\n    console.log(cards.length);\n    const count = cards.length;\n    const newCard = new Card({\n      columnId,\n      cardTitle,\n      order: count\n    });\n    await newCard.save();\n    return response.status(200).json({\n      success: true,\n      data: _objectSpread(_objectSpread({}, newCard._doc), {}, {\n        checklists: [],\n        activities: []\n      })\n    });\n  } catch (e) {\n    return response.status(500).json({\n      success: false,\n      message: 'failed to add a card'\n    });\n  }\n});","map":{"version":3,"sources":["/Users/heegupark/Desktop/Workspace/MyProject/omega-kanban/pages/api/add-card.tsx"],"names":["Card","require","request","response","columnId","cardTitle","body","cards","find","console","log","length","count","newCard","order","save","status","json","success","data","_doc","checklists","activities","e","message"],"mappings":";;;;;;AAEA,OAAOA,IAAP,MAAiB,8BAAjB;;AACAC,OAAO,CAAC,8BAAD,CAAP;;AAEA,gBAAe,OAAOC,OAAP,EAAgCC,QAAhC,KAA8D;AAC3E,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA0BH,OAAO,CAACI,IAAxC;;AACA,MAAI;AACF,UAAMC,KAAK,GAAG,MAAMP,IAAI,CAACQ,IAAL,CAAU;AAAEJ,MAAAA;AAAF,KAAV,CAApB;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACI,MAAlB;AACA,UAAMC,KAAK,GAAGL,KAAK,CAACI,MAApB;AACA,UAAME,OAAO,GAAG,IAAIb,IAAJ,CAAS;AAAEI,MAAAA,QAAF;AAAYC,MAAAA,SAAZ;AAAuBS,MAAAA,KAAK,EAAEF;AAA9B,KAAT,CAAhB;AACA,UAAMC,OAAO,CAACE,IAAR,EAAN;AAEA,WAAOZ,QAAQ,CAACa,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAC/BC,MAAAA,OAAO,EAAE,IADsB;AAE/BC,MAAAA,IAAI,kCAAON,OAAO,CAACO,IAAf;AAAqBC,QAAAA,UAAU,EAAE,EAAjC;AAAqCC,QAAAA,UAAU,EAAE;AAAjD;AAF2B,KAA1B,CAAP;AAID,GAXD,CAWE,OAAOC,CAAP,EAAU;AACV,WAAOpB,QAAQ,CACZa,MADI,CACG,GADH,EAEJC,IAFI,CAEC;AAAEC,MAAAA,OAAO,EAAE,KAAX;AAAkBM,MAAAA,OAAO,EAAE;AAA3B,KAFD,CAAP;AAGD;AACF,CAlBD","sourcesContent":["import { NextApiRequest, NextApiResponse } from 'next';\nimport Column from '../../middleware/models/column';\nimport Card from '../../middleware/models/card';\nrequire('../../middleware/db/mongoose');\n\nexport default async (request: NextApiRequest, response: NextApiResponse) => {\n  const { columnId, cardTitle } = request.body;\n  try {\n    const cards = await Card.find({ columnId });\n    console.log(cards.length);\n    const count = cards.length;\n    const newCard = new Card({ columnId, cardTitle, order: count });\n    await newCard.save();\n\n    return response.status(200).json({\n      success: true,\n      data: { ...newCard._doc, checklists: [], activities: [] },\n    });\n  } catch (e) {\n    return response\n      .status(500)\n      .json({ success: false, message: 'failed to add a card' });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}