{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"/Users/heegupark/Desktop/Workspace/MyProject/omega-kanban/components/board.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport { v4 as uuidv4 } from 'uuid';\nimport Top from './top';\nimport Column from './column';\nimport AddSection from './add-section';\nimport Archive from './archive';\nimport CardModal from './card-modal';\nimport { useSnackbar } from 'notistack';\n\nfunction Board(props) {\n  _s();\n\n  var _this = this;\n\n  var _useSnackbar = useSnackbar(),\n      enqueueSnackbar = _useSnackbar.enqueueSnackbar; // const [state, setState] = useState<IColumns>({\n  //   columns: {\n  //     'column-0': {\n  //       id: 'column-0',\n  //       title: 'Plan',\n  //       cards: [\n  //         {\n  //           id: uuidv4(),\n  //           cardTitle: 'Create HTML skeleton',\n  //           note: '',\n  //           isCardCompleted: false,\n  //           isArchived: false,\n  //           checklists: [],\n  //           activities: [],\n  //           dueDate: new Date(2020, 9, 11),\n  //           createdAt: new Date(2020, 8, 11),\n  //           updatedAt: new Date(2020, 8, 11),\n  //         },\n  //       ],\n  //       colorIndex: 0,\n  //       createdAt: new Date(2020, 8, 1),\n  //       updatedAt: new Date(2020, 8, 11),\n  //     },\n  //     'column-1': {\n  //       id: 'column-1',\n  //       title: 'Progress',\n  //       cards: [],\n  //       colorIndex: 1,\n  //       createdAt: new Date(2020, 8, 2),\n  //       updatedAt: new Date(2020, 8, 2),\n  //     },\n  //     'column-2': {\n  //       id: 'column-2',\n  //       title: 'Complete',\n  //       cards: [],\n  //       colorIndex: 2,\n  //       createdAt: new Date(2020, 8, 3),\n  //       updatedAt: new Date(2020, 8, 3),\n  //     },\n  //   },\n  //   columnOrder: ['column-0', 'column-1', 'column-2'],\n  //   archive: {\n  //     id: 'archive',\n  //     title: 'Archive',\n  //     cards: [],\n  //     colorIndex: 0,\n  //     createdAt: new Date(),\n  //     updatedAt: new Date(),\n  //   },\n  // });\n\n\n  var _useState = useState({\n    columns: {},\n    columnOrder: [],\n    archive: {\n      _id: 'archive',\n      title: 'Archive',\n      cards: [],\n      colorIndex: 0,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    }\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  var _useState2 = useState(0),\n      colorIndex = _useState2[0],\n      setColorIndex = _useState2[1];\n\n  var _useState3 = useState(),\n      currentCard = _useState3[0],\n      setCurrentCard = _useState3[1];\n\n  var _useState4 = useState(),\n      currentColumn = _useState4[0],\n      setCurrentColumn = _useState4[1];\n\n  var _useState5 = useState(false),\n      isLoadingCompleted = _useState5[0],\n      setIsLoadingCompleted = _useState5[1]; // useEffect(() => {\n  //   setColorIndex(state.columnOrder.length - 1);\n  // }, []);\n\n\n  useEffect(function () {\n    getColumns(props._id);\n  }, []);\n\n  var getColumns = function getColumns(_id) {\n    fetch(\"/api/get-columns\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        _id: _id\n      })\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      if (data.success) {\n        state.columnOrder = [];\n        data.data.map(function (column) {\n          state.columns[column._id] = column;\n          state.columnOrder.push(column._id);\n          setState(_objectSpread({}, state));\n        });\n        setColorIndex(data.data.length - 1);\n        setIsLoadingCompleted(true);\n      } else {}\n    })[\"catch\"](function (err) {\n      console.error(\"Something wrong happened while getting a route:\".concat(err.message));\n    });\n  };\n\n  var addSection = function addSection(sectionTitle, card) {\n    // const newSection: ISection = {\n    //   _id: uuidv4(),\n    //   title: sectionTitle,\n    //   cards: [],\n    //   colorIndex: colorIndex + 1,\n    //   createdAt: new Date(),\n    //   updatedAt: new Date(),\n    // };\n    // if (card) {\n    //   newSection.cards.push(card);\n    // }\n    fetch('/api/add-column', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        projectId: props._id,\n        title: sectionTitle,\n        colorIndex: colorIndex + 1\n      })\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      if (data.success) {\n        state.columns[data.data._id] = data.data;\n        state.columnOrder.push(data.data._id);\n        setColorIndex(colorIndex + 1);\n        setState(_objectSpread({}, state));\n        handleSnackbar(\"'\".concat(sectionTitle, \"' is created\"), 'success');\n      } else {\n        handleSnackbar(\"Failed to add a column\", 'error');\n      }\n    })[\"catch\"](function (err) {\n      console.error(\"Something wrong happened while adding a column:\".concat(err.message));\n    });\n  };\n\n  var addCard = function addCard(columnId, cardTitle) {\n    // const newCard = {\n    //   id: uuidv4(),\n    //   cardTitle,\n    //   note: '',\n    //   isCardCompleted: false,\n    //   isArchived: false,\n    //   checklists: [],\n    //   activities: [],\n    //   dueDate: undefined,\n    //   createdAt: new Date(),\n    //   updatedAt: new Date(),\n    // };\n    fetch(\"/api/add-card\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        columnId: columnId,\n        cardTitle: cardTitle\n      })\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      if (data.success) {\n        console.log(data);\n        state.columns[columnId].cards.push(data.data);\n        setState(_objectSpread({}, state));\n      } else {}\n    })[\"catch\"](function (err) {\n      console.error(\"Something wrong happened while getting a route:\".concat(err.message));\n    }); // addActivity(\n    //   columnId,\n    //   newCard.id,\n    //   `A card with title '${cardTitle}' is created in '${state.columns[columnId].title}'`\n    // );\n    // updateDate(columnId, '');\n  };\n\n  var completeCard = function completeCard(columnId, cardId) {\n    var completeCard = {};\n    state.columns[columnId].cards.map(function (card, index) {\n      if (card._id === cardId) {\n        card.isCardCompleted = true;\n        completeCard = card;\n        state.columns[columnId].cards.splice(index, 1);\n      }\n    });\n    state.columns[columnId].cards.push(completeCard);\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, \"Card is completed\");\n    setState(_objectSpread({}, state));\n  };\n\n  var updateColumnTitle = function updateColumnTitle(_id, title) {\n    fetch(\"/api/update-column-title\", {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        _id: _id,\n        title: title\n      })\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      if (data.success) {\n        state.columns[_id].title = title;\n        state.columns[_id].updatedAt = new Date();\n        setState(_objectSpread({}, state));\n        handleSnackbar(\"Column title is updated\", 'info');\n      } else {\n        handleSnackbar(\"Failed to update a column title\", 'error');\n      }\n    })[\"catch\"](function (err) {\n      console.error(\"Something wrong happened while getting a route:\".concat(err.message));\n      handleSnackbar(\"Failed to update a column title\", 'error');\n    });\n  };\n\n  var updateCardTitle = function updateCardTitle(columnId, cardId, cardTitle) {\n    state.columns[columnId].cards.map(function (card) {\n      if (card.id === cardId) {\n        card.cardTitle = cardTitle;\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, \"Card title is changed to \".concat(cardTitle));\n    setState(_objectSpread({}, state));\n  };\n\n  var updateCardNote = function updateCardNote(columnId, cardId, note) {\n    state.columns[columnId].cards.map(function (card) {\n      if (card.id === cardId) {\n        card.note = note;\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, \"Card note is changed to ||\".concat(note));\n    setState(_objectSpread({}, state));\n  };\n\n  var deleteColumn = function deleteColumn(_id) {\n    var title = state.columns[_id].title;\n    fetch(\"/api/delete-column\", {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        _id: _id\n      })\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      if (data.success) {\n        delete state.columns[_id];\n        state.columnOrder.splice(state.columnOrder.indexOf(_id), 1);\n        setState(_objectSpread({}, state));\n        handleSnackbar(\"'\".concat(title, \"' is deleted\"), 'error');\n      } else {\n        handleSnackbar(\"Failed to delete a column\", 'warning');\n      }\n    })[\"catch\"](function (err) {\n      console.error(\"Something wrong happened while getting a route:\".concat(err.message));\n    });\n  };\n\n  var deleteCard = function deleteCard(columnId, cardId) {\n    state.columns[columnId].cards.map(function (card, index) {\n      if (card.id === cardId) {\n        state.columns[columnId].cards.splice(index, 1);\n      }\n    });\n    updateDate(columnId, cardId);\n    handleSnackbar('A card is deleted', 'error');\n    setState(_objectSpread({}, state));\n  };\n\n  var archiveCard = function archiveCard(columnId, cardId) {\n    var tempCard = {};\n    state.columns[columnId].cards.map(function (card, index) {\n      if (card.id === cardId) {\n        card.isArchived = true;\n        tempCard = card;\n        state.columns[columnId].cards.splice(index, 1);\n      }\n    });\n    updateDate(columnId, cardId);\n    state.archive.cards.push(tempCard);\n    addActivity('archive', cardId, \"Card is archived\");\n    setState(_objectSpread({}, state));\n  };\n\n  var onDragEnd = function onDragEnd(result) {\n    var _objectSpread3;\n\n    if (!result.destination) {\n      return;\n    }\n\n    if (result.type === 'column') {\n      var columnOrder = reorderColumn(state.columnOrder, result.source.index, result.destination.index);\n      handleSnackbar(\"'\".concat(state.columns[state.columnOrder[result.source.index]].title, \"' and '\").concat(state.columns[state.columnOrder[result.destination.index]].title, \"' are reordered\"), 'success');\n      setState(_objectSpread(_objectSpread({}, state), {}, {\n        columnOrder: columnOrder\n      }));\n      return;\n    }\n\n    if (result.source.droppableId === result.destination.droppableId) {\n      var column = state.columns[result.source.droppableId];\n      var cards = reorderCards(column.cards, result.source.index, result.destination.index);\n\n      var _newState = _objectSpread(_objectSpread({}, state), {}, {\n        columns: _objectSpread(_objectSpread({}, state.columns), {}, _defineProperty({}, column._id, _objectSpread(_objectSpread({}, column), {}, {\n          cards: cards\n        })))\n      });\n\n      setState(_newState);\n      handleSnackbar(\"A card is reordered in'\".concat(column.title, \"'\"), 'success');\n      return;\n    }\n\n    var sourceColumn = state.columns[result.source.droppableId];\n    var destinationColumn = state.columns[result.destination.droppableId];\n    var card = sourceColumn.cards[result.source.index];\n\n    var newSourceColumn = _objectSpread(_objectSpread({}, sourceColumn), {}, {\n      cards: _toConsumableArray(sourceColumn.cards)\n    });\n\n    newSourceColumn.cards.splice(result.source.index, 1);\n\n    var newDestinationColumn = _objectSpread(_objectSpread({}, destinationColumn), {}, {\n      cards: _toConsumableArray(destinationColumn.cards)\n    });\n\n    newDestinationColumn.cards.splice(result.destination.index, 0, card);\n\n    var newState = _objectSpread(_objectSpread({}, state), {}, {\n      columns: _objectSpread(_objectSpread({}, state.columns), {}, (_objectSpread3 = {}, _defineProperty(_objectSpread3, newSourceColumn._id, newSourceColumn), _defineProperty(_objectSpread3, newDestinationColumn._id, newDestinationColumn), _objectSpread3))\n    });\n\n    handleSnackbar(\"A card is moved from '\".concat(newSourceColumn.title, \"' to '\").concat(newDestinationColumn.title, \"'\"), 'success');\n    setState(newState);\n  };\n\n  var getItemStyle = function getItemStyle(isDragging, draggableStyle) {\n    return _objectSpread({\n      display: 'flex',\n      flexDirection: 'row'\n    }, draggableStyle);\n  };\n\n  var reorderCards = function reorderCards(list, startIndex, endIndex) {\n    var result = Array.from(list);\n\n    var _result$splice = result.splice(startIndex, 1),\n        _result$splice2 = _slicedToArray(_result$splice, 1),\n        removed = _result$splice2[0];\n\n    result.splice(endIndex, 0, removed);\n    return result;\n  };\n\n  var reorderColumn = function reorderColumn(list, startIndex, endIndex) {\n    var result = Array.from(list);\n\n    var _result$splice3 = result.splice(startIndex, 1),\n        _result$splice4 = _slicedToArray(_result$splice3, 1),\n        removed = _result$splice4[0];\n\n    result.splice(endIndex, 0, removed);\n    return result;\n  };\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      open = _React$useState2[0],\n      setOpen = _React$useState2[1];\n\n  var setCardForOpen = function setCardForOpen(columnId, cardId) {\n    if (columnId === 'archive') {\n      var card = state.archive.cards.filter(function (card) {\n        return card.id === cardId;\n      });\n      setCurrentCard(card[0]);\n      setCurrentColumn(state.archive);\n    } else {\n      var _card = state.columns[columnId].cards.filter(function (card) {\n        return card.id === cardId;\n      });\n\n      setCurrentCard(_card[0]);\n      setCurrentColumn(state.columns[columnId]);\n    }\n  };\n\n  var handleModalClose = function handleModalClose() {\n    setOpen(false);\n  };\n\n  var addChecklist = function addChecklist(columnId, cardId, checklist) {\n    state.columns[columnId].cards.map(function (card) {\n      if (card.id === cardId) {\n        card.checklists.push({\n          id: uuidv4(),\n          checklist: checklist,\n          isChecked: false,\n          date: new Date()\n        });\n      }\n    });\n    addActivity(columnId, cardId, \"\".concat(checklist, \" is added to the checklist\"));\n    updateDate(columnId, cardId);\n    setState(_objectSpread({}, state));\n  };\n\n  var updateDate = function updateDate(columnId, cardId) {\n    if (cardId) {\n      state.columns[columnId].cards.map(function (card) {\n        if (card.id === cardId) {\n          card.updatedAt = new Date();\n        }\n      });\n    }\n\n    state.columns[columnId].updatedAt = new Date();\n    setState(_objectSpread({}, state));\n  };\n\n  var updateChecklist = function updateChecklist(columnId, cardId, checklistId, checklistContent) {\n    state.columns[columnId].cards.map(function (card) {\n      if (card.id === cardId) {\n        card.checklists.map(function (checklist) {\n          if (checklist.id === checklistId) {\n            checklist.checklist = checklistContent;\n          }\n        });\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, \"A checklist is updated to \".concat(checklistContent));\n    setState(_objectSpread({}, state));\n  };\n\n  var completeChecklist = function completeChecklist(columnId, cardId, checklistId, isChecked) {\n    state.columns[columnId].cards.map(function (card) {\n      if (card.id === cardId) {\n        card.checklists.map(function (checklist) {\n          if (checklist.id === checklistId) {\n            checklist.isChecked = isChecked;\n          }\n        });\n      }\n    });\n    updateDate(columnId, cardId);\n    if (isChecked) addActivity(columnId, cardId, \"A checklist is completed\");else addActivity(columnId, cardId, \"A checklist is changed to incomplete\");\n    setState(_objectSpread({}, state));\n  };\n\n  var deleteChecklist = function deleteChecklist(columnId, cardId, checklistId) {\n    state.columns[columnId].cards.map(function (card) {\n      if (card.id === cardId) {\n        card.checklists = card.checklists.filter(function (checklist) {\n          return checklist.id !== checklistId;\n        });\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, \"A checklist is deleted\");\n    setState(_objectSpread({}, state));\n  };\n\n  var convertDate = function convertDate(date) {\n    var month = date.toString().split(' ')[1];\n    var day = date.toString().split(' ')[2];\n    var year = date.toString().split(' ')[3];\n    return \"\".concat(month, \" \").concat(day, \", \").concat(year);\n  };\n\n  var setDueDate = function setDueDate(columnId, cardId, date) {\n    state.columns[columnId].cards.map(function (card) {\n      if (card.id === cardId) {\n        card.dueDate = new Date(date);\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, \"A due date is set to \".concat(convertDate(date)));\n    setState(_objectSpread({}, state));\n  };\n\n  var addActivity = function addActivity(columnId, cardId, activity) {\n    if (columnId === 'archive') {\n      state.archive.cards.map(function (card) {\n        if (card.id === cardId) {\n          card.activities.unshift({\n            id: uuidv4(),\n            activity: activity,\n            createdAt: new Date()\n          });\n        }\n      });\n    } else {\n      state.columns[columnId].cards.map(function (card) {\n        if (card.id === cardId) {\n          card.activities.unshift({\n            id: uuidv4(),\n            activity: activity,\n            createdAt: new Date()\n          });\n        }\n      });\n    }\n\n    if (activity.toLowerCase().includes('archive')) {\n      handleSnackbar(activity, 'warning');\n    } else {\n      handleSnackbar(activity, 'info');\n    }\n\n    setState(_objectSpread({}, state));\n  };\n\n  var changeProjectName = function changeProjectName(projectName) {\n    handleSnackbar(\"Project name is changed to '\".concat(projectName, \"'\"), 'info');\n    props.setProjectName(projectName);\n  };\n\n  var handleSnackbar = function handleSnackbar(message, variant) {\n    enqueueSnackbar(message, {\n      variant: variant\n    });\n  };\n\n  return __jsx(React.Fragment, null, isLoadingCompleted && __jsx(React.Fragment, null, __jsx(Top, {\n    _id: props._id,\n    setProjectName: changeProjectName,\n    projectName: props.projectName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 658,\n      columnNumber: 11\n    }\n  }), __jsx(\"div\", {\n    className: \"board\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 663,\n      columnNumber: 11\n    }\n  }, __jsx(DragDropContext, {\n    onDragEnd: onDragEnd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 664,\n      columnNumber: 13\n    }\n  }, __jsx(Droppable, {\n    direction: \"horizontal\",\n    droppableId: \"all-droppables\",\n    type: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 665,\n      columnNumber: 15\n    }\n  }, function (provided, snapshot) {\n    return __jsx(\"div\", _extends({\n      ref: provided.innerRef\n    }, provided.droppableProps, {\n      style: getItemStyle(snapshot.isDragging, provided.droppableProps.style),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 671,\n        columnNumber: 19\n      }\n    }), state.columnOrder.map(function (columnId, index) {\n      return __jsx(Column, {\n        key: columnId,\n        column: state.columns[columnId],\n        index: index,\n        addCard: addCard,\n        setOpen: setOpen,\n        setCardForOpen: setCardForOpen,\n        updateColumnTitle: updateColumnTitle,\n        deleteColumn: deleteColumn // onDragEnd={onDragEnd}\n        ,\n        convertDate: convertDate,\n        open: true,\n        projectName: props.projectName,\n        handleModalClose: handleModalClose,\n        addChecklist: addChecklist,\n        updateChecklist: updateChecklist,\n        addActivity: addActivity,\n        updateDate: updateDate,\n        updateCardTitle: updateCardTitle,\n        updateCardNote: updateCardNote,\n        completeChecklist: completeChecklist,\n        deleteChecklist: deleteChecklist,\n        setDueDate: setDueDate,\n        completeCard: completeCard,\n        deleteCard: deleteCard,\n        archiveCard: archiveCard,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 682,\n          columnNumber: 27\n        }\n      });\n    }), provided.placeholder);\n  })), state.archive.cards.length > 0 && __jsx(Archive, {\n    index: 0 // onDragEnd={onDragEnd}\n    ,\n    column: state.archive,\n    setCardForOpen: setCardForOpen,\n    convertDate: convertDate,\n    setOpen: setOpen,\n    open: true,\n    projectName: props.projectName,\n    handleModalClose: handleModalClose,\n    updateColumnTitle: updateColumnTitle,\n    deleteColumn: deleteColumn,\n    addChecklist: addChecklist,\n    updateChecklist: updateChecklist,\n    addActivity: addActivity,\n    updateDate: updateDate,\n    updateCardTitle: updateCardTitle,\n    updateCardNote: updateCardNote,\n    completeChecklist: completeChecklist,\n    deleteChecklist: deleteChecklist,\n    setDueDate: setDueDate,\n    completeCard: completeCard,\n    deleteCard: deleteCard,\n    archiveCard: archiveCard,\n    addCard: addCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 718,\n      columnNumber: 15\n    }\n  }), __jsx(AddSection, {\n    colorIndex: colorIndex,\n    addSection: addSection,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 745,\n      columnNumber: 13\n    }\n  })), open && __jsx(CardModal, {\n    open: true,\n    projectName: props.projectName,\n    currentColumn: currentColumn,\n    handleModalClose: handleModalClose,\n    currentCard: currentCard,\n    addChecklist: addChecklist,\n    updateChecklist: updateChecklist,\n    addActivity: addActivity,\n    updateDate: updateDate,\n    updateCardTitle: updateCardTitle,\n    updateCardNote: updateCardNote,\n    completeChecklist: completeChecklist,\n    deleteChecklist: deleteChecklist,\n    setDueDate: setDueDate,\n    convertDate: convertDate,\n    completeCard: completeCard,\n    deleteCard: deleteCard,\n    archiveCard: archiveCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 748,\n      columnNumber: 13\n    }\n  })));\n}\n\n_s(Board, \"KXF1ECkBPmasxhZk0Un4K8OkIHc=\", false, function () {\n  return [useSnackbar];\n});\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/heegupark/Desktop/Workspace/MyProject/omega-kanban/components/board.tsx"],"names":["React","useState","useEffect","DragDropContext","Droppable","v4","uuidv4","Top","Column","AddSection","Archive","CardModal","useSnackbar","Board","props","enqueueSnackbar","columns","columnOrder","archive","_id","title","cards","colorIndex","createdAt","Date","updatedAt","state","setState","setColorIndex","currentCard","setCurrentCard","currentColumn","setCurrentColumn","isLoadingCompleted","setIsLoadingCompleted","getColumns","fetch","method","headers","body","JSON","stringify","then","res","json","data","success","map","column","push","length","err","console","error","message","addSection","sectionTitle","card","projectId","handleSnackbar","addCard","columnId","cardTitle","log","completeCard","cardId","index","isCardCompleted","splice","updateDate","addActivity","updateColumnTitle","updateCardTitle","id","updateCardNote","note","deleteColumn","indexOf","deleteCard","archiveCard","tempCard","isArchived","onDragEnd","result","destination","type","reorderColumn","source","droppableId","reorderCards","newState","sourceColumn","destinationColumn","newSourceColumn","newDestinationColumn","getItemStyle","isDragging","draggableStyle","display","flexDirection","list","startIndex","endIndex","Array","from","removed","open","setOpen","setCardForOpen","filter","handleModalClose","addChecklist","checklist","checklists","isChecked","date","updateChecklist","checklistId","checklistContent","completeChecklist","deleteChecklist","convertDate","month","toString","split","day","year","setDueDate","dueDate","activity","activities","unshift","toLowerCase","includes","changeProjectName","projectName","setProjectName","variant","provided","snapshot","innerRef","droppableProps","style","placeholder"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { v4 as uuidv4 } from 'uuid';\nimport Top from './top';\nimport Column from './column';\nimport AddSection from './add-section';\nimport Archive from './archive';\nimport CardModal from './card-modal';\nimport { VariantType, useSnackbar } from 'notistack';\nimport IMainProps from './interfaces/imainprops';\nimport IColumns from './interfaces/icolumns';\nimport ICard from './interfaces/icard';\nimport IColumnItem from './interfaces/icolumnitem';\nimport IChecklist from './interfaces/ichecklist';\nimport ISectionData from './interfaces/isectiondata';\n\nfunction Board(props: IMainProps) {\n  const { enqueueSnackbar } = useSnackbar();\n  // const [state, setState] = useState<IColumns>({\n  //   columns: {\n  //     'column-0': {\n  //       id: 'column-0',\n  //       title: 'Plan',\n  //       cards: [\n  //         {\n  //           id: uuidv4(),\n  //           cardTitle: 'Create HTML skeleton',\n  //           note: '',\n  //           isCardCompleted: false,\n  //           isArchived: false,\n  //           checklists: [],\n  //           activities: [],\n  //           dueDate: new Date(2020, 9, 11),\n  //           createdAt: new Date(2020, 8, 11),\n  //           updatedAt: new Date(2020, 8, 11),\n  //         },\n  //       ],\n  //       colorIndex: 0,\n  //       createdAt: new Date(2020, 8, 1),\n  //       updatedAt: new Date(2020, 8, 11),\n  //     },\n  //     'column-1': {\n  //       id: 'column-1',\n  //       title: 'Progress',\n  //       cards: [],\n  //       colorIndex: 1,\n  //       createdAt: new Date(2020, 8, 2),\n  //       updatedAt: new Date(2020, 8, 2),\n  //     },\n  //     'column-2': {\n  //       id: 'column-2',\n  //       title: 'Complete',\n  //       cards: [],\n  //       colorIndex: 2,\n  //       createdAt: new Date(2020, 8, 3),\n  //       updatedAt: new Date(2020, 8, 3),\n  //     },\n  //   },\n  //   columnOrder: ['column-0', 'column-1', 'column-2'],\n  //   archive: {\n  //     id: 'archive',\n  //     title: 'Archive',\n  //     cards: [],\n  //     colorIndex: 0,\n  //     createdAt: new Date(),\n  //     updatedAt: new Date(),\n  //   },\n  // });\n\n  const [state, setState] = useState<IColumns>({\n    columns: {},\n    columnOrder: [],\n    archive: {\n      _id: 'archive',\n      title: 'Archive',\n      cards: [],\n      colorIndex: 0,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    },\n  });\n\n  const [colorIndex, setColorIndex] = useState(0);\n  const [currentCard, setCurrentCard] = useState<ICard>();\n  const [currentColumn, setCurrentColumn] = useState<IColumnItem>();\n  const [isLoadingCompleted, setIsLoadingCompleted] = useState(false);\n  // useEffect(() => {\n  //   setColorIndex(state.columnOrder.length - 1);\n  // }, []);\n\n  useEffect(() => {\n    getColumns(props._id);\n  }, []);\n\n  const getColumns = (_id: String) => {\n    fetch(`/api/get-columns`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        _id,\n      }),\n    })\n      .then((res) => res.json())\n      .then((data: any) => {\n        if (data.success) {\n          state.columnOrder = [];\n          data.data.map((column: IColumnItem) => {\n            state.columns[column._id] = column;\n            state.columnOrder.push(column._id);\n            setState({\n              ...state,\n            });\n          });\n          setColorIndex(data.data.length - 1);\n          setIsLoadingCompleted(true);\n        } else {\n        }\n      })\n      .catch((err) => {\n        console.error(\n          `Something wrong happened while getting a route:${err.message}`\n        );\n      });\n  };\n\n  const addSection = (sectionTitle: string, card: ICard | undefined) => {\n    // const newSection: ISection = {\n    //   _id: uuidv4(),\n    //   title: sectionTitle,\n    //   cards: [],\n    //   colorIndex: colorIndex + 1,\n    //   createdAt: new Date(),\n    //   updatedAt: new Date(),\n    // };\n    // if (card) {\n    //   newSection.cards.push(card);\n    // }\n\n    fetch('/api/add-column', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        projectId: props._id,\n        title: sectionTitle,\n        colorIndex: colorIndex + 1,\n      }),\n    })\n      .then((res) => res.json())\n      .then((data: ISectionData) => {\n        if (data.success) {\n          state.columns[data.data._id] = data.data;\n          state.columnOrder.push(data.data._id);\n          setColorIndex(colorIndex + 1);\n          setState({\n            ...state,\n          });\n          handleSnackbar(`'${sectionTitle}' is created`, 'success');\n        } else {\n          handleSnackbar(`Failed to add a column`, 'error');\n        }\n      })\n      .catch((err) => {\n        console.error(\n          `Something wrong happened while adding a column:${err.message}`\n        );\n      });\n  };\n\n  const addCard = (columnId: string, cardTitle: string) => {\n    // const newCard = {\n    //   id: uuidv4(),\n    //   cardTitle,\n    //   note: '',\n    //   isCardCompleted: false,\n    //   isArchived: false,\n    //   checklists: [],\n    //   activities: [],\n    //   dueDate: undefined,\n    //   createdAt: new Date(),\n    //   updatedAt: new Date(),\n    // };\n    fetch(`/api/add-card`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        columnId,\n        cardTitle,\n      }),\n    })\n      .then((res) => res.json())\n      .then((data: { success: boolean; data: ICard }) => {\n        if (data.success) {\n          console.log(data);\n          state.columns[columnId].cards.push(data.data);\n          setState({\n            ...state,\n          });\n        } else {\n        }\n      })\n      .catch((err) => {\n        console.error(\n          `Something wrong happened while getting a route:${err.message}`\n        );\n      });\n    // addActivity(\n    //   columnId,\n    //   newCard.id,\n    //   `A card with title '${cardTitle}' is created in '${state.columns[columnId].title}'`\n    // );\n    // updateDate(columnId, '');\n  };\n\n  const completeCard = (columnId: string, cardId: string) => {\n    let completeCard: ICard = {} as ICard;\n    state.columns[columnId].cards.map((card: ICard, index: number) => {\n      if (card._id === cardId) {\n        card.isCardCompleted = true;\n        completeCard = card;\n        state.columns[columnId].cards.splice(index, 1);\n      }\n    });\n    state.columns[columnId].cards.push(completeCard);\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `Card is completed`);\n    setState({\n      ...state,\n    });\n  };\n\n  const updateColumnTitle = (_id: string, title: string) => {\n    fetch(`/api/update-column-title`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        _id,\n        title,\n      }),\n    })\n      .then((res) => res.json())\n      .then((data: { success: boolean }) => {\n        if (data.success) {\n          state.columns[_id].title = title;\n          state.columns[_id].updatedAt = new Date();\n          setState({\n            ...state,\n          });\n          handleSnackbar(`Column title is updated`, 'info');\n        } else {\n          handleSnackbar(`Failed to update a column title`, 'error');\n        }\n      })\n      .catch((err) => {\n        console.error(\n          `Something wrong happened while getting a route:${err.message}`\n        );\n        handleSnackbar(`Failed to update a column title`, 'error');\n      });\n  };\n\n  const updateCardTitle = (\n    columnId: string,\n    cardId: string,\n    cardTitle: string\n  ) => {\n    state.columns[columnId].cards.map((card: ICard) => {\n      if (card.id === cardId) {\n        card.cardTitle = cardTitle;\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `Card title is changed to ${cardTitle}`);\n    setState({\n      ...state,\n    });\n  };\n\n  const updateCardNote = (columnId: string, cardId: string, note: string) => {\n    state.columns[columnId].cards.map((card: ICard) => {\n      if (card.id === cardId) {\n        card.note = note;\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `Card note is changed to ||${note}`);\n    setState({\n      ...state,\n    });\n  };\n\n  const deleteColumn = (_id: string) => {\n    const title = state.columns[_id].title;\n    fetch(`/api/delete-column`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        _id,\n      }),\n    })\n      .then((res) => res.json())\n      .then((data: { success: boolean; message: string }) => {\n        if (data.success) {\n          delete state.columns[_id];\n          state.columnOrder.splice(state.columnOrder.indexOf(_id), 1);\n          setState({\n            ...state,\n          });\n          handleSnackbar(`'${title}' is deleted`, 'error');\n        } else {\n          handleSnackbar(`Failed to delete a column`, 'warning');\n        }\n      })\n      .catch((err) => {\n        console.error(\n          `Something wrong happened while getting a route:${err.message}`\n        );\n      });\n  };\n\n  const deleteCard = (columnId: string, cardId: string) => {\n    state.columns[columnId].cards.map((card: ICard, index: number) => {\n      if (card.id === cardId) {\n        state.columns[columnId].cards.splice(index, 1);\n      }\n    });\n    updateDate(columnId, cardId);\n    handleSnackbar('A card is deleted', 'error');\n    setState({\n      ...state,\n    });\n  };\n\n  const archiveCard = (columnId: string, cardId: string) => {\n    let tempCard: ICard = {} as ICard;\n    state.columns[columnId].cards.map((card: ICard, index: number) => {\n      if (card.id === cardId) {\n        card.isArchived = true;\n        tempCard = card;\n        state.columns[columnId].cards.splice(index, 1);\n      }\n    });\n    updateDate(columnId, cardId);\n    state.archive.cards.push(tempCard);\n    addActivity('archive', cardId, `Card is archived`);\n    setState({\n      ...state,\n    });\n  };\n\n  const onDragEnd = (result: any) => {\n    if (!result.destination) {\n      return;\n    }\n\n    if (result.type === 'column') {\n      const columnOrder: Array<string> = reorderColumn(\n        state.columnOrder,\n        result.source.index,\n        result.destination.index\n      );\n      handleSnackbar(\n        `'${\n          state.columns[state.columnOrder[result.source.index]].title\n        }' and '${\n          state.columns[state.columnOrder[result.destination.index]].title\n        }' are reordered`,\n        'success'\n      );\n      setState({\n        ...state,\n        columnOrder,\n      });\n      return;\n    }\n\n    if (result.source.droppableId === result.destination.droppableId) {\n      const column = state.columns[result.source.droppableId];\n      const cards = reorderCards(\n        column.cards,\n        result.source.index,\n        result.destination.index\n      );\n\n      const newState = {\n        ...state,\n        columns: {\n          ...state.columns,\n          [column._id]: {\n            ...column,\n            cards,\n          },\n        },\n      };\n      setState(newState);\n      handleSnackbar(`A card is reordered in'${column.title}'`, 'success');\n      return;\n    }\n\n    const sourceColumn = state.columns[result.source.droppableId];\n    const destinationColumn = state.columns[result.destination.droppableId];\n    const card = sourceColumn.cards[result.source.index];\n\n    const newSourceColumn = {\n      ...sourceColumn,\n      cards: [...sourceColumn.cards],\n    };\n    newSourceColumn.cards.splice(result.source.index, 1);\n\n    const newDestinationColumn = {\n      ...destinationColumn,\n      cards: [...destinationColumn.cards],\n    };\n    newDestinationColumn.cards.splice(result.destination.index, 0, card);\n\n    const newState = {\n      ...state,\n      columns: {\n        ...state.columns,\n        [newSourceColumn._id]: newSourceColumn,\n        [newDestinationColumn._id]: newDestinationColumn,\n      },\n    };\n    handleSnackbar(\n      `A card is moved from '${newSourceColumn.title}' to '${newDestinationColumn.title}'`,\n      'success'\n    );\n    setState(newState);\n  };\n\n  const getItemStyle = (isDragging: boolean, draggableStyle: any) => ({\n    display: 'flex',\n    flexDirection: 'row',\n    ...draggableStyle,\n  });\n\n  const reorderCards = (\n    list: Array<ICard>,\n    startIndex: number,\n    endIndex: number\n  ) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    return result;\n  };\n\n  const reorderColumn = (\n    list: Array<string>,\n    startIndex: number,\n    endIndex: number\n  ) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    return result;\n  };\n\n  const [open, setOpen] = React.useState(false);\n  const setCardForOpen = (columnId: string, cardId: string) => {\n    if (columnId === 'archive') {\n      const card = state.archive.cards.filter(\n        (card: ICard) => card.id === cardId\n      );\n      setCurrentCard(card[0]);\n      setCurrentColumn(state.archive);\n    } else {\n      const card = state.columns[columnId].cards.filter(\n        (card: ICard) => card.id === cardId\n      );\n      setCurrentCard(card[0]);\n      setCurrentColumn(state.columns[columnId]);\n    }\n  };\n\n  const handleModalClose = () => {\n    setOpen(false);\n  };\n\n  const addChecklist = (\n    columnId: string,\n    cardId: string,\n    checklist: string\n  ) => {\n    state.columns[columnId].cards.map((card: ICard) => {\n      if (card.id === cardId) {\n        card.checklists.push({\n          id: uuidv4(),\n          checklist,\n          isChecked: false,\n          date: new Date(),\n        });\n      }\n    });\n    addActivity(columnId, cardId, `${checklist} is added to the checklist`);\n    updateDate(columnId, cardId);\n    setState({\n      ...state,\n    });\n  };\n\n  const updateDate = (columnId: string, cardId: string) => {\n    if (cardId) {\n      state.columns[columnId].cards.map((card: ICard) => {\n        if (card.id === cardId) {\n          card.updatedAt = new Date();\n        }\n      });\n    }\n    state.columns[columnId].updatedAt = new Date();\n    setState({\n      ...state,\n    });\n  };\n\n  const updateChecklist = (\n    columnId: string,\n    cardId: string,\n    checklistId: string,\n    checklistContent: string\n  ) => {\n    state.columns[columnId].cards.map((card: ICard) => {\n      if (card.id === cardId) {\n        card.checklists.map((checklist: IChecklist) => {\n          if (checklist.id === checklistId) {\n            checklist.checklist = checklistContent;\n          }\n        });\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(\n      columnId,\n      cardId,\n      `A checklist is updated to ${checklistContent}`\n    );\n    setState({\n      ...state,\n    });\n  };\n\n  const completeChecklist = (\n    columnId: string,\n    cardId: string,\n    checklistId: string,\n    isChecked: boolean\n  ) => {\n    state.columns[columnId].cards.map((card: ICard) => {\n      if (card.id === cardId) {\n        card.checklists.map((checklist: IChecklist) => {\n          if (checklist.id === checklistId) {\n            checklist.isChecked = isChecked;\n          }\n        });\n      }\n    });\n    updateDate(columnId, cardId);\n    if (isChecked) addActivity(columnId, cardId, `A checklist is completed`);\n    else addActivity(columnId, cardId, `A checklist is changed to incomplete`);\n    setState({\n      ...state,\n    });\n  };\n\n  const deleteChecklist = (\n    columnId: string,\n    cardId: string,\n    checklistId: string\n  ) => {\n    state.columns[columnId].cards.map((card: ICard) => {\n      if (card.id === cardId) {\n        card.checklists = card.checklists.filter(\n          (checklist: IChecklist) => checklist.id !== checklistId\n        );\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `A checklist is deleted`);\n    setState({\n      ...state,\n    });\n  };\n\n  const convertDate = (date: Date) => {\n    const month = date.toString().split(' ')[1];\n    const day = date.toString().split(' ')[2];\n    const year = date.toString().split(' ')[3];\n    return `${month} ${day}, ${year}`;\n  };\n\n  const setDueDate = (columnId: string, cardId: string, date: Date) => {\n    state.columns[columnId].cards.map((card: ICard) => {\n      if (card.id === cardId) {\n        card.dueDate = new Date(date);\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `A due date is set to ${convertDate(date)}`);\n    setState({\n      ...state,\n    });\n  };\n\n  const addActivity = (columnId: string, cardId: string, activity: string) => {\n    if (columnId === 'archive') {\n      state.archive.cards.map((card: ICard) => {\n        if (card.id === cardId) {\n          card.activities.unshift({\n            id: uuidv4(),\n            activity,\n            createdAt: new Date(),\n          });\n        }\n      });\n    } else {\n      state.columns[columnId].cards.map((card: ICard) => {\n        if (card.id === cardId) {\n          card.activities.unshift({\n            id: uuidv4(),\n            activity,\n            createdAt: new Date(),\n          });\n        }\n      });\n    }\n    if (activity.toLowerCase().includes('archive')) {\n      handleSnackbar(activity, 'warning');\n    } else {\n      handleSnackbar(activity, 'info');\n    }\n    setState({\n      ...state,\n    });\n  };\n\n  const changeProjectName = (projectName: string) => {\n    handleSnackbar(`Project name is changed to '${projectName}'`, 'info');\n    props.setProjectName(projectName);\n  };\n\n  const handleSnackbar = (message: string, variant: VariantType) => {\n    enqueueSnackbar(message, { variant });\n  };\n\n  return (\n    <>\n      {isLoadingCompleted && (\n        <>\n          <Top\n            _id={props._id}\n            setProjectName={changeProjectName}\n            projectName={props.projectName}\n          />\n          <div className=\"board\">\n            <DragDropContext onDragEnd={onDragEnd}>\n              <Droppable\n                direction=\"horizontal\"\n                droppableId=\"all-droppables\"\n                type=\"column\"\n              >\n                {(provided: any, snapshot: any) => (\n                  <div\n                    ref={provided.innerRef}\n                    {...provided.droppableProps}\n                    style={getItemStyle(\n                      snapshot.isDragging,\n                      provided.droppableProps.style\n                    )}\n                  >\n                    {state.columnOrder.map(\n                      (columnId: string, index: number) => {\n                        return (\n                          <Column\n                            key={columnId}\n                            column={state.columns[columnId]}\n                            index={index}\n                            addCard={addCard}\n                            setOpen={setOpen}\n                            setCardForOpen={setCardForOpen}\n                            updateColumnTitle={updateColumnTitle}\n                            deleteColumn={deleteColumn}\n                            // onDragEnd={onDragEnd}\n                            convertDate={convertDate}\n                            open={true}\n                            projectName={props.projectName}\n                            handleModalClose={handleModalClose}\n                            addChecklist={addChecklist}\n                            updateChecklist={updateChecklist}\n                            addActivity={addActivity}\n                            updateDate={updateDate}\n                            updateCardTitle={updateCardTitle}\n                            updateCardNote={updateCardNote}\n                            completeChecklist={completeChecklist}\n                            deleteChecklist={deleteChecklist}\n                            setDueDate={setDueDate}\n                            completeCard={completeCard}\n                            deleteCard={deleteCard}\n                            archiveCard={archiveCard}\n                          />\n                        );\n                      }\n                    )}\n                    {provided.placeholder}\n                  </div>\n                )}\n              </Droppable>\n            </DragDropContext>\n            {state.archive.cards.length > 0 && (\n              <Archive\n                index={0}\n                // onDragEnd={onDragEnd}\n                column={state.archive}\n                setCardForOpen={setCardForOpen}\n                convertDate={convertDate}\n                setOpen={setOpen}\n                open={true}\n                projectName={props.projectName}\n                handleModalClose={handleModalClose}\n                updateColumnTitle={updateColumnTitle}\n                deleteColumn={deleteColumn}\n                addChecklist={addChecklist}\n                updateChecklist={updateChecklist}\n                addActivity={addActivity}\n                updateDate={updateDate}\n                updateCardTitle={updateCardTitle}\n                updateCardNote={updateCardNote}\n                completeChecklist={completeChecklist}\n                deleteChecklist={deleteChecklist}\n                setDueDate={setDueDate}\n                completeCard={completeCard}\n                deleteCard={deleteCard}\n                archiveCard={archiveCard}\n                addCard={addCard}\n              />\n            )}\n            <AddSection colorIndex={colorIndex} addSection={addSection} />\n          </div>\n          {open && (\n            <CardModal\n              open={true}\n              projectName={props.projectName}\n              currentColumn={currentColumn}\n              handleModalClose={handleModalClose}\n              currentCard={currentCard}\n              addChecklist={addChecklist}\n              updateChecklist={updateChecklist}\n              addActivity={addActivity}\n              updateDate={updateDate}\n              updateCardTitle={updateCardTitle}\n              updateCardNote={updateCardNote}\n              completeChecklist={completeChecklist}\n              deleteChecklist={deleteChecklist}\n              setDueDate={setDueDate}\n              convertDate={convertDate}\n              completeCard={completeCard}\n              deleteCard={deleteCard}\n              archiveCard={archiveCard}\n            />\n          )}\n        </>\n      )}\n    </>\n  );\n}\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}