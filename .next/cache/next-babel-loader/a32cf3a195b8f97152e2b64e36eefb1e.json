{"ast":null,"code":"var _jsxFileName = \"/Users/heegupark/Desktop/Workspace/MyProject/omega-kanban/components/board.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport { v4 as uuidv4 } from 'uuid';\nimport Top from './top';\nimport Column from './column';\nimport AddSection from './add-section';\nimport Archive from './archive';\nimport CardModal from './card-modal';\nimport { useSnackbar } from 'notistack';\n\nfunction Board(props) {\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    columns: {\n      'column-0': {\n        id: 'column-0',\n        title: 'Plan',\n        cards: [{\n          id: uuidv4(),\n          cardTitle: 'Create HTML skeleton',\n          note: '',\n          isCardCompleted: false,\n          isArchived: false,\n          checklists: [],\n          activities: [],\n          dueDate: new Date(2020, 9, 11),\n          createdAt: new Date(2020, 8, 11),\n          updatedAt: new Date(2020, 8, 11)\n        }],\n        colorIndex: 0,\n        createdAt: new Date(2020, 8, 1),\n        updatedAt: new Date(2020, 8, 11)\n      },\n      'column-1': {\n        id: 'column-1',\n        title: 'Progress',\n        cards: [],\n        colorIndex: 1,\n        createdAt: new Date(2020, 8, 2),\n        updatedAt: new Date(2020, 8, 2)\n      },\n      'column-2': {\n        id: 'column-2',\n        title: 'Complete',\n        cards: [],\n        colorIndex: 2,\n        createdAt: new Date(2020, 8, 3),\n        updatedAt: new Date(2020, 8, 3)\n      }\n    },\n    columnOrder: ['column-0', 'column-1', 'column-2'],\n    archive: {\n      id: 'archive',\n      title: 'Archive',\n      cards: [],\n      colorIndex: 0,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    }\n  });\n  const {\n    0: colorIndex,\n    1: setColorIndex\n  } = useState(0);\n  const {\n    0: currentCard,\n    1: setCurrentCard\n  } = useState();\n  const {\n    0: currentColumn,\n    1: setCurrentColumn\n  } = useState();\n  useEffect(() => {\n    setColorIndex(state.columnOrder.length - 1);\n  }, []);\n\n  const addSection = (sectionTitle, card) => {\n    const newSection = {\n      id: uuidv4(),\n      title: sectionTitle,\n      cards: [],\n      colorIndex: colorIndex + 1,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n\n    if (card) {\n      newSection.cards.push(card);\n    }\n\n    handleSnackbar(`'${sectionTitle}' is created`, 'success');\n    setColorIndex(colorIndex + 1);\n    state.columns[newSection.id] = newSection;\n    state.columnOrder.push(newSection.id);\n    setState(_objectSpread({}, state));\n  };\n\n  const addCard = (columnId, cardTitle) => {\n    const newCard = {\n      id: uuidv4(),\n      cardTitle,\n      note: '',\n      isCardCompleted: false,\n      isArchived: false,\n      checklists: [],\n      activities: [],\n      dueDate: undefined,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    addActivity(columnId, newCard.id, `A card with title '${cardTitle}' is created in '${state.columns[columnId].title}'`);\n    updateDate(columnId, '');\n    state.columns[columnId].cards.push(newCard);\n    setState(_objectSpread({}, state));\n  };\n\n  const completeCard = (columnId, cardId) => {\n    let completeCard = {};\n    state.columns[columnId].cards.map((card, index) => {\n      if (card.id === cardId) {\n        card.isCardCompleted = true;\n        completeCard = card;\n        state.columns[columnId].cards.splice(index, 1);\n      }\n    });\n    state.columns[columnId].cards.push(completeCard);\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `Card is completed`);\n    setState(_objectSpread({}, state));\n  };\n\n  const updateSectionTitle = (columnId, sectionTitle) => {\n    state.columns[columnId].title = sectionTitle;\n    state.columns[columnId].updatedAt = new Date();\n    setState(_objectSpread({}, state));\n  };\n\n  const updateCardTitle = (columnId, cardId, cardTitle) => {\n    state.columns[columnId].cards.map(card => {\n      if (card.id === cardId) {\n        card.cardTitle = cardTitle;\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `Card title is changed to ${cardTitle}`);\n    setState(_objectSpread({}, state));\n  };\n\n  const updateCardNote = (columnId, cardId, note) => {\n    state.columns[columnId].cards.map(card => {\n      if (card.id === cardId) {\n        card.note = note;\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `Card note is changed to ||${note}`);\n    setState(_objectSpread({}, state));\n  };\n\n  const deleteColumn = id => {\n    const title = state.columns[id].title;\n    delete state.columns[id];\n    state.columnOrder.splice(state.columnOrder.indexOf(id), 1);\n    handleSnackbar(`'${title}' is deleted`, 'error');\n    setState(_objectSpread({}, state));\n  };\n\n  const deleteCard = (columnId, cardId) => {\n    state.columns[columnId].cards.map((card, index) => {\n      if (card.id === cardId) {\n        state.columns[columnId].cards.splice(index, 1);\n      }\n    });\n    updateDate(columnId, cardId);\n    handleSnackbar('A card is deleted', 'error');\n    setState(_objectSpread({}, state));\n  };\n\n  const archiveCard = (columnId, cardId) => {\n    let tempCard = {};\n    state.columns[columnId].cards.map((card, index) => {\n      if (card.id === cardId) {\n        card.isArchived = true;\n        tempCard = card;\n        state.columns[columnId].cards.splice(index, 1);\n      }\n    });\n    updateDate(columnId, cardId);\n    state.archive.cards.push(tempCard);\n    addActivity('archive', cardId, `Card is archived`);\n    setState(_objectSpread({}, state));\n  };\n\n  const onDragEnd = result => {\n    if (!result.destination) {\n      return;\n    }\n\n    if (result.type === 'column') {\n      const columnOrder = reorderColumn(state.columnOrder, result.source.index, result.destination.index);\n      handleSnackbar(`'${state.columns[state.columnOrder[result.source.index]].title}' and '${state.columns[state.columnOrder[result.destination.index]].title}' are reordered`, 'success');\n      setState(_objectSpread(_objectSpread({}, state), {}, {\n        columnOrder\n      }));\n      return;\n    }\n\n    if (result.source.droppableId === result.destination.droppableId) {\n      const column = state.columns[result.source.droppableId];\n      const cards = reorderCards(column.cards, result.source.index, result.destination.index);\n\n      const newState = _objectSpread(_objectSpread({}, state), {}, {\n        columns: _objectSpread(_objectSpread({}, state.columns), {}, {\n          [column.id]: _objectSpread(_objectSpread({}, column), {}, {\n            cards\n          })\n        })\n      });\n\n      setState(newState);\n      handleSnackbar(`A card is reordered in'${column.title}'`, 'success');\n      return;\n    }\n\n    const sourceColumn = state.columns[result.source.droppableId];\n    const destinationColumn = state.columns[result.destination.droppableId];\n    const card = sourceColumn.cards[result.source.index];\n\n    const newSourceColumn = _objectSpread(_objectSpread({}, sourceColumn), {}, {\n      cards: [...sourceColumn.cards]\n    });\n\n    newSourceColumn.cards.splice(result.source.index, 1);\n\n    const newDestinationColumn = _objectSpread(_objectSpread({}, destinationColumn), {}, {\n      cards: [...destinationColumn.cards]\n    });\n\n    newDestinationColumn.cards.splice(result.destination.index, 0, card);\n\n    const newState = _objectSpread(_objectSpread({}, state), {}, {\n      columns: _objectSpread(_objectSpread({}, state.columns), {}, {\n        [newSourceColumn.id]: newSourceColumn,\n        [newDestinationColumn.id]: newDestinationColumn\n      })\n    });\n\n    handleSnackbar(`A card is moved from '${newSourceColumn.title}' to '${newDestinationColumn.title}'`, 'success');\n    setState(newState);\n  };\n\n  const getItemStyle = (isDragging, draggableStyle) => _objectSpread({\n    display: 'flex',\n    flexDirection: 'row'\n  }, draggableStyle);\n\n  const reorderCards = (list, startIndex, endIndex) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    return result;\n  };\n\n  const reorderColumn = (list, startIndex, endIndex) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    return result;\n  };\n\n  const [open, setOpen] = React.useState(false);\n\n  const setCardForOpen = (columnId, cardId) => {\n    if (columnId === 'archive') {\n      const card = state.archive.cards.filter(card => card.id === cardId);\n      setCurrentCard(card[0]);\n      setCurrentColumn(state.archive);\n    } else {\n      const card = state.columns[columnId].cards.filter(card => card.id === cardId);\n      setCurrentCard(card[0]);\n      setCurrentColumn(state.columns[columnId]);\n    }\n  };\n\n  const handleModalClose = () => {\n    setOpen(false);\n  };\n\n  const addChecklist = (columnId, cardId, checklist) => {\n    state.columns[columnId].cards.map(card => {\n      if (card.id === cardId) {\n        card.checklists.push({\n          id: uuidv4(),\n          checklist,\n          isChecked: false,\n          date: new Date()\n        });\n      }\n    });\n    addActivity(columnId, cardId, `${checklist} is added to the checklist`);\n    updateDate(columnId, cardId);\n    setState(_objectSpread({}, state));\n  };\n\n  const updateDate = (columnId, cardId) => {\n    if (cardId) {\n      state.columns[columnId].cards.map(card => {\n        if (card.id === cardId) {\n          card.updatedAt = new Date();\n        }\n      });\n    }\n\n    state.columns[columnId].updatedAt = new Date();\n    setState(_objectSpread({}, state));\n  };\n\n  const updateChecklist = (columnId, cardId, checklistId, checklistContent) => {\n    state.columns[columnId].cards.map(card => {\n      if (card.id === cardId) {\n        card.checklists.map(checklist => {\n          if (checklist.id === checklistId) {\n            checklist.checklist = checklistContent;\n          }\n        });\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `A checklist is updated to ${checklistContent}`);\n    setState(_objectSpread({}, state));\n  };\n\n  const completeChecklist = (columnId, cardId, checklistId, isChecked) => {\n    state.columns[columnId].cards.map(card => {\n      if (card.id === cardId) {\n        card.checklists.map(checklist => {\n          if (checklist.id === checklistId) {\n            checklist.isChecked = isChecked;\n          }\n        });\n      }\n    });\n    updateDate(columnId, cardId);\n    if (isChecked) addActivity(columnId, cardId, `A checklist is completed`);else addActivity(columnId, cardId, `A checklist is changed to incomplete`);\n    setState(_objectSpread({}, state));\n  };\n\n  const deleteChecklist = (columnId, cardId, checklistId) => {\n    state.columns[columnId].cards.map(card => {\n      if (card.id === cardId) {\n        card.checklists = card.checklists.filter(checklist => checklist.id !== checklistId);\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `A checklist is deleted`);\n    setState(_objectSpread({}, state));\n  };\n\n  const convertDate = date => {\n    const month = date.toString().split(' ')[1];\n    const day = date.toString().split(' ')[2];\n    const year = date.toString().split(' ')[3];\n    return `${month} ${day}, ${year}`;\n  };\n\n  const setDueDate = (columnId, cardId, date) => {\n    state.columns[columnId].cards.map(card => {\n      if (card.id === cardId) {\n        card.dueDate = new Date(date);\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `A due date is set to ${convertDate(date)}`);\n    setState(_objectSpread({}, state));\n  };\n\n  const addActivity = (columnId, cardId, activity) => {\n    if (columnId === 'archive') {\n      state.archive.cards.map(card => {\n        if (card.id === cardId) {\n          card.activities.unshift({\n            id: uuidv4(),\n            activity,\n            createdAt: new Date()\n          });\n        }\n      });\n    } else {\n      state.columns[columnId].cards.map(card => {\n        if (card.id === cardId) {\n          card.activities.unshift({\n            id: uuidv4(),\n            activity,\n            createdAt: new Date()\n          });\n        }\n      });\n    }\n\n    if (activity.toLowerCase().includes('archive')) {\n      handleSnackbar(activity, 'warning');\n    } else {\n      handleSnackbar(activity, 'info');\n    }\n\n    setState(_objectSpread({}, state));\n  };\n\n  const changeProjectName = projectName => {\n    handleSnackbar(`Project name is changed to '${projectName}'`, 'info');\n    props.setProjectName(projectName);\n  };\n\n  const handleSnackbar = (message, variant) => {\n    enqueueSnackbar(message, {\n      variant\n    });\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Top, {\n    setView: props.setView,\n    setProjectName: changeProjectName,\n    projectName: props.projectName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 513,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    className: \"board\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 518,\n      columnNumber: 7\n    }\n  }, __jsx(DragDropContext, {\n    onDragEnd: onDragEnd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 519,\n      columnNumber: 9\n    }\n  }, __jsx(Droppable, {\n    direction: \"horizontal\",\n    droppableId: \"all-droppables\",\n    type: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 520,\n      columnNumber: 11\n    }\n  }, (provided, snapshot) => __jsx(\"div\", _extends({\n    ref: provided.innerRef\n  }, provided.droppableProps, {\n    style: getItemStyle(snapshot.isDragging, provided.droppableProps.style),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 526,\n      columnNumber: 15\n    }\n  }), state.columnOrder.map((columnId, index) => {\n    return __jsx(Column, {\n      key: columnId,\n      column: state.columns[columnId],\n      index: index,\n      addCard: addCard,\n      setOpen: setOpen,\n      setCardForOpen: setCardForOpen,\n      updateSectionTitle: updateSectionTitle,\n      deleteColumn: deleteColumn // onDragEnd={onDragEnd}\n      ,\n      convertDate: convertDate,\n      open: true,\n      projectName: props.projectName,\n      handleModalClose: handleModalClose,\n      addChecklist: addChecklist,\n      updateChecklist: updateChecklist,\n      addActivity: addActivity,\n      updateDate: updateDate,\n      updateCardTitle: updateCardTitle,\n      updateCardNote: updateCardNote,\n      completeChecklist: completeChecklist,\n      deleteChecklist: deleteChecklist,\n      setDueDate: setDueDate,\n      completeCard: completeCard,\n      deleteCard: deleteCard,\n      archiveCard: archiveCard,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536,\n        columnNumber: 21\n      }\n    });\n  }), provided.placeholder))), state.archive.cards.length > 0 && __jsx(Archive, {\n    index: 0 // onDragEnd={onDragEnd}\n    ,\n    column: state.archive,\n    setCardForOpen: setCardForOpen,\n    convertDate: convertDate,\n    setOpen: setOpen,\n    open: true,\n    projectName: props.projectName,\n    handleModalClose: handleModalClose,\n    updateSectionTitle: updateSectionTitle,\n    deleteColumn: deleteColumn,\n    addChecklist: addChecklist,\n    updateChecklist: updateChecklist,\n    addActivity: addActivity,\n    updateDate: updateDate,\n    updateCardTitle: updateCardTitle,\n    updateCardNote: updateCardNote,\n    completeChecklist: completeChecklist,\n    deleteChecklist: deleteChecklist,\n    setDueDate: setDueDate,\n    completeCard: completeCard,\n    deleteCard: deleteCard,\n    archiveCard: archiveCard,\n    addCard: addCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 571,\n      columnNumber: 11\n    }\n  }), __jsx(AddSection, {\n    colorIndex: colorIndex,\n    addSection: addSection,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 598,\n      columnNumber: 9\n    }\n  })), open && __jsx(CardModal, {\n    open: true,\n    projectName: props.projectName,\n    currentColumn: currentColumn,\n    handleModalClose: handleModalClose,\n    currentCard: currentCard,\n    addChecklist: addChecklist,\n    updateChecklist: updateChecklist,\n    addActivity: addActivity,\n    updateDate: updateDate,\n    updateCardTitle: updateCardTitle,\n    updateCardNote: updateCardNote,\n    completeChecklist: completeChecklist,\n    deleteChecklist: deleteChecklist,\n    setDueDate: setDueDate,\n    convertDate: convertDate,\n    completeCard: completeCard,\n    deleteCard: deleteCard,\n    archiveCard: archiveCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 601,\n      columnNumber: 9\n    }\n  }));\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/heegupark/Desktop/Workspace/MyProject/omega-kanban/components/board.tsx"],"names":["React","useState","useEffect","DragDropContext","Droppable","v4","uuidv4","Top","Column","AddSection","Archive","CardModal","useSnackbar","Board","props","enqueueSnackbar","state","setState","columns","id","title","cards","cardTitle","note","isCardCompleted","isArchived","checklists","activities","dueDate","Date","createdAt","updatedAt","colorIndex","columnOrder","archive","setColorIndex","currentCard","setCurrentCard","currentColumn","setCurrentColumn","length","addSection","sectionTitle","card","newSection","push","handleSnackbar","addCard","columnId","newCard","undefined","addActivity","updateDate","completeCard","cardId","map","index","splice","updateSectionTitle","updateCardTitle","updateCardNote","deleteColumn","indexOf","deleteCard","archiveCard","tempCard","onDragEnd","result","destination","type","reorderColumn","source","droppableId","column","reorderCards","newState","sourceColumn","destinationColumn","newSourceColumn","newDestinationColumn","getItemStyle","isDragging","draggableStyle","display","flexDirection","list","startIndex","endIndex","Array","from","removed","open","setOpen","setCardForOpen","filter","handleModalClose","addChecklist","checklist","isChecked","date","updateChecklist","checklistId","checklistContent","completeChecklist","deleteChecklist","convertDate","month","toString","split","day","year","setDueDate","activity","unshift","toLowerCase","includes","changeProjectName","projectName","setProjectName","message","variant","setView","provided","snapshot","innerRef","droppableProps","style","placeholder"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport { v4 as uuidv4 } from 'uuid';\nimport Top from './top';\nimport Column from './column';\nimport AddSection from './add-section';\nimport Archive from './archive';\nimport CardModal from './card-modal';\nimport { VariantType, useSnackbar } from 'notistack';\nimport IMainProps from './interfaces/imainprops';\nimport IColumns from './interfaces/icolumns';\nimport ICard from './interfaces/icard';\nimport ISection from './interfaces/isection';\nimport IChecklist from './interfaces/ichecklist';\n\nfunction Board(props: IMainProps) {\n  const { enqueueSnackbar } = useSnackbar();\n  const [state, setState] = useState<IColumns>({\n    columns: {\n      'column-0': {\n        id: 'column-0',\n        title: 'Plan',\n        cards: [\n          {\n            id: uuidv4(),\n            cardTitle: 'Create HTML skeleton',\n            note: '',\n            isCardCompleted: false,\n            isArchived: false,\n            checklists: [],\n            activities: [],\n            dueDate: new Date(2020, 9, 11),\n            createdAt: new Date(2020, 8, 11),\n            updatedAt: new Date(2020, 8, 11),\n          },\n        ],\n        colorIndex: 0,\n        createdAt: new Date(2020, 8, 1),\n        updatedAt: new Date(2020, 8, 11),\n      },\n      'column-1': {\n        id: 'column-1',\n        title: 'Progress',\n        cards: [],\n        colorIndex: 1,\n        createdAt: new Date(2020, 8, 2),\n        updatedAt: new Date(2020, 8, 2),\n      },\n      'column-2': {\n        id: 'column-2',\n        title: 'Complete',\n        cards: [],\n        colorIndex: 2,\n        createdAt: new Date(2020, 8, 3),\n        updatedAt: new Date(2020, 8, 3),\n      },\n    },\n    columnOrder: ['column-0', 'column-1', 'column-2'],\n    archive: {\n      id: 'archive',\n      title: 'Archive',\n      cards: [],\n      colorIndex: 0,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    },\n  });\n\n  const [colorIndex, setColorIndex] = useState(0);\n  const [currentCard, setCurrentCard] = useState<ICard>();\n  const [currentColumn, setCurrentColumn] = useState<ISection>();\n\n  useEffect(() => {\n    setColorIndex(state.columnOrder.length - 1);\n  }, []);\n\n  const addSection = (sectionTitle: string, card: ICard | undefined) => {\n    const newSection: ISection = {\n      id: uuidv4(),\n      title: sectionTitle,\n      cards: [],\n      colorIndex: colorIndex + 1,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    if (card) {\n      newSection.cards.push(card);\n    }\n    handleSnackbar(`'${sectionTitle}' is created`, 'success');\n    setColorIndex(colorIndex + 1);\n    state.columns[newSection.id] = newSection;\n    state.columnOrder.push(newSection.id);\n    setState({\n      ...state,\n    });\n  };\n\n  const addCard = (columnId: string, cardTitle: string) => {\n    const newCard = {\n      id: uuidv4(),\n      cardTitle,\n      note: '',\n      isCardCompleted: false,\n      isArchived: false,\n      checklists: [],\n      activities: [],\n      dueDate: undefined,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    addActivity(\n      columnId,\n      newCard.id,\n      `A card with title '${cardTitle}' is created in '${state.columns[columnId].title}'`\n    );\n    updateDate(columnId, '');\n    state.columns[columnId].cards.push(newCard);\n    setState({\n      ...state,\n    });\n  };\n\n  const completeCard = (columnId: string, cardId: string) => {\n    let completeCard: ICard = {} as ICard;\n    state.columns[columnId].cards.map((card: ICard, index: number) => {\n      if (card.id === cardId) {\n        card.isCardCompleted = true;\n        completeCard = card;\n        state.columns[columnId].cards.splice(index, 1);\n      }\n    });\n    state.columns[columnId].cards.push(completeCard);\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `Card is completed`);\n    setState({\n      ...state,\n    });\n  };\n  const updateSectionTitle = (columnId: string, sectionTitle: string) => {\n    state.columns[columnId].title = sectionTitle;\n    state.columns[columnId].updatedAt = new Date();\n    setState({\n      ...state,\n    });\n  };\n\n  const updateCardTitle = (\n    columnId: string,\n    cardId: string,\n    cardTitle: string\n  ) => {\n    state.columns[columnId].cards.map((card: ICard) => {\n      if (card.id === cardId) {\n        card.cardTitle = cardTitle;\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `Card title is changed to ${cardTitle}`);\n    setState({\n      ...state,\n    });\n  };\n\n  const updateCardNote = (columnId: string, cardId: string, note: string) => {\n    state.columns[columnId].cards.map((card: ICard) => {\n      if (card.id === cardId) {\n        card.note = note;\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `Card note is changed to ||${note}`);\n    setState({\n      ...state,\n    });\n  };\n\n  const deleteColumn = (id: string) => {\n    const title = state.columns[id].title;\n    delete state.columns[id];\n    state.columnOrder.splice(state.columnOrder.indexOf(id), 1);\n    handleSnackbar(`'${title}' is deleted`, 'error');\n    setState({\n      ...state,\n    });\n  };\n\n  const deleteCard = (columnId: string, cardId: string) => {\n    state.columns[columnId].cards.map((card: ICard, index: number) => {\n      if (card.id === cardId) {\n        state.columns[columnId].cards.splice(index, 1);\n      }\n    });\n    updateDate(columnId, cardId);\n    handleSnackbar('A card is deleted', 'error');\n    setState({\n      ...state,\n    });\n  };\n\n  const archiveCard = (columnId: string, cardId: string) => {\n    let tempCard: ICard = {} as ICard;\n    state.columns[columnId].cards.map((card: ICard, index: number) => {\n      if (card.id === cardId) {\n        card.isArchived = true;\n        tempCard = card;\n        state.columns[columnId].cards.splice(index, 1);\n      }\n    });\n    updateDate(columnId, cardId);\n    state.archive.cards.push(tempCard);\n    addActivity('archive', cardId, `Card is archived`);\n    setState({\n      ...state,\n    });\n  };\n\n  const onDragEnd = (result: any) => {\n    if (!result.destination) {\n      return;\n    }\n\n    if (result.type === 'column') {\n      const columnOrder: Array<string> = reorderColumn(\n        state.columnOrder,\n        result.source.index,\n        result.destination.index\n      );\n      handleSnackbar(\n        `'${\n          state.columns[state.columnOrder[result.source.index]].title\n        }' and '${\n          state.columns[state.columnOrder[result.destination.index]].title\n        }' are reordered`,\n        'success'\n      );\n      setState({\n        ...state,\n        columnOrder,\n      });\n      return;\n    }\n\n    if (result.source.droppableId === result.destination.droppableId) {\n      const column = state.columns[result.source.droppableId];\n      const cards = reorderCards(\n        column.cards,\n        result.source.index,\n        result.destination.index\n      );\n\n      const newState = {\n        ...state,\n        columns: {\n          ...state.columns,\n          [column.id]: {\n            ...column,\n            cards,\n          },\n        },\n      };\n      setState(newState);\n      handleSnackbar(`A card is reordered in'${column.title}'`, 'success');\n      return;\n    }\n\n    const sourceColumn = state.columns[result.source.droppableId];\n    const destinationColumn = state.columns[result.destination.droppableId];\n    const card = sourceColumn.cards[result.source.index];\n\n    const newSourceColumn = {\n      ...sourceColumn,\n      cards: [...sourceColumn.cards],\n    };\n    newSourceColumn.cards.splice(result.source.index, 1);\n\n    const newDestinationColumn = {\n      ...destinationColumn,\n      cards: [...destinationColumn.cards],\n    };\n    newDestinationColumn.cards.splice(result.destination.index, 0, card);\n\n    const newState = {\n      ...state,\n      columns: {\n        ...state.columns,\n        [newSourceColumn.id]: newSourceColumn,\n        [newDestinationColumn.id]: newDestinationColumn,\n      },\n    };\n    handleSnackbar(\n      `A card is moved from '${newSourceColumn.title}' to '${newDestinationColumn.title}'`,\n      'success'\n    );\n    setState(newState);\n  };\n\n  const getItemStyle = (isDragging: boolean, draggableStyle: any) => ({\n    display: 'flex',\n    flexDirection: 'row',\n    ...draggableStyle,\n  });\n\n  const reorderCards = (\n    list: Array<ICard>,\n    startIndex: number,\n    endIndex: number\n  ) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    return result;\n  };\n\n  const reorderColumn = (\n    list: Array<string>,\n    startIndex: number,\n    endIndex: number\n  ) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    return result;\n  };\n\n  const [open, setOpen] = React.useState(false);\n  const setCardForOpen = (columnId: string, cardId: string) => {\n    if (columnId === 'archive') {\n      const card = state.archive.cards.filter(\n        (card: ICard) => card.id === cardId\n      );\n      setCurrentCard(card[0]);\n      setCurrentColumn(state.archive);\n    } else {\n      const card = state.columns[columnId].cards.filter(\n        (card: ICard) => card.id === cardId\n      );\n      setCurrentCard(card[0]);\n      setCurrentColumn(state.columns[columnId]);\n    }\n  };\n\n  const handleModalClose = () => {\n    setOpen(false);\n  };\n\n  const addChecklist = (\n    columnId: string,\n    cardId: string,\n    checklist: string\n  ) => {\n    state.columns[columnId].cards.map((card: ICard) => {\n      if (card.id === cardId) {\n        card.checklists.push({\n          id: uuidv4(),\n          checklist,\n          isChecked: false,\n          date: new Date(),\n        });\n      }\n    });\n    addActivity(columnId, cardId, `${checklist} is added to the checklist`);\n    updateDate(columnId, cardId);\n    setState({\n      ...state,\n    });\n  };\n\n  const updateDate = (columnId: string, cardId: string) => {\n    if (cardId) {\n      state.columns[columnId].cards.map((card: ICard) => {\n        if (card.id === cardId) {\n          card.updatedAt = new Date();\n        }\n      });\n    }\n    state.columns[columnId].updatedAt = new Date();\n    setState({\n      ...state,\n    });\n  };\n\n  const updateChecklist = (\n    columnId: string,\n    cardId: string,\n    checklistId: string,\n    checklistContent: string\n  ) => {\n    state.columns[columnId].cards.map((card: ICard) => {\n      if (card.id === cardId) {\n        card.checklists.map((checklist: IChecklist) => {\n          if (checklist.id === checklistId) {\n            checklist.checklist = checklistContent;\n          }\n        });\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(\n      columnId,\n      cardId,\n      `A checklist is updated to ${checklistContent}`\n    );\n    setState({\n      ...state,\n    });\n  };\n\n  const completeChecklist = (\n    columnId: string,\n    cardId: string,\n    checklistId: string,\n    isChecked: boolean\n  ) => {\n    state.columns[columnId].cards.map((card: ICard) => {\n      if (card.id === cardId) {\n        card.checklists.map((checklist: IChecklist) => {\n          if (checklist.id === checklistId) {\n            checklist.isChecked = isChecked;\n          }\n        });\n      }\n    });\n    updateDate(columnId, cardId);\n    if (isChecked) addActivity(columnId, cardId, `A checklist is completed`);\n    else addActivity(columnId, cardId, `A checklist is changed to incomplete`);\n    setState({\n      ...state,\n    });\n  };\n\n  const deleteChecklist = (\n    columnId: string,\n    cardId: string,\n    checklistId: string\n  ) => {\n    state.columns[columnId].cards.map((card: ICard) => {\n      if (card.id === cardId) {\n        card.checklists = card.checklists.filter(\n          (checklist: IChecklist) => checklist.id !== checklistId\n        );\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `A checklist is deleted`);\n    setState({\n      ...state,\n    });\n  };\n\n  const convertDate = (date: Date) => {\n    const month = date.toString().split(' ')[1];\n    const day = date.toString().split(' ')[2];\n    const year = date.toString().split(' ')[3];\n    return `${month} ${day}, ${year}`;\n  };\n\n  const setDueDate = (columnId: string, cardId: string, date: Date) => {\n    state.columns[columnId].cards.map((card: ICard) => {\n      if (card.id === cardId) {\n        card.dueDate = new Date(date);\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `A due date is set to ${convertDate(date)}`);\n    setState({\n      ...state,\n    });\n  };\n\n  const addActivity = (columnId: string, cardId: string, activity: string) => {\n    if (columnId === 'archive') {\n      state.archive.cards.map((card: ICard) => {\n        if (card.id === cardId) {\n          card.activities.unshift({\n            id: uuidv4(),\n            activity,\n            createdAt: new Date(),\n          });\n        }\n      });\n    } else {\n      state.columns[columnId].cards.map((card: ICard) => {\n        if (card.id === cardId) {\n          card.activities.unshift({\n            id: uuidv4(),\n            activity,\n            createdAt: new Date(),\n          });\n        }\n      });\n    }\n    if (activity.toLowerCase().includes('archive')) {\n      handleSnackbar(activity, 'warning');\n    } else {\n      handleSnackbar(activity, 'info');\n    }\n    setState({\n      ...state,\n    });\n  };\n\n  const changeProjectName = (projectName: string) => {\n    handleSnackbar(`Project name is changed to '${projectName}'`, 'info');\n    props.setProjectName(projectName);\n  };\n\n  const handleSnackbar = (message: string, variant: VariantType) => {\n    enqueueSnackbar(message, { variant });\n  };\n\n  return (\n    <>\n      <Top\n        setView={props.setView}\n        setProjectName={changeProjectName}\n        projectName={props.projectName}\n      />\n      <div className=\"board\">\n        <DragDropContext onDragEnd={onDragEnd}>\n          <Droppable\n            direction=\"horizontal\"\n            droppableId=\"all-droppables\"\n            type=\"column\"\n          >\n            {(provided: any, snapshot: any) => (\n              <div\n                ref={provided.innerRef}\n                {...provided.droppableProps}\n                style={getItemStyle(\n                  snapshot.isDragging,\n                  provided.droppableProps.style\n                )}\n              >\n                {state.columnOrder.map((columnId: string, index: number) => {\n                  return (\n                    <Column\n                      key={columnId}\n                      column={state.columns[columnId]}\n                      index={index}\n                      addCard={addCard}\n                      setOpen={setOpen}\n                      setCardForOpen={setCardForOpen}\n                      updateSectionTitle={updateSectionTitle}\n                      deleteColumn={deleteColumn}\n                      // onDragEnd={onDragEnd}\n                      convertDate={convertDate}\n                      open={true}\n                      projectName={props.projectName}\n                      handleModalClose={handleModalClose}\n                      addChecklist={addChecklist}\n                      updateChecklist={updateChecklist}\n                      addActivity={addActivity}\n                      updateDate={updateDate}\n                      updateCardTitle={updateCardTitle}\n                      updateCardNote={updateCardNote}\n                      completeChecklist={completeChecklist}\n                      deleteChecklist={deleteChecklist}\n                      setDueDate={setDueDate}\n                      completeCard={completeCard}\n                      deleteCard={deleteCard}\n                      archiveCard={archiveCard}\n                    />\n                  );\n                })}\n                {provided.placeholder}\n              </div>\n            )}\n          </Droppable>\n        </DragDropContext>\n        {state.archive.cards.length > 0 && (\n          <Archive\n            index={0}\n            // onDragEnd={onDragEnd}\n            column={state.archive}\n            setCardForOpen={setCardForOpen}\n            convertDate={convertDate}\n            setOpen={setOpen}\n            open={true}\n            projectName={props.projectName}\n            handleModalClose={handleModalClose}\n            updateSectionTitle={updateSectionTitle}\n            deleteColumn={deleteColumn}\n            addChecklist={addChecklist}\n            updateChecklist={updateChecklist}\n            addActivity={addActivity}\n            updateDate={updateDate}\n            updateCardTitle={updateCardTitle}\n            updateCardNote={updateCardNote}\n            completeChecklist={completeChecklist}\n            deleteChecklist={deleteChecklist}\n            setDueDate={setDueDate}\n            completeCard={completeCard}\n            deleteCard={deleteCard}\n            archiveCard={archiveCard}\n            addCard={addCard}\n          />\n        )}\n        <AddSection colorIndex={colorIndex} addSection={addSection} />\n      </div>\n      {open && (\n        <CardModal\n          open={true}\n          projectName={props.projectName}\n          currentColumn={currentColumn}\n          handleModalClose={handleModalClose}\n          currentCard={currentCard}\n          addChecklist={addChecklist}\n          updateChecklist={updateChecklist}\n          addActivity={addActivity}\n          updateDate={updateDate}\n          updateCardTitle={updateCardTitle}\n          updateCardNote={updateCardNote}\n          completeChecklist={completeChecklist}\n          deleteChecklist={deleteChecklist}\n          setDueDate={setDueDate}\n          convertDate={convertDate}\n          completeCard={completeCard}\n          deleteCard={deleteCard}\n          archiveCard={archiveCard}\n        />\n      )}\n    </>\n  );\n}\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}