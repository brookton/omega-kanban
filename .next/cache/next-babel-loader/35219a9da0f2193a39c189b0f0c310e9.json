{"ast":null,"code":"import Card from '../../middleware/models/card';\nexport default (async (request, response) => {\n  const {\n    columnId,\n    cards\n  } = request.body;\n  console.log(cards);\n\n  try {\n    cards.map(async card => {\n      console.log(card.order);\n      const temp = await Card.updateOne({\n        _id: card._id\n      }, {\n        $set: {\n          order: card.order\n        }\n      });\n      temp.save(); // console.log(temp);\n    });\n    return response.status(200).json({\n      success: true\n    });\n  } catch (e) {\n    return response.status(500).json({\n      success: false,\n      message: 'failed to reorder cards in a same column'\n    });\n  }\n});","map":{"version":3,"sources":["/Users/heegupark/Desktop/Workspace/MyProject/omega-kanban/pages/api/reorder-card.tsx"],"names":["Card","request","response","columnId","cards","body","console","log","map","card","order","temp","updateOne","_id","$set","save","status","json","success","e","message"],"mappings":"AACA,OAAOA,IAAP,MAAiB,8BAAjB;AAGA,gBAAe,OAAOC,OAAP,EAAgCC,QAAhC,KAA8D;AAC3E,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAsBH,OAAO,CAACI,IAApC;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;;AACA,MAAI;AACFA,IAAAA,KAAK,CAACI,GAAN,CAAU,MAAOC,IAAP,IAAuB;AAC/BH,MAAAA,OAAO,CAACC,GAAR,CAAYE,IAAI,CAACC,KAAjB;AACA,YAAMC,IAAI,GAAG,MAAMX,IAAI,CAACY,SAAL,CACjB;AAAEC,QAAAA,GAAG,EAAEJ,IAAI,CAACI;AAAZ,OADiB,EAEjB;AAAEC,QAAAA,IAAI,EAAE;AAAEJ,UAAAA,KAAK,EAAED,IAAI,CAACC;AAAd;AAAR,OAFiB,CAAnB;AAIAC,MAAAA,IAAI,CAACI,IAAL,GAN+B,CAO/B;AACD,KARD;AASA,WAAOb,QAAQ,CAACc,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAA1B,CAAP;AACD,GAXD,CAWE,OAAOC,CAAP,EAAU;AACV,WAAOjB,QAAQ,CAACc,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAC/BC,MAAAA,OAAO,EAAE,KADsB;AAE/BE,MAAAA,OAAO,EAAE;AAFsB,KAA1B,CAAP;AAID;AACF,CApBD","sourcesContent":["import { NextApiRequest, NextApiResponse } from 'next';\nimport Card from '../../middleware/models/card';\nimport ICard from '../../components/interfaces/icard';\n\nexport default async (request: NextApiRequest, response: NextApiResponse) => {\n  const { columnId, cards } = request.body;\n  console.log(cards);\n  try {\n    cards.map(async (card: ICard) => {\n      console.log(card.order);\n      const temp = await Card.updateOne(\n        { _id: card._id },\n        { $set: { order: card.order } }\n      );\n      temp.save();\n      // console.log(temp);\n    });\n    return response.status(200).json({ success: true });\n  } catch (e) {\n    return response.status(500).json({\n      success: false,\n      message: 'failed to reorder cards in a same column',\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}