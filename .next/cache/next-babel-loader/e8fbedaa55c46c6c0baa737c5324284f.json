{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { useRouter } from 'next/router';\n\nconst randomWords = require('random-words');\n\nfunction ProjectName() {\n  const router = useRouter();\n  const {\n    0: projectName,\n    1: setProjectName\n  } = useState('');\n  const {\n    0: isBtnClick,\n    1: setIsBtnClick\n  } = useState(false);\n  const {\n    0: message,\n    1: setMessage\n  } = useState('');\n  const {\n    0: error,\n    1: setError\n  } = useState(false);\n\n  const addRouter = project => {\n    fetch(`/api/add-router`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        project\n      })\n    }).then(res => res.json()).then(data => {\n      if (data.success) {\n        setIsBtnClick(false);\n        router.replace(`/${data.data._id}/${data.data.project}`);\n      } else {\n        setTimeout(() => {\n          setError(false);\n          setMessage('');\n        }, 500);\n        setError(true);\n        setMessage('failed to create a project');\n      }\n\n      setIsBtnClick(false);\n    }).catch(err => {\n      console.error(`Something wrong happened while adding a route:${err.message}`);\n    });\n  };\n\n  const handleStartBtnClick = () => {\n    setIsBtnClick(true);\n\n    if (projectName.length === 0) {\n      addRouter(randomWords());\n    } else {\n      addRouter(projectName);\n    }\n  };\n\n  return __jsx(\"div\", {\n    className: \"home flex-center bg-head-0 flex-column\"\n  }, __jsx(\"form\", {\n    className: \"project-name\",\n    noValidate: true,\n    autoComplete: \"off\",\n    onSubmit: () => handleStartBtnClick()\n  }, __jsx(TextField, {\n    className: \"project-name-text\",\n    id: \"standard-basic\",\n    label: \"project name\",\n    error: error,\n    disabled: isBtnClick,\n    value: projectName,\n    helperText: message,\n    onChange: e => setProjectName(e.target.value)\n  }), __jsx(Button, {\n    disabled: isBtnClick,\n    onClick: () => handleStartBtnClick()\n  }, \"Start\")));\n}\n\nexport default ProjectName;","map":null,"metadata":{},"sourceType":"module"}