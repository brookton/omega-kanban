{"ast":null,"code":"import Checklist from '../../middleware/models/checklist';\n\nrequire('../../middleware/db/mongoose');\n\nexport default (async (request, response) => {\n  const {\n    _id\n  } = request.body;\n  const updates = Object.keys(request.body);\n  const allowedUpdates = ['checklist', 'isChecked'];\n  const isValidOperation = updates.every(update => {\n    return allowedUpdates.includes(update);\n  });\n\n  if (!isValidOperation) {\n    return response.status(400).send({\n      error: 'Invalid checklist updates!'\n    });\n  }\n\n  try {\n    const newChecklist = await Checklist.findOne({\n      _id\n    });\n\n    if (!newChecklist) {\n      return response.status(404).send({\n        error: 'Failed to find a checklist'\n      });\n    }\n\n    updates.forEach(update => newChecklist[update] = request.body[update]);\n    await newChecklist.save();\n    return response.status(200).json({\n      success: true\n    });\n  } catch (e) {\n    return response.status(500).json({\n      success: false,\n      message: 'failed to update a checklist'\n    });\n  }\n});","map":{"version":3,"sources":["/Users/heegupark/Desktop/Workspace/MyProject/omega-kanban/pages/api/update-checklist.tsx"],"names":["Checklist","require","request","response","_id","body","updates","Object","keys","allowedUpdates","isValidOperation","every","update","includes","status","send","error","newChecklist","findOne","forEach","save","json","success","e","message"],"mappings":"AACA,OAAOA,SAAP,MAAsB,mCAAtB;;AACAC,OAAO,CAAC,8BAAD,CAAP;;AAEA,gBAAe,OAAOC,OAAP,EAAgCC,QAAhC,KAA8D;AAC3E,QAAM;AAAEC,IAAAA;AAAF,MAAUF,OAAO,CAACG,IAAxB;AACA,QAAMC,OAAO,GAAGC,MAAM,CAACC,IAAP,CAAYN,OAAO,CAACG,IAApB,CAAhB;AACA,QAAMI,cAAc,GAAG,CAAC,WAAD,EAAc,WAAd,CAAvB;AAEA,QAAMC,gBAAgB,GAAGJ,OAAO,CAACK,KAAR,CAAeC,MAAD,IAAY;AACjD,WAAOH,cAAc,CAACI,QAAf,CAAwBD,MAAxB,CAAP;AACD,GAFwB,CAAzB;;AAIA,MAAI,CAACF,gBAAL,EAAuB;AACrB,WAAOP,QAAQ,CAACW,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAA1B,CAAP;AACD;;AAED,MAAI;AACF,UAAMC,YAAY,GAAG,MAAMjB,SAAS,CAACkB,OAAV,CAAkB;AAAEd,MAAAA;AAAF,KAAlB,CAA3B;;AACA,QAAI,CAACa,YAAL,EAAmB;AACjB,aAAOd,QAAQ,CAACW,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAA1B,CAAP;AACD;;AACDV,IAAAA,OAAO,CAACa,OAAR,CACGP,MAAD,IACIK,YAAD,CAAsCL,MAAtC,IAAgDV,OAAO,CAACG,IAAR,CAAaO,MAAb,CAFrD;AAIA,UAAMK,YAAY,CAACG,IAAb,EAAN;AACA,WAAOjB,QAAQ,CAACW,MAAT,CAAgB,GAAhB,EAAqBO,IAArB,CAA0B;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAA1B,CAAP;AACD,GAXD,CAWE,OAAOC,CAAP,EAAU;AACV,WAAOpB,QAAQ,CACZW,MADI,CACG,GADH,EAEJO,IAFI,CAEC;AAAEC,MAAAA,OAAO,EAAE,KAAX;AAAkBE,MAAAA,OAAO,EAAE;AAA3B,KAFD,CAAP;AAGD;AACF,CA7BD","sourcesContent":["import { NextApiRequest, NextApiResponse } from 'next';\nimport Checklist from '../../middleware/models/checklist';\nrequire('../../middleware/db/mongoose');\n\nexport default async (request: NextApiRequest, response: NextApiResponse) => {\n  const { _id } = request.body;\n  const updates = Object.keys(request.body);\n  const allowedUpdates = ['checklist', 'isChecked'];\n\n  const isValidOperation = updates.every((update) => {\n    return allowedUpdates.includes(update);\n  });\n\n  if (!isValidOperation) {\n    return response.status(400).send({ error: 'Invalid checklist updates!' });\n  }\n\n  try {\n    const newChecklist = await Checklist.findOne({ _id });\n    if (!newChecklist) {\n      return response.status(404).send({ error: 'Failed to find a checklist' });\n    }\n    updates.forEach(\n      (update) =>\n        ((newChecklist as Record<string, any>)[update] = request.body[update])\n    );\n    await newChecklist.save();\n    return response.status(200).json({ success: true });\n  } catch (e) {\n    return response\n      .status(500)\n      .json({ success: false, message: 'failed to update a checklist' });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}