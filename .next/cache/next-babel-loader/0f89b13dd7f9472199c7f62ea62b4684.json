{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Card from '../../middleware/models/card';\n\nrequire('../../middleware/db/mongoose');\n\nexport default (async (request, response) => {\n  const {\n    columnId,\n    cardTitle\n  } = request.body;\n\n  try {\n    const cards = await Card.find({\n      columnId\n    });\n    const count = cards.length;\n    const newCard = new Card({\n      columnId,\n      cardTitle,\n      order: count\n    });\n    await newCard.save();\n    return response.status(200).json({\n      success: true,\n      data: _objectSpread(_objectSpread({}, newCard._doc), {}, {\n        checklists: [],\n        activities: []\n      })\n    });\n  } catch (e) {\n    return response.status(500).json({\n      success: false,\n      message: 'failed to add a card'\n    });\n  }\n});","map":null,"metadata":{},"sourceType":"module"}