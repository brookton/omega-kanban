{"ast":null,"code":"import Column from '../../middleware/models/column';\n\nrequire('../../middleware/db/mongoose');\n\nexport default (async (request, response) => {\n  const {\n    _id\n  } = request.body;\n\n  try {\n    const columns = await Column.aggregate([{\n      $match: {\n        projectId: _id\n      }\n    }, {\n      $lookup: {\n        from: 'card',\n        localField: '_id',\n        foreignField: 'columnId',\n        as: 'cards'\n      }\n    }, {\n      $lookup: {\n        from: 'checklist',\n        localField: 'cards._id',\n        foreignField: 'cardId',\n        as: 'checklists'\n      }\n    }, {\n      $lookup: {\n        from: 'activity',\n        localField: 'cards._id',\n        foreignField: 'cardId',\n        as: 'activities'\n      }\n    }]).exec();\n\n    if (!columns) {\n      return response.status(404).json({\n        success: false,\n        message: 'data not found'\n      });\n    }\n\n    return response.status(200).json({\n      success: true,\n      data: columns\n    });\n  } catch (e) {\n    return response.status(500).json({\n      success: false,\n      message: 'failed to get a board data'\n    });\n  }\n});","map":{"version":3,"sources":["/Users/heegupark/Desktop/Workspace/MyProject/omega-kanban/pages/api/get-columns.tsx"],"names":["Column","require","request","response","_id","body","columns","aggregate","$match","projectId","$lookup","from","localField","foreignField","as","exec","status","json","success","message","data","e"],"mappings":"AACA,OAAOA,MAAP,MAAmB,gCAAnB;;AACAC,OAAO,CAAC,8BAAD,CAAP;;AAEA,gBAAe,OAAOC,OAAP,EAAgCC,QAAhC,KAA8D;AAC3E,QAAM;AAAEC,IAAAA;AAAF,MAAUF,OAAO,CAACG,IAAxB;;AACA,MAAI;AACF,UAAMC,OAAO,GAAG,MAAMN,MAAM,CAACO,SAAP,CAAiB,CACrC;AAAEC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,SAAS,EAAEL;AAAb;AAAV,KADqC,EAErC;AACEM,MAAAA,OAAO,EAAE;AACPC,QAAAA,IAAI,EAAE,MADC;AAEPC,QAAAA,UAAU,EAAE,KAFL;AAGPC,QAAAA,YAAY,EAAE,UAHP;AAIPC,QAAAA,EAAE,EAAE;AAJG;AADX,KAFqC,EAUrC;AACEJ,MAAAA,OAAO,EAAE;AACPC,QAAAA,IAAI,EAAE,WADC;AAEPC,QAAAA,UAAU,EAAE,WAFL;AAGPC,QAAAA,YAAY,EAAE,QAHP;AAIPC,QAAAA,EAAE,EAAE;AAJG;AADX,KAVqC,EAkBrC;AACEJ,MAAAA,OAAO,EAAE;AACPC,QAAAA,IAAI,EAAE,UADC;AAEPC,QAAAA,UAAU,EAAE,WAFL;AAGPC,QAAAA,YAAY,EAAE,QAHP;AAIPC,QAAAA,EAAE,EAAE;AAJG;AADX,KAlBqC,CAAjB,EA0BnBC,IA1BmB,EAAtB;;AA2BA,QAAI,CAACT,OAAL,EAAc;AACZ,aAAOH,QAAQ,CAACa,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAC/BC,QAAAA,OAAO,EAAE,KADsB;AAE/BC,QAAAA,OAAO,EAAE;AAFsB,OAA1B,CAAP;AAID;;AACD,WAAOhB,QAAQ,CAACa,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAAEC,MAAAA,OAAO,EAAE,IAAX;AAAiBE,MAAAA,IAAI,EAAEd;AAAvB,KAA1B,CAAP;AACD,GAnCD,CAmCE,OAAOe,CAAP,EAAU;AACV,WAAOlB,QAAQ,CACZa,MADI,CACG,GADH,EAEJC,IAFI,CAEC;AAAEC,MAAAA,OAAO,EAAE,KAAX;AAAkBC,MAAAA,OAAO,EAAE;AAA3B,KAFD,CAAP;AAGD;AACF,CA1CD","sourcesContent":["import { NextApiRequest, NextApiResponse } from 'next';\nimport Column from '../../middleware/models/column';\nrequire('../../middleware/db/mongoose');\n\nexport default async (request: NextApiRequest, response: NextApiResponse) => {\n  const { _id } = request.body;\n  try {\n    const columns = await Column.aggregate([\n      { $match: { projectId: _id } },\n      {\n        $lookup: {\n          from: 'card',\n          localField: '_id',\n          foreignField: 'columnId',\n          as: 'cards',\n        },\n      },\n      {\n        $lookup: {\n          from: 'checklist',\n          localField: 'cards._id',\n          foreignField: 'cardId',\n          as: 'checklists',\n        },\n      },\n      {\n        $lookup: {\n          from: 'activity',\n          localField: 'cards._id',\n          foreignField: 'cardId',\n          as: 'activities',\n        },\n      },\n    ]).exec();\n    if (!columns) {\n      return response.status(404).json({\n        success: false,\n        message: 'data not found',\n      });\n    }\n    return response.status(200).json({ success: true, data: columns });\n  } catch (e) {\n    return response\n      .status(500)\n      .json({ success: false, message: 'failed to get a board data' });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}