{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState } from 'react';\nimport Zoom from '@material-ui/core/Zoom';\nimport { withStyles } from '@material-ui/core/styles';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nconst StyledMenu = withStyles({\n  paper: {\n    border: '1px solid rgb(239, 243, 244)'\n  }\n})(props => __jsx(Menu, _extends({\n  elevation: 0,\n  getContentAnchorEl: null,\n  anchorOrigin: {\n    vertical: 'bottom',\n    horizontal: 'center'\n  },\n  transformOrigin: {\n    vertical: 'top',\n    horizontal: 'center'\n  }\n}, props)));\n\nfunction ChecklistItem(props) {\n  const {\n    0: checklist,\n    1: setChecklist\n  } = useState(props.checklist.checklist);\n  const {\n    0: showAngle,\n    1: setShowAngle\n  } = useState(false);\n  const [anchorEl, setAnchorEl] = React.useState(null);\n\n  const handleClick = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleChecklistSubmit = e => {\n    if (e.key === 'Enter') {\n      const newChecklist = {\n        _id: props.checklist._id,\n        checklist,\n        isChecked: undefined\n      };\n      props.updateChecklist(props.currentColumn._id, props.currentCard._id, newChecklist);\n    }\n  };\n\n  const handleCompleteChecklist = () => {\n    const newChecklist = {\n      _id: props.checklist._id,\n      checklist: undefined,\n      isChecked: !props.checklist.isChecked\n    };\n    props.updateChecklist(props.currentColumn._id, props.currentCard._id, newChecklist);\n  };\n\n  const handleDeleteColClick = () => {\n    props.deleteChecklist(props.currentColumn._id, props.currentCard._id, props.checklist._id);\n  };\n\n  return __jsx(React.Fragment, null, props.currentCard.isArchived ? __jsx(\"div\", {\n    className: \"display-flex checklist-row-no-hover\"\n  }, __jsx(\"div\", {\n    className: \"checklist-circle\"\n  }, props.checklist.isChecked ? __jsx(\"i\", {\n    className: \"far fa-check-circle\"\n  }) : __jsx(\"i\", {\n    className: \"far fa-circle\"\n  })), props.checklist.isChecked ? __jsx(\"div\", {\n    className: \"checklist-content\"\n  }, __jsx(\"s\", null, checklist)) : __jsx(\"input\", {\n    value: checklist,\n    disabled: true,\n    className: \"checklist-content border-none\"\n  })) : __jsx(\"div\", {\n    onMouseOver: () => setShowAngle(true),\n    onMouseLeave: () => setShowAngle(false),\n    className: \"display-flex checklist-row\"\n  }, __jsx(\"div\", {\n    className: \"checklist-circle cursor-pointer\",\n    onClick: () => handleCompleteChecklist()\n  }, props.checklist && props.checklist.isChecked ? __jsx(Zoom, {\n    in: true\n  }, __jsx(\"i\", {\n    className: \"far fa-check-circle\"\n  })) : __jsx(\"i\", {\n    className: \"far fa-circle\"\n  })), props.checklist && props.checklist.isChecked ? __jsx(\"div\", {\n    className: \"checklist-content\"\n  }, __jsx(\"s\", null, checklist)) : __jsx(\"input\", {\n    value: checklist,\n    onChange: e => setChecklist(e.target.value),\n    onKeyDown: e => handleChecklistSubmit(e),\n    className: \"checklist-content border-none\"\n  }), __jsx(\"div\", {\n    className: \"card-head-angle cursor-pointer\"\n  }, checklist && showAngle && __jsx(React.Fragment, null, __jsx(\"i\", {\n    onClick: handleClick,\n    className: \"fas fa-angle-down\"\n  })), __jsx(StyledMenu, {\n    id: \"delete-menu\",\n    anchorEl: anchorEl,\n    keepMounted: true,\n    open: Boolean(anchorEl),\n    onClose: handleClose\n  }, __jsx(MenuItem, {\n    onClick: () => handleDeleteColClick()\n  }, __jsx(ListItemText, {\n    primary: \"Delete\"\n  }))))));\n}\n\nexport default ChecklistItem;","map":null,"metadata":{},"sourceType":"module"}