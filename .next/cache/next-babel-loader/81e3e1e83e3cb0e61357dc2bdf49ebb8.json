{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport Disclaimer from './disclaimer';\nimport Board from './board';\nimport { useSnackbar } from 'notistack';\nimport { useRouter } from 'next/router';\nexport default function Main(props) {\n  var _React$useState = React.useState(props.projectName),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      projectName = _React$useState2[0],\n      setProjectName = _React$useState2[1];\n\n  var _useState = useState(false),\n      isAcceptDisclaimer = _useState[0],\n      setIsAcceptDisclaimer = _useState[1];\n\n  var _useSnackbar = useSnackbar(),\n      enqueueSnackbar = _useSnackbar.enqueueSnackbar;\n\n  var router = useRouter();\n  useEffect(function () {\n    if (localStorage.getItem('omegakanbanaccept')) {\n      setIsAcceptDisclaimer(true);\n    }\n  });\n\n  var handleSnackbar = function handleSnackbar(message, variant) {\n    enqueueSnackbar(message, {\n      variant: variant\n    });\n  };\n\n  var changeProjectName = function changeProjectName(project) {\n    handleSnackbar(\"Trying to update a project name to \".concat(project), 'info');\n    fetch(\"/api/update-project-name\", {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        _id: props._id,\n        project: project\n      })\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      if (data.success) {\n        handleSnackbar(\"Successfully changed. Will be redirecting...\", 'warning');\n        router.replace(\"/\".concat(props._id, \"/\").concat(project));\n      } else {\n        handleSnackbar(\"Failed to update a project name\", 'error');\n      }\n    })[\"catch\"](function (err) {\n      console.error(\"Something wrong happened while updating a project name:\".concat(err.message));\n      handleSnackbar(\"Failed to update a project name\", 'error');\n    });\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Board, {\n    _id: props._id,\n    changeProjectName: changeProjectName,\n    projectName: projectName\n  }), !isAcceptDisclaimer && __jsx(Disclaimer, {\n    setIsAcceptDisclaimer: setIsAcceptDisclaimer\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}