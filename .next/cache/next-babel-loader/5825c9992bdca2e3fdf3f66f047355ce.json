{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _jsxFileName = \"/Users/heegupark/Desktop/Workspace/MyProject/omega-kanban/components/board.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport Top from './top';\nimport CardBox from './card-box';\nimport AddSection from './add-section';\n\nfunction Board(props) {\n  _s();\n\n  var _this = this;\n\n  var _useState = useState([{\n    title: 'progress'\n  }]),\n      cardBoxes = _useState[0],\n      setCardBoxes = _useState[1];\n\n  var onBeforeCapture = function onBeforeCapture() {\n    /*...*/\n  };\n\n  var onBeforeDragStart = function onBeforeDragStart() {\n    /*...*/\n  };\n\n  var onDragStart = function onDragStart() {\n    /*...*/\n  };\n\n  var onDragUpdate = function onDragUpdate() {\n    /*...*/\n  };\n\n  var onDragEnd = function onDragEnd(result) {\n    if (!result.destination) {\n      return;\n    }\n\n    var items = reorder(cardBoxes, result.source.index, result.destination.index);\n    setCardBoxes(items);\n\n    _this.setState({\n      items: items\n    });\n  };\n\n  var getItemStyle = function getItemStyle(isDragging, draggableStyle) {\n    return {\n      display: 'flex'\n    };\n  };\n\n  var createCardBox = function createCardBox(cardBox) {\n    setCardBoxes([].concat(_toConsumableArray(cardBoxes), [cardBox]));\n  };\n\n  var reorder = function reorder(list, startIndex, endIndex) {\n    var result = Array.from(list);\n\n    var _result$splice = result.splice(startIndex, 1),\n        _result$splice2 = _slicedToArray(_result$splice, 1),\n        removed = _result$splice2[0];\n\n    result.splice(endIndex, 0, removed);\n    return result;\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Top, {\n    projectName: props.projectName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    className: \"board\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, __jsx(DragDropContext, {\n    onBeforeCapture: onBeforeCapture,\n    onBeforeDragStart: onBeforeDragStart,\n    onDragStart: onDragStart,\n    onDragUpdate: onDragUpdate,\n    onDragEnd: onDragEnd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, __jsx(Droppable, {\n    droppableId: \"droppable-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  }, function (provided, snapshot) {\n    return __jsx(\"div\", _extends({\n      ref: provided.innerRef\n    }, provided.droppableProps, {\n      style: getItemStyle(snapshot.isDragging, provided.droppableProps.style),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 15\n      }\n    }), cardBoxes.map(function (cardBox, index) {\n      console.log(cardBox);\n      return __jsx(Draggable, {\n        key: index,\n        draggableId: index.toString(),\n        index: index,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }\n      }, function (provided, snapshot) {\n        return __jsx(React.Fragment, null, __jsx(CardBox, {\n          reorder: reorder,\n          cardBoxTitle: cardBox.title,\n          innerRef: provided.innerRef,\n          draggableProps: provided.draggableProps,\n          dragHandleProps: provided.dragHandleProps,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 27\n          }\n        }), provided.placeholder);\n      });\n    }), provided.placeholder);\n  })), __jsx(AddSection, {\n    createCardBox: createCardBox,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  })));\n}\n\n_s(Board, \"mkS7lwBgNgWnwsk5ViWUqBgQGvo=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/heegupark/Desktop/Workspace/MyProject/omega-kanban/components/board.tsx"],"names":["React","useState","DragDropContext","Droppable","Draggable","Top","CardBox","AddSection","Board","props","title","cardBoxes","setCardBoxes","onBeforeCapture","onBeforeDragStart","onDragStart","onDragUpdate","onDragEnd","result","destination","items","reorder","source","index","setState","getItemStyle","isDragging","draggableStyle","display","createCardBox","cardBox","list","startIndex","endIndex","Array","from","splice","removed","projectName","provided","snapshot","innerRef","droppableProps","style","map","console","log","toString","draggableProps","dragHandleProps","placeholder"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport Top from './top';\nimport CardBox from './card-box';\nimport AddSection from './add-section';\n\nfunction Board(props: any) {\n  const [cardBoxes, setCardBoxes] = useState([{ title: 'progress' }]);\n  const onBeforeCapture = () => {\n    /*...*/\n  };\n\n  const onBeforeDragStart = () => {\n    /*...*/\n  };\n\n  const onDragStart = () => {\n    /*...*/\n  };\n  const onDragUpdate = () => {\n    /*...*/\n  };\n  const onDragEnd = (result: any) => {\n    if (!result.destination) {\n      return;\n    }\n\n    const items = reorder(\n      cardBoxes,\n      result.source.index,\n      result.destination.index\n    );\n    setCardBoxes(items as any);\n    this.setState({\n      items,\n    });\n  };\n\n  const getItemStyle = (isDragging: any, draggableStyle: any) => ({\n    display: 'flex',\n  });\n\n  const createCardBox = (cardBox: any) => {\n    setCardBoxes([...cardBoxes, cardBox] as any);\n  };\n\n  const reorder = (list: any, startIndex: any, endIndex: any) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    return result;\n  };\n\n  return (\n    <>\n      <Top projectName={props.projectName} />\n      <div className=\"board\">\n        <DragDropContext\n          onBeforeCapture={onBeforeCapture}\n          onBeforeDragStart={onBeforeDragStart}\n          onDragStart={onDragStart}\n          onDragUpdate={onDragUpdate}\n          onDragEnd={onDragEnd}\n        >\n          <Droppable droppableId=\"droppable-1\">\n            {(provided: any, snapshot: any) => (\n              <div\n                ref={provided.innerRef}\n                {...provided.droppableProps}\n                style={getItemStyle(\n                  snapshot.isDragging,\n                  provided.droppableProps.style\n                )}\n              >\n                {cardBoxes.map((cardBox: any, index: any) => {\n                  console.log(cardBox);\n                  return (\n                    <Draggable\n                      key={index}\n                      draggableId={index.toString()}\n                      index={index}\n                    >\n                      {(provided: any, snapshot: any) => (\n                        <>\n                          <CardBox\n                            reorder={reorder}\n                            cardBoxTitle={cardBox.title}\n                            innerRef={provided.innerRef}\n                            draggableProps={provided.draggableProps}\n                            dragHandleProps={provided.dragHandleProps}\n                          />\n                          {provided.placeholder}\n                        </>\n                      )}\n                    </Draggable>\n                  );\n                })}\n                {provided.placeholder}\n              </div>\n            )}\n          </Droppable>\n        </DragDropContext>\n        <AddSection createCardBox={createCardBox} />\n      </div>\n    </>\n  );\n}\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}