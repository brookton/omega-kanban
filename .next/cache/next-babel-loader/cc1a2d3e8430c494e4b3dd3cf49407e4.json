{"ast":null,"code":"var _jsxFileName = \"/Users/heegupark/Desktop/Workspace/MyProject/omega-kanban/components/board.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport { v4 as uuidv4 } from 'uuid';\nimport Top from './top';\nimport Column from './column';\nimport AddSection from './add-section';\nimport Archive from './archive';\nimport CardModal from './card-modal';\nimport { useSnackbar } from 'notistack';\n\nfunction Board(props) {\n  const {\n    enqueueSnackbar\n  } = useSnackbar(); // const [state, setState] = useState<IColumns>({\n  //   columns: {\n  //     'column-0': {\n  //       id: 'column-0',\n  //       title: 'Plan',\n  //       cards: [\n  //         {\n  //           id: uuidv4(),\n  //           cardTitle: 'Create HTML skeleton',\n  //           note: '',\n  //           isCardCompleted: false,\n  //           isArchived: false,\n  //           checklists: [],\n  //           activities: [],\n  //           dueDate: new Date(2020, 9, 11),\n  //           createdAt: new Date(2020, 8, 11),\n  //           updatedAt: new Date(2020, 8, 11),\n  //         },\n  //       ],\n  //       colorIndex: 0,\n  //       createdAt: new Date(2020, 8, 1),\n  //       updatedAt: new Date(2020, 8, 11),\n  //     },\n  //     'column-1': {\n  //       id: 'column-1',\n  //       title: 'Progress',\n  //       cards: [],\n  //       colorIndex: 1,\n  //       createdAt: new Date(2020, 8, 2),\n  //       updatedAt: new Date(2020, 8, 2),\n  //     },\n  //     'column-2': {\n  //       id: 'column-2',\n  //       title: 'Complete',\n  //       cards: [],\n  //       colorIndex: 2,\n  //       createdAt: new Date(2020, 8, 3),\n  //       updatedAt: new Date(2020, 8, 3),\n  //     },\n  //   },\n  //   columnOrder: ['column-0', 'column-1', 'column-2'],\n  //   archive: {\n  //     id: 'archive',\n  //     title: 'Archive',\n  //     cards: [],\n  //     colorIndex: 0,\n  //     createdAt: new Date(),\n  //     updatedAt: new Date(),\n  //   },\n  // });\n\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    columns: {},\n    columnOrder: [],\n    archive: {\n      _id: 'archive',\n      title: 'Archive',\n      cards: [],\n      colorIndex: 0,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    }\n  });\n  const {\n    0: colorIndex,\n    1: setColorIndex\n  } = useState(0);\n  const {\n    0: currentCard,\n    1: setCurrentCard\n  } = useState();\n  const {\n    0: currentColumn,\n    1: setCurrentColumn\n  } = useState();\n  const {\n    0: isLoadingCompleted,\n    1: setIsLoadingCompleted\n  } = useState(false);\n  useEffect(() => {\n    setColorIndex(state.columnOrder.length - 1);\n  }, []);\n  useEffect(() => {\n    getColumns(props._id);\n  }, []);\n\n  const getColumns = _id => {\n    fetch(`/api/get-columns`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        _id\n      })\n    }).then(res => res.json()).then(data => {\n      if (data.success) {\n        console.log(data.data);\n        data.data.map(column => {\n          state.columns[column._id] = column;\n          state.columnOrder.push(column._id);\n          setState(_objectSpread({}, state));\n        });\n        console.log(state);\n        setIsLoadingCompleted(true);\n      } else {}\n    }).catch(err => {\n      console.error(`Something wrong happened while getting a route:${err.message}`);\n    });\n  };\n\n  const addSection = (sectionTitle, card) => {\n    const newSection = {\n      _id: uuidv4(),\n      title: sectionTitle,\n      cards: [],\n      colorIndex: colorIndex + 1,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n\n    if (card) {\n      newSection.cards.push(card);\n    }\n\n    setColorIndex(colorIndex + 1);\n    fetch('/api/add-column', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        projectId: props._id,\n        title: sectionTitle,\n        colorIndex: colorIndex + 1\n      })\n    }).then(res => res.json()).then(data => {\n      if (data.success) {\n        setIsValid(true);\n      } else {\n        setTimeout(() => {\n          router.replace('/');\n        }, 500);\n        setMessage('URL is not valid.');\n      }\n    }).catch(err => {\n      console.error(`Something wrong happened while getting a route:${err.message}`);\n    });\n    state.columns[newSection._id] = newSection;\n    state.columnOrder.push(newSection._id);\n    setState(_objectSpread({}, state));\n    handleSnackbar(`'${sectionTitle}' is created`, 'success');\n  };\n\n  const addCard = (columnId, cardTitle) => {\n    const newCard = {\n      id: uuidv4(),\n      cardTitle,\n      note: '',\n      isCardCompleted: false,\n      isArchived: false,\n      checklists: [],\n      activities: [],\n      dueDate: undefined,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    addActivity(columnId, newCard.id, `A card with title '${cardTitle}' is created in '${state.columns[columnId].title}'`);\n    updateDate(columnId, '');\n    state.columns[columnId].cards.push(newCard);\n    setState(_objectSpread({}, state));\n  };\n\n  const completeCard = (columnId, cardId) => {\n    let completeCard = {};\n    state.columns[columnId].cards.map((card, index) => {\n      if (card.id === cardId) {\n        card.isCardCompleted = true;\n        completeCard = card;\n        state.columns[columnId].cards.splice(index, 1);\n      }\n    });\n    state.columns[columnId].cards.push(completeCard);\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `Card is completed`);\n    setState(_objectSpread({}, state));\n  };\n\n  const updateSectionTitle = (columnId, sectionTitle) => {\n    state.columns[columnId].title = sectionTitle;\n    state.columns[columnId].updatedAt = new Date();\n    setState(_objectSpread({}, state));\n  };\n\n  const updateCardTitle = (columnId, cardId, cardTitle) => {\n    state.columns[columnId].cards.map(card => {\n      if (card.id === cardId) {\n        card.cardTitle = cardTitle;\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `Card title is changed to ${cardTitle}`);\n    setState(_objectSpread({}, state));\n  };\n\n  const updateCardNote = (columnId, cardId, note) => {\n    state.columns[columnId].cards.map(card => {\n      if (card.id === cardId) {\n        card.note = note;\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `Card note is changed to ||${note}`);\n    setState(_objectSpread({}, state));\n  };\n\n  const deleteColumn = id => {\n    const title = state.columns[id].title;\n    delete state.columns[id];\n    state.columnOrder.splice(state.columnOrder.indexOf(id), 1);\n    handleSnackbar(`'${title}' is deleted`, 'error');\n    setState(_objectSpread({}, state));\n  };\n\n  const deleteCard = (columnId, cardId) => {\n    state.columns[columnId].cards.map((card, index) => {\n      if (card.id === cardId) {\n        state.columns[columnId].cards.splice(index, 1);\n      }\n    });\n    updateDate(columnId, cardId);\n    handleSnackbar('A card is deleted', 'error');\n    setState(_objectSpread({}, state));\n  };\n\n  const archiveCard = (columnId, cardId) => {\n    let tempCard = {};\n    state.columns[columnId].cards.map((card, index) => {\n      if (card.id === cardId) {\n        card.isArchived = true;\n        tempCard = card;\n        state.columns[columnId].cards.splice(index, 1);\n      }\n    });\n    updateDate(columnId, cardId);\n    state.archive.cards.push(tempCard);\n    addActivity('archive', cardId, `Card is archived`);\n    setState(_objectSpread({}, state));\n  };\n\n  const onDragEnd = result => {\n    if (!result.destination) {\n      return;\n    }\n\n    if (result.type === 'column') {\n      const columnOrder = reorderColumn(state.columnOrder, result.source.index, result.destination.index);\n      handleSnackbar(`'${state.columns[state.columnOrder[result.source.index]].title}' and '${state.columns[state.columnOrder[result.destination.index]].title}' are reordered`, 'success');\n      setState(_objectSpread(_objectSpread({}, state), {}, {\n        columnOrder\n      }));\n      return;\n    }\n\n    if (result.source.droppableId === result.destination.droppableId) {\n      const column = state.columns[result.source.droppableId];\n      const cards = reorderCards(column.cards, result.source.index, result.destination.index);\n\n      const newState = _objectSpread(_objectSpread({}, state), {}, {\n        columns: _objectSpread(_objectSpread({}, state.columns), {}, {\n          [column._id]: _objectSpread(_objectSpread({}, column), {}, {\n            cards\n          })\n        })\n      });\n\n      setState(newState);\n      handleSnackbar(`A card is reordered in'${column.title}'`, 'success');\n      return;\n    }\n\n    const sourceColumn = state.columns[result.source.droppableId];\n    const destinationColumn = state.columns[result.destination.droppableId];\n    const card = sourceColumn.cards[result.source.index];\n\n    const newSourceColumn = _objectSpread(_objectSpread({}, sourceColumn), {}, {\n      cards: [...sourceColumn.cards]\n    });\n\n    newSourceColumn.cards.splice(result.source.index, 1);\n\n    const newDestinationColumn = _objectSpread(_objectSpread({}, destinationColumn), {}, {\n      cards: [...destinationColumn.cards]\n    });\n\n    newDestinationColumn.cards.splice(result.destination.index, 0, card);\n\n    const newState = _objectSpread(_objectSpread({}, state), {}, {\n      columns: _objectSpread(_objectSpread({}, state.columns), {}, {\n        [newSourceColumn._id]: newSourceColumn,\n        [newDestinationColumn._id]: newDestinationColumn\n      })\n    });\n\n    handleSnackbar(`A card is moved from '${newSourceColumn.title}' to '${newDestinationColumn.title}'`, 'success');\n    setState(newState);\n  };\n\n  const getItemStyle = (isDragging, draggableStyle) => _objectSpread({\n    display: 'flex',\n    flexDirection: 'row'\n  }, draggableStyle);\n\n  const reorderCards = (list, startIndex, endIndex) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    return result;\n  };\n\n  const reorderColumn = (list, startIndex, endIndex) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    return result;\n  };\n\n  const [open, setOpen] = React.useState(false);\n\n  const setCardForOpen = (columnId, cardId) => {\n    if (columnId === 'archive') {\n      const card = state.archive.cards.filter(card => card.id === cardId);\n      setCurrentCard(card[0]);\n      setCurrentColumn(state.archive);\n    } else {\n      const card = state.columns[columnId].cards.filter(card => card.id === cardId);\n      setCurrentCard(card[0]);\n      setCurrentColumn(state.columns[columnId]);\n    }\n  };\n\n  const handleModalClose = () => {\n    setOpen(false);\n  };\n\n  const addChecklist = (columnId, cardId, checklist) => {\n    state.columns[columnId].cards.map(card => {\n      if (card.id === cardId) {\n        card.checklists.push({\n          id: uuidv4(),\n          checklist,\n          isChecked: false,\n          date: new Date()\n        });\n      }\n    });\n    addActivity(columnId, cardId, `${checklist} is added to the checklist`);\n    updateDate(columnId, cardId);\n    setState(_objectSpread({}, state));\n  };\n\n  const updateDate = (columnId, cardId) => {\n    if (cardId) {\n      state.columns[columnId].cards.map(card => {\n        if (card.id === cardId) {\n          card.updatedAt = new Date();\n        }\n      });\n    }\n\n    state.columns[columnId].updatedAt = new Date();\n    setState(_objectSpread({}, state));\n  };\n\n  const updateChecklist = (columnId, cardId, checklistId, checklistContent) => {\n    state.columns[columnId].cards.map(card => {\n      if (card.id === cardId) {\n        card.checklists.map(checklist => {\n          if (checklist.id === checklistId) {\n            checklist.checklist = checklistContent;\n          }\n        });\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `A checklist is updated to ${checklistContent}`);\n    setState(_objectSpread({}, state));\n  };\n\n  const completeChecklist = (columnId, cardId, checklistId, isChecked) => {\n    state.columns[columnId].cards.map(card => {\n      if (card.id === cardId) {\n        card.checklists.map(checklist => {\n          if (checklist.id === checklistId) {\n            checklist.isChecked = isChecked;\n          }\n        });\n      }\n    });\n    updateDate(columnId, cardId);\n    if (isChecked) addActivity(columnId, cardId, `A checklist is completed`);else addActivity(columnId, cardId, `A checklist is changed to incomplete`);\n    setState(_objectSpread({}, state));\n  };\n\n  const deleteChecklist = (columnId, cardId, checklistId) => {\n    state.columns[columnId].cards.map(card => {\n      if (card.id === cardId) {\n        card.checklists = card.checklists.filter(checklist => checklist.id !== checklistId);\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `A checklist is deleted`);\n    setState(_objectSpread({}, state));\n  };\n\n  const convertDate = date => {\n    const month = date.toString().split(' ')[1];\n    const day = date.toString().split(' ')[2];\n    const year = date.toString().split(' ')[3];\n    return `${month} ${day}, ${year}`;\n  };\n\n  const setDueDate = (columnId, cardId, date) => {\n    state.columns[columnId].cards.map(card => {\n      if (card.id === cardId) {\n        card.dueDate = new Date(date);\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `A due date is set to ${convertDate(date)}`);\n    setState(_objectSpread({}, state));\n  };\n\n  const addActivity = (columnId, cardId, activity) => {\n    if (columnId === 'archive') {\n      state.archive.cards.map(card => {\n        if (card.id === cardId) {\n          card.activities.unshift({\n            id: uuidv4(),\n            activity,\n            createdAt: new Date()\n          });\n        }\n      });\n    } else {\n      state.columns[columnId].cards.map(card => {\n        if (card.id === cardId) {\n          card.activities.unshift({\n            id: uuidv4(),\n            activity,\n            createdAt: new Date()\n          });\n        }\n      });\n    }\n\n    if (activity.toLowerCase().includes('archive')) {\n      handleSnackbar(activity, 'warning');\n    } else {\n      handleSnackbar(activity, 'info');\n    }\n\n    setState(_objectSpread({}, state));\n  };\n\n  const changeProjectName = projectName => {\n    handleSnackbar(`Project name is changed to '${projectName}'`, 'info');\n    props.setProjectName(projectName);\n  };\n\n  const handleSnackbar = (message, variant) => {\n    enqueueSnackbar(message, {\n      variant\n    });\n  };\n\n  return __jsx(React.Fragment, null, isLoadingCompleted && __jsx(React.Fragment, null, __jsx(Top, {\n    _id: props._id,\n    setProjectName: changeProjectName,\n    projectName: props.projectName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 592,\n      columnNumber: 11\n    }\n  }), __jsx(\"div\", {\n    className: \"board\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 597,\n      columnNumber: 11\n    }\n  }, __jsx(DragDropContext, {\n    onDragEnd: onDragEnd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 598,\n      columnNumber: 13\n    }\n  }, __jsx(Droppable, {\n    direction: \"horizontal\",\n    droppableId: \"all-droppables\",\n    type: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 599,\n      columnNumber: 15\n    }\n  }, (provided, snapshot) => __jsx(\"div\", _extends({\n    ref: provided.innerRef\n  }, provided.droppableProps, {\n    style: getItemStyle(snapshot.isDragging, provided.droppableProps.style),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 605,\n      columnNumber: 19\n    }\n  }), state.columnOrder.map((columnId, index) => {\n    return __jsx(Column, {\n      key: columnId,\n      column: state.columns[columnId],\n      index: index,\n      addCard: addCard,\n      setOpen: setOpen,\n      setCardForOpen: setCardForOpen,\n      updateSectionTitle: updateSectionTitle,\n      deleteColumn: deleteColumn // onDragEnd={onDragEnd}\n      ,\n      convertDate: convertDate,\n      open: true,\n      projectName: props.projectName,\n      handleModalClose: handleModalClose,\n      addChecklist: addChecklist,\n      updateChecklist: updateChecklist,\n      addActivity: addActivity,\n      updateDate: updateDate,\n      updateCardTitle: updateCardTitle,\n      updateCardNote: updateCardNote,\n      completeChecklist: completeChecklist,\n      deleteChecklist: deleteChecklist,\n      setDueDate: setDueDate,\n      completeCard: completeCard,\n      deleteCard: deleteCard,\n      archiveCard: archiveCard,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 616,\n        columnNumber: 27\n      }\n    });\n  }), provided.placeholder))), state.archive.cards.length > 0 && __jsx(Archive, {\n    index: 0 // onDragEnd={onDragEnd}\n    ,\n    column: state.archive,\n    setCardForOpen: setCardForOpen,\n    convertDate: convertDate,\n    setOpen: setOpen,\n    open: true,\n    projectName: props.projectName,\n    handleModalClose: handleModalClose,\n    updateSectionTitle: updateSectionTitle,\n    deleteColumn: deleteColumn,\n    addChecklist: addChecklist,\n    updateChecklist: updateChecklist,\n    addActivity: addActivity,\n    updateDate: updateDate,\n    updateCardTitle: updateCardTitle,\n    updateCardNote: updateCardNote,\n    completeChecklist: completeChecklist,\n    deleteChecklist: deleteChecklist,\n    setDueDate: setDueDate,\n    completeCard: completeCard,\n    deleteCard: deleteCard,\n    archiveCard: archiveCard,\n    addCard: addCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 652,\n      columnNumber: 15\n    }\n  }), __jsx(AddSection, {\n    colorIndex: colorIndex,\n    addSection: addSection,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 679,\n      columnNumber: 13\n    }\n  })), open && __jsx(CardModal, {\n    open: true,\n    projectName: props.projectName,\n    currentColumn: currentColumn,\n    handleModalClose: handleModalClose,\n    currentCard: currentCard,\n    addChecklist: addChecklist,\n    updateChecklist: updateChecklist,\n    addActivity: addActivity,\n    updateDate: updateDate,\n    updateCardTitle: updateCardTitle,\n    updateCardNote: updateCardNote,\n    completeChecklist: completeChecklist,\n    deleteChecklist: deleteChecklist,\n    setDueDate: setDueDate,\n    convertDate: convertDate,\n    completeCard: completeCard,\n    deleteCard: deleteCard,\n    archiveCard: archiveCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 682,\n      columnNumber: 13\n    }\n  })));\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/heegupark/Desktop/Workspace/MyProject/omega-kanban/components/board.tsx"],"names":["React","useState","useEffect","DragDropContext","Droppable","v4","uuidv4","Top","Column","AddSection","Archive","CardModal","useSnackbar","Board","props","enqueueSnackbar","state","setState","columns","columnOrder","archive","_id","title","cards","colorIndex","createdAt","Date","updatedAt","setColorIndex","currentCard","setCurrentCard","currentColumn","setCurrentColumn","isLoadingCompleted","setIsLoadingCompleted","length","getColumns","fetch","method","headers","body","JSON","stringify","then","res","json","data","success","console","log","map","column","push","catch","err","error","message","addSection","sectionTitle","card","newSection","projectId","setIsValid","setTimeout","router","replace","setMessage","handleSnackbar","addCard","columnId","cardTitle","newCard","id","note","isCardCompleted","isArchived","checklists","activities","dueDate","undefined","addActivity","updateDate","completeCard","cardId","index","splice","updateSectionTitle","updateCardTitle","updateCardNote","deleteColumn","indexOf","deleteCard","archiveCard","tempCard","onDragEnd","result","destination","type","reorderColumn","source","droppableId","reorderCards","newState","sourceColumn","destinationColumn","newSourceColumn","newDestinationColumn","getItemStyle","isDragging","draggableStyle","display","flexDirection","list","startIndex","endIndex","Array","from","removed","open","setOpen","setCardForOpen","filter","handleModalClose","addChecklist","checklist","isChecked","date","updateChecklist","checklistId","checklistContent","completeChecklist","deleteChecklist","convertDate","month","toString","split","day","year","setDueDate","activity","unshift","toLowerCase","includes","changeProjectName","projectName","setProjectName","variant","provided","snapshot","innerRef","droppableProps","style","placeholder"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { v4 as uuidv4 } from 'uuid';\nimport Top from './top';\nimport Column from './column';\nimport AddSection from './add-section';\nimport Archive from './archive';\nimport CardModal from './card-modal';\nimport { VariantType, useSnackbar } from 'notistack';\nimport IMainProps from './interfaces/imainprops';\nimport IColumns from './interfaces/icolumns';\nimport ICard from './interfaces/icard';\nimport ISection from './interfaces/isection';\nimport IChecklist from './interfaces/ichecklist';\n\nfunction Board(props: IMainProps) {\n  const { enqueueSnackbar } = useSnackbar();\n  // const [state, setState] = useState<IColumns>({\n  //   columns: {\n  //     'column-0': {\n  //       id: 'column-0',\n  //       title: 'Plan',\n  //       cards: [\n  //         {\n  //           id: uuidv4(),\n  //           cardTitle: 'Create HTML skeleton',\n  //           note: '',\n  //           isCardCompleted: false,\n  //           isArchived: false,\n  //           checklists: [],\n  //           activities: [],\n  //           dueDate: new Date(2020, 9, 11),\n  //           createdAt: new Date(2020, 8, 11),\n  //           updatedAt: new Date(2020, 8, 11),\n  //         },\n  //       ],\n  //       colorIndex: 0,\n  //       createdAt: new Date(2020, 8, 1),\n  //       updatedAt: new Date(2020, 8, 11),\n  //     },\n  //     'column-1': {\n  //       id: 'column-1',\n  //       title: 'Progress',\n  //       cards: [],\n  //       colorIndex: 1,\n  //       createdAt: new Date(2020, 8, 2),\n  //       updatedAt: new Date(2020, 8, 2),\n  //     },\n  //     'column-2': {\n  //       id: 'column-2',\n  //       title: 'Complete',\n  //       cards: [],\n  //       colorIndex: 2,\n  //       createdAt: new Date(2020, 8, 3),\n  //       updatedAt: new Date(2020, 8, 3),\n  //     },\n  //   },\n  //   columnOrder: ['column-0', 'column-1', 'column-2'],\n  //   archive: {\n  //     id: 'archive',\n  //     title: 'Archive',\n  //     cards: [],\n  //     colorIndex: 0,\n  //     createdAt: new Date(),\n  //     updatedAt: new Date(),\n  //   },\n  // });\n\n  const [state, setState] = useState<IColumns>({\n    columns: {},\n    columnOrder: [],\n    archive: {\n      _id: 'archive',\n      title: 'Archive',\n      cards: [],\n      colorIndex: 0,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    },\n  });\n\n  const [colorIndex, setColorIndex] = useState(0);\n  const [currentCard, setCurrentCard] = useState<ICard>();\n  const [currentColumn, setCurrentColumn] = useState<ISection>();\n  const [isLoadingCompleted, setIsLoadingCompleted] = useState(false);\n  useEffect(() => {\n    setColorIndex(state.columnOrder.length - 1);\n  }, []);\n\n  useEffect(() => {\n    getColumns(props._id);\n  }, []);\n\n  const getColumns = (_id: String) => {\n    fetch(`/api/get-columns`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        _id,\n      }),\n    })\n      .then((res) => res.json())\n      .then((data: any) => {\n        if (data.success) {\n          console.log(data.data);\n          data.data.map((column: ISection) => {\n            state.columns[column._id] = column;\n            state.columnOrder.push(column._id);\n            setState({\n              ...state,\n            });\n          });\n          console.log(state);\n          setIsLoadingCompleted(true);\n        } else {\n        }\n      })\n      .catch((err) => {\n        console.error(\n          `Something wrong happened while getting a route:${err.message}`\n        );\n      });\n  };\n\n  const addSection = (sectionTitle: string, card: ICard | undefined) => {\n    const newSection: ISection = {\n      _id: uuidv4(),\n      title: sectionTitle,\n      cards: [],\n      colorIndex: colorIndex + 1,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    if (card) {\n      newSection.cards.push(card);\n    }\n    setColorIndex(colorIndex + 1);\n    fetch('/api/add-column', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        projectId: props._id,\n        title: sectionTitle,\n        colorIndex: colorIndex + 1,\n      }),\n    })\n      .then((res) => res.json())\n      .then((data: ISection) => {\n        if (data.success) {\n          setIsValid(true);\n        } else {\n          setTimeout(() => {\n            router.replace('/');\n          }, 500);\n          setMessage('URL is not valid.');\n        }\n      })\n      .catch((err) => {\n        console.error(\n          `Something wrong happened while getting a route:${err.message}`\n        );\n      });\n    state.columns[newSection._id] = newSection;\n    state.columnOrder.push(newSection._id);\n    setState({\n      ...state,\n    });\n    handleSnackbar(`'${sectionTitle}' is created`, 'success');\n  };\n\n  const addCard = (columnId: string, cardTitle: string) => {\n    const newCard = {\n      id: uuidv4(),\n      cardTitle,\n      note: '',\n      isCardCompleted: false,\n      isArchived: false,\n      checklists: [],\n      activities: [],\n      dueDate: undefined,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    addActivity(\n      columnId,\n      newCard.id,\n      `A card with title '${cardTitle}' is created in '${state.columns[columnId].title}'`\n    );\n    updateDate(columnId, '');\n    state.columns[columnId].cards.push(newCard);\n    setState({\n      ...state,\n    });\n  };\n\n  const completeCard = (columnId: string, cardId: string) => {\n    let completeCard: ICard = {} as ICard;\n    state.columns[columnId].cards.map((card: ICard, index: number) => {\n      if (card.id === cardId) {\n        card.isCardCompleted = true;\n        completeCard = card;\n        state.columns[columnId].cards.splice(index, 1);\n      }\n    });\n    state.columns[columnId].cards.push(completeCard);\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `Card is completed`);\n    setState({\n      ...state,\n    });\n  };\n  const updateSectionTitle = (columnId: string, sectionTitle: string) => {\n    state.columns[columnId].title = sectionTitle;\n    state.columns[columnId].updatedAt = new Date();\n    setState({\n      ...state,\n    });\n  };\n\n  const updateCardTitle = (\n    columnId: string,\n    cardId: string,\n    cardTitle: string\n  ) => {\n    state.columns[columnId].cards.map((card: ICard) => {\n      if (card.id === cardId) {\n        card.cardTitle = cardTitle;\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `Card title is changed to ${cardTitle}`);\n    setState({\n      ...state,\n    });\n  };\n\n  const updateCardNote = (columnId: string, cardId: string, note: string) => {\n    state.columns[columnId].cards.map((card: ICard) => {\n      if (card.id === cardId) {\n        card.note = note;\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `Card note is changed to ||${note}`);\n    setState({\n      ...state,\n    });\n  };\n\n  const deleteColumn = (id: string) => {\n    const title = state.columns[id].title;\n    delete state.columns[id];\n    state.columnOrder.splice(state.columnOrder.indexOf(id), 1);\n    handleSnackbar(`'${title}' is deleted`, 'error');\n    setState({\n      ...state,\n    });\n  };\n\n  const deleteCard = (columnId: string, cardId: string) => {\n    state.columns[columnId].cards.map((card: ICard, index: number) => {\n      if (card.id === cardId) {\n        state.columns[columnId].cards.splice(index, 1);\n      }\n    });\n    updateDate(columnId, cardId);\n    handleSnackbar('A card is deleted', 'error');\n    setState({\n      ...state,\n    });\n  };\n\n  const archiveCard = (columnId: string, cardId: string) => {\n    let tempCard: ICard = {} as ICard;\n    state.columns[columnId].cards.map((card: ICard, index: number) => {\n      if (card.id === cardId) {\n        card.isArchived = true;\n        tempCard = card;\n        state.columns[columnId].cards.splice(index, 1);\n      }\n    });\n    updateDate(columnId, cardId);\n    state.archive.cards.push(tempCard);\n    addActivity('archive', cardId, `Card is archived`);\n    setState({\n      ...state,\n    });\n  };\n\n  const onDragEnd = (result: any) => {\n    if (!result.destination) {\n      return;\n    }\n\n    if (result.type === 'column') {\n      const columnOrder: Array<string> = reorderColumn(\n        state.columnOrder,\n        result.source.index,\n        result.destination.index\n      );\n      handleSnackbar(\n        `'${\n          state.columns[state.columnOrder[result.source.index]].title\n        }' and '${\n          state.columns[state.columnOrder[result.destination.index]].title\n        }' are reordered`,\n        'success'\n      );\n      setState({\n        ...state,\n        columnOrder,\n      });\n      return;\n    }\n\n    if (result.source.droppableId === result.destination.droppableId) {\n      const column = state.columns[result.source.droppableId];\n      const cards = reorderCards(\n        column.cards,\n        result.source.index,\n        result.destination.index\n      );\n\n      const newState = {\n        ...state,\n        columns: {\n          ...state.columns,\n          [column._id]: {\n            ...column,\n            cards,\n          },\n        },\n      };\n      setState(newState);\n      handleSnackbar(`A card is reordered in'${column.title}'`, 'success');\n      return;\n    }\n\n    const sourceColumn = state.columns[result.source.droppableId];\n    const destinationColumn = state.columns[result.destination.droppableId];\n    const card = sourceColumn.cards[result.source.index];\n\n    const newSourceColumn = {\n      ...sourceColumn,\n      cards: [...sourceColumn.cards],\n    };\n    newSourceColumn.cards.splice(result.source.index, 1);\n\n    const newDestinationColumn = {\n      ...destinationColumn,\n      cards: [...destinationColumn.cards],\n    };\n    newDestinationColumn.cards.splice(result.destination.index, 0, card);\n\n    const newState = {\n      ...state,\n      columns: {\n        ...state.columns,\n        [newSourceColumn._id]: newSourceColumn,\n        [newDestinationColumn._id]: newDestinationColumn,\n      },\n    };\n    handleSnackbar(\n      `A card is moved from '${newSourceColumn.title}' to '${newDestinationColumn.title}'`,\n      'success'\n    );\n    setState(newState);\n  };\n\n  const getItemStyle = (isDragging: boolean, draggableStyle: any) => ({\n    display: 'flex',\n    flexDirection: 'row',\n    ...draggableStyle,\n  });\n\n  const reorderCards = (\n    list: Array<ICard>,\n    startIndex: number,\n    endIndex: number\n  ) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    return result;\n  };\n\n  const reorderColumn = (\n    list: Array<string>,\n    startIndex: number,\n    endIndex: number\n  ) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    return result;\n  };\n\n  const [open, setOpen] = React.useState(false);\n  const setCardForOpen = (columnId: string, cardId: string) => {\n    if (columnId === 'archive') {\n      const card = state.archive.cards.filter(\n        (card: ICard) => card.id === cardId\n      );\n      setCurrentCard(card[0]);\n      setCurrentColumn(state.archive);\n    } else {\n      const card = state.columns[columnId].cards.filter(\n        (card: ICard) => card.id === cardId\n      );\n      setCurrentCard(card[0]);\n      setCurrentColumn(state.columns[columnId]);\n    }\n  };\n\n  const handleModalClose = () => {\n    setOpen(false);\n  };\n\n  const addChecklist = (\n    columnId: string,\n    cardId: string,\n    checklist: string\n  ) => {\n    state.columns[columnId].cards.map((card: ICard) => {\n      if (card.id === cardId) {\n        card.checklists.push({\n          id: uuidv4(),\n          checklist,\n          isChecked: false,\n          date: new Date(),\n        });\n      }\n    });\n    addActivity(columnId, cardId, `${checklist} is added to the checklist`);\n    updateDate(columnId, cardId);\n    setState({\n      ...state,\n    });\n  };\n\n  const updateDate = (columnId: string, cardId: string) => {\n    if (cardId) {\n      state.columns[columnId].cards.map((card: ICard) => {\n        if (card.id === cardId) {\n          card.updatedAt = new Date();\n        }\n      });\n    }\n    state.columns[columnId].updatedAt = new Date();\n    setState({\n      ...state,\n    });\n  };\n\n  const updateChecklist = (\n    columnId: string,\n    cardId: string,\n    checklistId: string,\n    checklistContent: string\n  ) => {\n    state.columns[columnId].cards.map((card: ICard) => {\n      if (card.id === cardId) {\n        card.checklists.map((checklist: IChecklist) => {\n          if (checklist.id === checklistId) {\n            checklist.checklist = checklistContent;\n          }\n        });\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(\n      columnId,\n      cardId,\n      `A checklist is updated to ${checklistContent}`\n    );\n    setState({\n      ...state,\n    });\n  };\n\n  const completeChecklist = (\n    columnId: string,\n    cardId: string,\n    checklistId: string,\n    isChecked: boolean\n  ) => {\n    state.columns[columnId].cards.map((card: ICard) => {\n      if (card.id === cardId) {\n        card.checklists.map((checklist: IChecklist) => {\n          if (checklist.id === checklistId) {\n            checklist.isChecked = isChecked;\n          }\n        });\n      }\n    });\n    updateDate(columnId, cardId);\n    if (isChecked) addActivity(columnId, cardId, `A checklist is completed`);\n    else addActivity(columnId, cardId, `A checklist is changed to incomplete`);\n    setState({\n      ...state,\n    });\n  };\n\n  const deleteChecklist = (\n    columnId: string,\n    cardId: string,\n    checklistId: string\n  ) => {\n    state.columns[columnId].cards.map((card: ICard) => {\n      if (card.id === cardId) {\n        card.checklists = card.checklists.filter(\n          (checklist: IChecklist) => checklist.id !== checklistId\n        );\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `A checklist is deleted`);\n    setState({\n      ...state,\n    });\n  };\n\n  const convertDate = (date: Date) => {\n    const month = date.toString().split(' ')[1];\n    const day = date.toString().split(' ')[2];\n    const year = date.toString().split(' ')[3];\n    return `${month} ${day}, ${year}`;\n  };\n\n  const setDueDate = (columnId: string, cardId: string, date: Date) => {\n    state.columns[columnId].cards.map((card: ICard) => {\n      if (card.id === cardId) {\n        card.dueDate = new Date(date);\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `A due date is set to ${convertDate(date)}`);\n    setState({\n      ...state,\n    });\n  };\n\n  const addActivity = (columnId: string, cardId: string, activity: string) => {\n    if (columnId === 'archive') {\n      state.archive.cards.map((card: ICard) => {\n        if (card.id === cardId) {\n          card.activities.unshift({\n            id: uuidv4(),\n            activity,\n            createdAt: new Date(),\n          });\n        }\n      });\n    } else {\n      state.columns[columnId].cards.map((card: ICard) => {\n        if (card.id === cardId) {\n          card.activities.unshift({\n            id: uuidv4(),\n            activity,\n            createdAt: new Date(),\n          });\n        }\n      });\n    }\n    if (activity.toLowerCase().includes('archive')) {\n      handleSnackbar(activity, 'warning');\n    } else {\n      handleSnackbar(activity, 'info');\n    }\n    setState({\n      ...state,\n    });\n  };\n\n  const changeProjectName = (projectName: string) => {\n    handleSnackbar(`Project name is changed to '${projectName}'`, 'info');\n    props.setProjectName(projectName);\n  };\n\n  const handleSnackbar = (message: string, variant: VariantType) => {\n    enqueueSnackbar(message, { variant });\n  };\n\n  return (\n    <>\n      {isLoadingCompleted && (\n        <>\n          <Top\n            _id={props._id}\n            setProjectName={changeProjectName}\n            projectName={props.projectName}\n          />\n          <div className=\"board\">\n            <DragDropContext onDragEnd={onDragEnd}>\n              <Droppable\n                direction=\"horizontal\"\n                droppableId=\"all-droppables\"\n                type=\"column\"\n              >\n                {(provided: any, snapshot: any) => (\n                  <div\n                    ref={provided.innerRef}\n                    {...provided.droppableProps}\n                    style={getItemStyle(\n                      snapshot.isDragging,\n                      provided.droppableProps.style\n                    )}\n                  >\n                    {state.columnOrder.map(\n                      (columnId: string, index: number) => {\n                        return (\n                          <Column\n                            key={columnId}\n                            column={state.columns[columnId]}\n                            index={index}\n                            addCard={addCard}\n                            setOpen={setOpen}\n                            setCardForOpen={setCardForOpen}\n                            updateSectionTitle={updateSectionTitle}\n                            deleteColumn={deleteColumn}\n                            // onDragEnd={onDragEnd}\n                            convertDate={convertDate}\n                            open={true}\n                            projectName={props.projectName}\n                            handleModalClose={handleModalClose}\n                            addChecklist={addChecklist}\n                            updateChecklist={updateChecklist}\n                            addActivity={addActivity}\n                            updateDate={updateDate}\n                            updateCardTitle={updateCardTitle}\n                            updateCardNote={updateCardNote}\n                            completeChecklist={completeChecklist}\n                            deleteChecklist={deleteChecklist}\n                            setDueDate={setDueDate}\n                            completeCard={completeCard}\n                            deleteCard={deleteCard}\n                            archiveCard={archiveCard}\n                          />\n                        );\n                      }\n                    )}\n                    {provided.placeholder}\n                  </div>\n                )}\n              </Droppable>\n            </DragDropContext>\n            {state.archive.cards.length > 0 && (\n              <Archive\n                index={0}\n                // onDragEnd={onDragEnd}\n                column={state.archive}\n                setCardForOpen={setCardForOpen}\n                convertDate={convertDate}\n                setOpen={setOpen}\n                open={true}\n                projectName={props.projectName}\n                handleModalClose={handleModalClose}\n                updateSectionTitle={updateSectionTitle}\n                deleteColumn={deleteColumn}\n                addChecklist={addChecklist}\n                updateChecklist={updateChecklist}\n                addActivity={addActivity}\n                updateDate={updateDate}\n                updateCardTitle={updateCardTitle}\n                updateCardNote={updateCardNote}\n                completeChecklist={completeChecklist}\n                deleteChecklist={deleteChecklist}\n                setDueDate={setDueDate}\n                completeCard={completeCard}\n                deleteCard={deleteCard}\n                archiveCard={archiveCard}\n                addCard={addCard}\n              />\n            )}\n            <AddSection colorIndex={colorIndex} addSection={addSection} />\n          </div>\n          {open && (\n            <CardModal\n              open={true}\n              projectName={props.projectName}\n              currentColumn={currentColumn}\n              handleModalClose={handleModalClose}\n              currentCard={currentCard}\n              addChecklist={addChecklist}\n              updateChecklist={updateChecklist}\n              addActivity={addActivity}\n              updateDate={updateDate}\n              updateCardTitle={updateCardTitle}\n              updateCardNote={updateCardNote}\n              completeChecklist={completeChecklist}\n              deleteChecklist={deleteChecklist}\n              setDueDate={setDueDate}\n              convertDate={convertDate}\n              completeCard={completeCard}\n              deleteCard={deleteCard}\n              archiveCard={archiveCard}\n            />\n          )}\n        </>\n      )}\n    </>\n  );\n}\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}