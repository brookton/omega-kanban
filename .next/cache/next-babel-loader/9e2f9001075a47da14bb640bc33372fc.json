{"ast":null,"code":"var _jsxFileName = \"/Users/heegupark/Desktop/Workspace/MyProject/omega-kanban/components/simple.jsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// disabling flowtype to keep this example super simple\n// It matches\n\n/* eslint-disable flowtype/require-valid-file-annotation */\nimport React, { Component } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'; // fake data generator\n\nconst getItems = count => Array.from({\n  length: count\n}, (v, k) => k).map(k => ({\n  id: `item-${k}`,\n  content: `item ${k}`\n})); // a little function to help us with reordering the result\n\n\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n  return result;\n};\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => _objectSpread({\n  // some basic styles to make the items look a bit nicer\n  userSelect: 'none',\n  padding: grid * 2,\n  margin: `0 0 ${grid}px 0`,\n  // change background colour if dragging\n  background: isDragging ? 'lightgreen' : 'red'\n}, draggableStyle);\n\nconst getListStyle = isDraggingOver => ({\n  background: isDraggingOver ? 'lightblue' : 'grey',\n  padding: grid,\n  width: 250\n});\n\nexport default class App extends Component {\n  constructor(props, context) {\n    super(props, context); // eslint-disable-next-line react/state-in-constructor\n\n    this.state = {\n      items: getItems(10)\n    };\n    this.onDragEnd = this.onDragEnd.bind(this);\n  }\n\n  onDragEnd(result) {\n    // dropped outside the list\n    if (!result.destination) {\n      return;\n    }\n\n    const items = reorder(this.state.items, result.source.index, result.destination.index);\n    this.setState({\n      items\n    });\n  } // Normally you would want to split things out into separate components.\n  // But in this example everything is just done in one place for simplicity\n\n\n  render() {\n    return __jsx(DragDropContext, {\n      onDragEnd: this.onDragEnd,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 7\n      }\n    }, __jsx(Droppable, {\n      droppableId: \"droppable\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }\n    }, (droppableProvided, droppableSnapshot) => __jsx(\"div\", {\n      ref: droppableProvided.innerRef,\n      style: getListStyle(droppableSnapshot.isDraggingOver),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }\n    }, this.state.items.map((item, index) => __jsx(Draggable, {\n      key: item.id,\n      draggableId: item.id,\n      index: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }\n    }, (draggableProvided, draggableSnapshot) => __jsx(\"div\", _extends({\n      ref: draggableProvided.innerRef\n    }, draggableProvided.draggableProps, draggableProvided.dragHandleProps, {\n      style: getItemStyle(draggableSnapshot.isDragging, draggableProvided.draggableProps.style),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 21\n      }\n    }), item.content))), droppableProvided.placeholder)));\n  }\n\n}","map":{"version":3,"sources":["/Users/heegupark/Desktop/Workspace/MyProject/omega-kanban/components/simple.jsx"],"names":["React","Component","DragDropContext","Droppable","Draggable","getItems","count","Array","from","length","v","k","map","id","content","reorder","list","startIndex","endIndex","result","removed","splice","grid","getItemStyle","isDragging","draggableStyle","userSelect","padding","margin","background","getListStyle","isDraggingOver","width","App","constructor","props","context","state","items","onDragEnd","bind","destination","source","index","setState","render","droppableProvided","droppableSnapshot","innerRef","item","draggableProvided","draggableSnapshot","draggableProps","dragHandleProps","style","placeholder"],"mappings":"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","sourcesContent":["// disabling flowtype to keep this example super simple\n// It matches\n/* eslint-disable flowtype/require-valid-file-annotation */\n\nimport React, { Component } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n\n// fake data generator\nconst getItems = (count) =>\n  Array.from({ length: count }, (v, k) => k).map((k) => ({\n    id: `item-${k}`,\n    content: `item ${k}`,\n  }));\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: 'none',\n  padding: grid * 2,\n  margin: `0 0 ${grid}px 0`,\n\n  // change background colour if dragging\n  background: isDragging ? 'lightgreen' : 'red',\n\n  // styles we need to apply on draggables\n  ...draggableStyle,\n});\n\nconst getListStyle = (isDraggingOver) => ({\n  background: isDraggingOver ? 'lightblue' : 'grey',\n  padding: grid,\n  width: 250,\n});\n\nexport default class App extends Component {\n  constructor(props, context) {\n    super(props, context);\n    // eslint-disable-next-line react/state-in-constructor\n    this.state = {\n      items: getItems(10),\n    };\n    this.onDragEnd = this.onDragEnd.bind(this);\n  }\n\n  onDragEnd(result) {\n    // dropped outside the list\n    if (!result.destination) {\n      return;\n    }\n\n    const items = reorder(\n      this.state.items,\n      result.source.index,\n      result.destination.index\n    );\n\n    this.setState({\n      items,\n    });\n  }\n\n  // Normally you would want to split things out into separate components.\n  // But in this example everything is just done in one place for simplicity\n  render() {\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        <Droppable droppableId=\"droppable\">\n          {(droppableProvided, droppableSnapshot) => (\n            <div\n              ref={droppableProvided.innerRef}\n              style={getListStyle(droppableSnapshot.isDraggingOver)}\n            >\n              {this.state.items.map((item, index) => (\n                <Draggable key={item.id} draggableId={item.id} index={index}>\n                  {(draggableProvided, draggableSnapshot) => (\n                    <div\n                      ref={draggableProvided.innerRef}\n                      {...draggableProvided.draggableProps}\n                      {...draggableProvided.dragHandleProps}\n                      style={getItemStyle(\n                        draggableSnapshot.isDragging,\n                        draggableProvided.draggableProps.style\n                      )}\n                    >\n                      {item.content}\n                    </div>\n                  )}\n                </Draggable>\n              ))}\n              {droppableProvided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      </DragDropContext>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}