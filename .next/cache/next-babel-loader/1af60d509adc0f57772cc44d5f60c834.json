{"ast":null,"code":"import Router from '../../middleware/models/router';\nimport Column from '../../middleware/models/column';\nimport { v4 as uuidv4 } from 'uuid';\n\nrequire('../../middleware/db/mongoose');\n\nimport mongoose from 'mongoose';\nconst ObjectId = mongoose.Types.ObjectId;\nexport default (async (request, response) => {\n  const {\n    project\n  } = request.body;\n\n  const _id = ObjectId(uuidv4());\n\n  try {\n    const newProject = new Router({\n      project\n    });\n    await newProject.save();\n\n    try {\n      try {\n        const planColumn = new Column({\n          _id,\n          projectId: newProject._id,\n          title: 'Plan',\n          colorIndex: 0\n        });\n        await planColumn.save();\n        const progressColumn = new Column({\n          _id,\n          projectId: newProject._id,\n          title: 'Progress',\n          colorIndex: 1\n        });\n        await progressColumn.save();\n        const completeColumn = new Column({\n          _id,\n          projectId: newProject._id,\n          title: 'Complete',\n          colorIndex: 2\n        });\n        await completeColumn.save();\n        const archiveColumn = new Column({\n          _id,\n          projectId: newProject._id,\n          title: 'Archive',\n          colorIndex: 2,\n          category: 'archive'\n        });\n        await archiveColumn.save();\n        return response.status(200).json({\n          success: true,\n          data: newProject\n        });\n      } catch (e) {\n        return response.status(500).json({\n          success: false,\n          message: 'failed to create basic columns'\n        });\n      }\n    } catch (e) {\n      return response.status(500).json({\n        success: false,\n        message: 'failed to add router'\n      });\n    }\n  } catch (e) {\n    return response.status(500).json({\n      success: false,\n      message: 'failed to add router'\n    });\n  }\n});","map":{"version":3,"sources":["/Users/heegupark/Desktop/Workspace/MyProject/omega-kanban/pages/api/add-router.tsx"],"names":["Router","Column","v4","uuidv4","require","mongoose","ObjectId","Types","request","response","project","body","_id","newProject","save","planColumn","projectId","title","colorIndex","progressColumn","completeColumn","archiveColumn","category","status","json","success","data","e","message"],"mappings":"AACA,OAAOA,MAAP,MAAmB,gCAAnB;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;;AACAC,OAAO,CAAC,8BAAD,CAAP;;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,MAAMC,QAAQ,GAAGD,QAAQ,CAACE,KAAT,CAAeD,QAAhC;AAEA,gBAAe,OAAOE,OAAP,EAAgCC,QAAhC,KAA8D;AAC3E,QAAM;AAAEC,IAAAA;AAAF,MAAcF,OAAO,CAACG,IAA5B;;AACA,QAAMC,GAAG,GAAGN,QAAQ,CAACH,MAAM,EAAP,CAApB;;AACA,MAAI;AACF,UAAMU,UAAU,GAAG,IAAIb,MAAJ,CAAW;AAAEU,MAAAA;AAAF,KAAX,CAAnB;AACA,UAAMG,UAAU,CAACC,IAAX,EAAN;;AACA,QAAI;AACF,UAAI;AACF,cAAMC,UAAU,GAAG,IAAId,MAAJ,CAAW;AAC5BW,UAAAA,GAD4B;AAE5BI,UAAAA,SAAS,EAAEH,UAAU,CAACD,GAFM;AAG5BK,UAAAA,KAAK,EAAE,MAHqB;AAI5BC,UAAAA,UAAU,EAAE;AAJgB,SAAX,CAAnB;AAMA,cAAMH,UAAU,CAACD,IAAX,EAAN;AAEA,cAAMK,cAAc,GAAG,IAAIlB,MAAJ,CAAW;AAChCW,UAAAA,GADgC;AAEhCI,UAAAA,SAAS,EAAEH,UAAU,CAACD,GAFU;AAGhCK,UAAAA,KAAK,EAAE,UAHyB;AAIhCC,UAAAA,UAAU,EAAE;AAJoB,SAAX,CAAvB;AAMA,cAAMC,cAAc,CAACL,IAAf,EAAN;AAEA,cAAMM,cAAc,GAAG,IAAInB,MAAJ,CAAW;AAChCW,UAAAA,GADgC;AAEhCI,UAAAA,SAAS,EAAEH,UAAU,CAACD,GAFU;AAGhCK,UAAAA,KAAK,EAAE,UAHyB;AAIhCC,UAAAA,UAAU,EAAE;AAJoB,SAAX,CAAvB;AAMA,cAAME,cAAc,CAACN,IAAf,EAAN;AAEA,cAAMO,aAAa,GAAG,IAAIpB,MAAJ,CAAW;AAC/BW,UAAAA,GAD+B;AAE/BI,UAAAA,SAAS,EAAEH,UAAU,CAACD,GAFS;AAG/BK,UAAAA,KAAK,EAAE,SAHwB;AAI/BC,UAAAA,UAAU,EAAE,CAJmB;AAK/BI,UAAAA,QAAQ,EAAE;AALqB,SAAX,CAAtB;AAOA,cAAMD,aAAa,CAACP,IAAd,EAAN;AAEA,eAAOL,QAAQ,CAACc,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAAEC,UAAAA,OAAO,EAAE,IAAX;AAAiBC,UAAAA,IAAI,EAAEb;AAAvB,SAA1B,CAAP;AACD,OAnCD,CAmCE,OAAOc,CAAP,EAAU;AACV,eAAOlB,QAAQ,CAACc,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAC/BC,UAAAA,OAAO,EAAE,KADsB;AAE/BG,UAAAA,OAAO,EAAE;AAFsB,SAA1B,CAAP;AAID;AACF,KA1CD,CA0CE,OAAOD,CAAP,EAAU;AACV,aAAOlB,QAAQ,CAACc,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAC/BC,QAAAA,OAAO,EAAE,KADsB;AAE/BG,QAAAA,OAAO,EAAE;AAFsB,OAA1B,CAAP;AAID;AACF,GAnDD,CAmDE,OAAOD,CAAP,EAAU;AACV,WAAOlB,QAAQ,CACZc,MADI,CACG,GADH,EAEJC,IAFI,CAEC;AAAEC,MAAAA,OAAO,EAAE,KAAX;AAAkBG,MAAAA,OAAO,EAAE;AAA3B,KAFD,CAAP;AAGD;AACF,CA3DD","sourcesContent":["import { NextApiRequest, NextApiResponse } from 'next';\nimport Router from '../../middleware/models/router';\nimport Column from '../../middleware/models/column';\nimport { v4 as uuidv4 } from 'uuid';\nrequire('../../middleware/db/mongoose');\nimport mongoose from 'mongoose';\nconst ObjectId = mongoose.Types.ObjectId;\n\nexport default async (request: NextApiRequest, response: NextApiResponse) => {\n  const { project } = request.body;\n  const _id = ObjectId(uuidv4());\n  try {\n    const newProject = new Router({ project });\n    await newProject.save();\n    try {\n      try {\n        const planColumn = new Column({\n          _id,\n          projectId: newProject._id,\n          title: 'Plan',\n          colorIndex: 0,\n        });\n        await planColumn.save();\n\n        const progressColumn = new Column({\n          _id,\n          projectId: newProject._id,\n          title: 'Progress',\n          colorIndex: 1,\n        });\n        await progressColumn.save();\n\n        const completeColumn = new Column({\n          _id,\n          projectId: newProject._id,\n          title: 'Complete',\n          colorIndex: 2,\n        });\n        await completeColumn.save();\n\n        const archiveColumn = new Column({\n          _id,\n          projectId: newProject._id,\n          title: 'Archive',\n          colorIndex: 2,\n          category: 'archive',\n        });\n        await archiveColumn.save();\n\n        return response.status(200).json({ success: true, data: newProject });\n      } catch (e) {\n        return response.status(500).json({\n          success: false,\n          message: 'failed to create basic columns',\n        });\n      }\n    } catch (e) {\n      return response.status(500).json({\n        success: false,\n        message: 'failed to add router',\n      });\n    }\n  } catch (e) {\n    return response\n      .status(500)\n      .json({ success: false, message: 'failed to add router' });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}