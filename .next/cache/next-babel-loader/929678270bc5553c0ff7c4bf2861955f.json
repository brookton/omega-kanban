{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"/Users/heegupark/Desktop/Workspace/MyProject/omega-kanban/components/board.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport { v4 as uuidv4 } from 'uuid';\nimport Top from './top';\nimport Column from './column';\nimport AddSection from './add-section';\nimport Archive from './archive';\nimport CardModal from './card-modal';\nimport { useSnackbar } from 'notistack';\n\nfunction Board(props) {\n  _s();\n\n  var _this = this;\n\n  var _useSnackbar = useSnackbar(),\n      enqueueSnackbar = _useSnackbar.enqueueSnackbar; // const [state, setState] = useState<IColumns>({\n  //   columns: {\n  //     'column-0': {\n  //       id: 'column-0',\n  //       title: 'Plan',\n  //       cards: [\n  //         {\n  //           id: uuidv4(),\n  //           cardTitle: 'Create HTML skeleton',\n  //           note: '',\n  //           isCardCompleted: false,\n  //           isArchived: false,\n  //           checklists: [],\n  //           activities: [],\n  //           dueDate: new Date(2020, 9, 11),\n  //           createdAt: new Date(2020, 8, 11),\n  //           updatedAt: new Date(2020, 8, 11),\n  //         },\n  //       ],\n  //       colorIndex: 0,\n  //       createdAt: new Date(2020, 8, 1),\n  //       updatedAt: new Date(2020, 8, 11),\n  //     },\n  //     'column-1': {\n  //       id: 'column-1',\n  //       title: 'Progress',\n  //       cards: [],\n  //       colorIndex: 1,\n  //       createdAt: new Date(2020, 8, 2),\n  //       updatedAt: new Date(2020, 8, 2),\n  //     },\n  //     'column-2': {\n  //       id: 'column-2',\n  //       title: 'Complete',\n  //       cards: [],\n  //       colorIndex: 2,\n  //       createdAt: new Date(2020, 8, 3),\n  //       updatedAt: new Date(2020, 8, 3),\n  //     },\n  //   },\n  //   columnOrder: ['column-0', 'column-1', 'column-2'],\n  //   archive: {\n  //     id: 'archive',\n  //     title: 'Archive',\n  //     cards: [],\n  //     colorIndex: 0,\n  //     createdAt: new Date(),\n  //     updatedAt: new Date(),\n  //   },\n  // });\n\n\n  var _useState = useState({\n    columns: {},\n    columnOrder: [],\n    archive: {\n      _id: 'archive',\n      title: 'Archive',\n      cards: [],\n      colorIndex: 0,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    }\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  var _useState2 = useState(0),\n      colorIndex = _useState2[0],\n      setColorIndex = _useState2[1];\n\n  var _useState3 = useState(),\n      currentCard = _useState3[0],\n      setCurrentCard = _useState3[1];\n\n  var _useState4 = useState(),\n      currentColumn = _useState4[0],\n      setCurrentColumn = _useState4[1];\n\n  var _useState5 = useState(false),\n      isLoadingCompleted = _useState5[0],\n      setIsLoadingCompleted = _useState5[1];\n\n  useEffect(function () {\n    setColorIndex(state.columnOrder.length - 1);\n  }, []);\n  useEffect(function () {\n    getColumns(props._id);\n  }, []);\n\n  var getColumns = function getColumns(_id) {\n    fetch(\"/api/get-columns\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        _id: _id\n      })\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      if (data.success) {\n        console.log(data.data);\n        data.data.map(function (column) {\n          state.columns[column._id] = column;\n          state.columnOrder.push(column._id);\n          setState(_objectSpread({}, state));\n        });\n        console.log(state);\n        setIsLoadingCompleted(true);\n      } else {}\n    })[\"catch\"](function (err) {\n      console.error(\"Something wrong happened while getting a route:\".concat(err.message));\n    });\n  };\n\n  var addSection = function addSection(sectionTitle, card) {\n    var newSection = {\n      _id: uuidv4(),\n      title: sectionTitle,\n      cards: [],\n      colorIndex: colorIndex + 1,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n\n    if (card) {\n      newSection.cards.push(card);\n    }\n\n    setColorIndex(colorIndex + 1);\n    fetch('/api/add-column', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        projectId: props._id,\n        title: sectionTitle,\n        colorIndex: colorIndex + 1\n      })\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      if (data.success) {} else {}\n    })[\"catch\"](function (err) {\n      console.error(\"Something wrong happened while getting a route:\".concat(err.message));\n    });\n    state.columns[newSection._id] = newSection;\n    state.columnOrder.push(newSection._id);\n    setState(_objectSpread({}, state));\n    handleSnackbar(\"'\".concat(sectionTitle, \"' is created\"), 'success');\n  };\n\n  var addCard = function addCard(columnId, cardTitle) {\n    var newCard = {\n      id: uuidv4(),\n      cardTitle: cardTitle,\n      note: '',\n      isCardCompleted: false,\n      isArchived: false,\n      checklists: [],\n      activities: [],\n      dueDate: undefined,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    addActivity(columnId, newCard.id, \"A card with title '\".concat(cardTitle, \"' is created in '\").concat(state.columns[columnId].title, \"'\"));\n    updateDate(columnId, '');\n    state.columns[columnId].cards.push(newCard);\n    setState(_objectSpread({}, state));\n  };\n\n  var completeCard = function completeCard(columnId, cardId) {\n    var completeCard = {};\n    state.columns[columnId].cards.map(function (card, index) {\n      if (card.id === cardId) {\n        card.isCardCompleted = true;\n        completeCard = card;\n        state.columns[columnId].cards.splice(index, 1);\n      }\n    });\n    state.columns[columnId].cards.push(completeCard);\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, \"Card is completed\");\n    setState(_objectSpread({}, state));\n  };\n\n  var updateSectionTitle = function updateSectionTitle(columnId, sectionTitle) {\n    state.columns[columnId].title = sectionTitle;\n    state.columns[columnId].updatedAt = new Date();\n    setState(_objectSpread({}, state));\n  };\n\n  var updateCardTitle = function updateCardTitle(columnId, cardId, cardTitle) {\n    state.columns[columnId].cards.map(function (card) {\n      if (card.id === cardId) {\n        card.cardTitle = cardTitle;\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, \"Card title is changed to \".concat(cardTitle));\n    setState(_objectSpread({}, state));\n  };\n\n  var updateCardNote = function updateCardNote(columnId, cardId, note) {\n    state.columns[columnId].cards.map(function (card) {\n      if (card.id === cardId) {\n        card.note = note;\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, \"Card note is changed to ||\".concat(note));\n    setState(_objectSpread({}, state));\n  };\n\n  var deleteColumn = function deleteColumn(id) {\n    var title = state.columns[id].title;\n    delete state.columns[id];\n    state.columnOrder.splice(state.columnOrder.indexOf(id), 1);\n    handleSnackbar(\"'\".concat(title, \"' is deleted\"), 'error');\n    setState(_objectSpread({}, state));\n  };\n\n  var deleteCard = function deleteCard(columnId, cardId) {\n    state.columns[columnId].cards.map(function (card, index) {\n      if (card.id === cardId) {\n        state.columns[columnId].cards.splice(index, 1);\n      }\n    });\n    updateDate(columnId, cardId);\n    handleSnackbar('A card is deleted', 'error');\n    setState(_objectSpread({}, state));\n  };\n\n  var archiveCard = function archiveCard(columnId, cardId) {\n    var tempCard = {};\n    state.columns[columnId].cards.map(function (card, index) {\n      if (card.id === cardId) {\n        card.isArchived = true;\n        tempCard = card;\n        state.columns[columnId].cards.splice(index, 1);\n      }\n    });\n    updateDate(columnId, cardId);\n    state.archive.cards.push(tempCard);\n    addActivity('archive', cardId, \"Card is archived\");\n    setState(_objectSpread({}, state));\n  };\n\n  var onDragEnd = function onDragEnd(result) {\n    var _objectSpread3;\n\n    if (!result.destination) {\n      return;\n    }\n\n    if (result.type === 'column') {\n      var columnOrder = reorderColumn(state.columnOrder, result.source.index, result.destination.index);\n      handleSnackbar(\"'\".concat(state.columns[state.columnOrder[result.source.index]].title, \"' and '\").concat(state.columns[state.columnOrder[result.destination.index]].title, \"' are reordered\"), 'success');\n      setState(_objectSpread(_objectSpread({}, state), {}, {\n        columnOrder: columnOrder\n      }));\n      return;\n    }\n\n    if (result.source.droppableId === result.destination.droppableId) {\n      var column = state.columns[result.source.droppableId];\n      var cards = reorderCards(column.cards, result.source.index, result.destination.index);\n\n      var _newState = _objectSpread(_objectSpread({}, state), {}, {\n        columns: _objectSpread(_objectSpread({}, state.columns), {}, _defineProperty({}, column._id, _objectSpread(_objectSpread({}, column), {}, {\n          cards: cards\n        })))\n      });\n\n      setState(_newState);\n      handleSnackbar(\"A card is reordered in'\".concat(column.title, \"'\"), 'success');\n      return;\n    }\n\n    var sourceColumn = state.columns[result.source.droppableId];\n    var destinationColumn = state.columns[result.destination.droppableId];\n    var card = sourceColumn.cards[result.source.index];\n\n    var newSourceColumn = _objectSpread(_objectSpread({}, sourceColumn), {}, {\n      cards: _toConsumableArray(sourceColumn.cards)\n    });\n\n    newSourceColumn.cards.splice(result.source.index, 1);\n\n    var newDestinationColumn = _objectSpread(_objectSpread({}, destinationColumn), {}, {\n      cards: _toConsumableArray(destinationColumn.cards)\n    });\n\n    newDestinationColumn.cards.splice(result.destination.index, 0, card);\n\n    var newState = _objectSpread(_objectSpread({}, state), {}, {\n      columns: _objectSpread(_objectSpread({}, state.columns), {}, (_objectSpread3 = {}, _defineProperty(_objectSpread3, newSourceColumn._id, newSourceColumn), _defineProperty(_objectSpread3, newDestinationColumn._id, newDestinationColumn), _objectSpread3))\n    });\n\n    handleSnackbar(\"A card is moved from '\".concat(newSourceColumn.title, \"' to '\").concat(newDestinationColumn.title, \"'\"), 'success');\n    setState(newState);\n  };\n\n  var getItemStyle = function getItemStyle(isDragging, draggableStyle) {\n    return _objectSpread({\n      display: 'flex',\n      flexDirection: 'row'\n    }, draggableStyle);\n  };\n\n  var reorderCards = function reorderCards(list, startIndex, endIndex) {\n    var result = Array.from(list);\n\n    var _result$splice = result.splice(startIndex, 1),\n        _result$splice2 = _slicedToArray(_result$splice, 1),\n        removed = _result$splice2[0];\n\n    result.splice(endIndex, 0, removed);\n    return result;\n  };\n\n  var reorderColumn = function reorderColumn(list, startIndex, endIndex) {\n    var result = Array.from(list);\n\n    var _result$splice3 = result.splice(startIndex, 1),\n        _result$splice4 = _slicedToArray(_result$splice3, 1),\n        removed = _result$splice4[0];\n\n    result.splice(endIndex, 0, removed);\n    return result;\n  };\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      open = _React$useState2[0],\n      setOpen = _React$useState2[1];\n\n  var setCardForOpen = function setCardForOpen(columnId, cardId) {\n    if (columnId === 'archive') {\n      var card = state.archive.cards.filter(function (card) {\n        return card.id === cardId;\n      });\n      setCurrentCard(card[0]);\n      setCurrentColumn(state.archive);\n    } else {\n      var _card = state.columns[columnId].cards.filter(function (card) {\n        return card.id === cardId;\n      });\n\n      setCurrentCard(_card[0]);\n      setCurrentColumn(state.columns[columnId]);\n    }\n  };\n\n  var handleModalClose = function handleModalClose() {\n    setOpen(false);\n  };\n\n  var addChecklist = function addChecklist(columnId, cardId, checklist) {\n    state.columns[columnId].cards.map(function (card) {\n      if (card.id === cardId) {\n        card.checklists.push({\n          id: uuidv4(),\n          checklist: checklist,\n          isChecked: false,\n          date: new Date()\n        });\n      }\n    });\n    addActivity(columnId, cardId, \"\".concat(checklist, \" is added to the checklist\"));\n    updateDate(columnId, cardId);\n    setState(_objectSpread({}, state));\n  };\n\n  var updateDate = function updateDate(columnId, cardId) {\n    if (cardId) {\n      state.columns[columnId].cards.map(function (card) {\n        if (card.id === cardId) {\n          card.updatedAt = new Date();\n        }\n      });\n    }\n\n    state.columns[columnId].updatedAt = new Date();\n    setState(_objectSpread({}, state));\n  };\n\n  var updateChecklist = function updateChecklist(columnId, cardId, checklistId, checklistContent) {\n    state.columns[columnId].cards.map(function (card) {\n      if (card.id === cardId) {\n        card.checklists.map(function (checklist) {\n          if (checklist.id === checklistId) {\n            checklist.checklist = checklistContent;\n          }\n        });\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, \"A checklist is updated to \".concat(checklistContent));\n    setState(_objectSpread({}, state));\n  };\n\n  var completeChecklist = function completeChecklist(columnId, cardId, checklistId, isChecked) {\n    state.columns[columnId].cards.map(function (card) {\n      if (card.id === cardId) {\n        card.checklists.map(function (checklist) {\n          if (checklist.id === checklistId) {\n            checklist.isChecked = isChecked;\n          }\n        });\n      }\n    });\n    updateDate(columnId, cardId);\n    if (isChecked) addActivity(columnId, cardId, \"A checklist is completed\");else addActivity(columnId, cardId, \"A checklist is changed to incomplete\");\n    setState(_objectSpread({}, state));\n  };\n\n  var deleteChecklist = function deleteChecklist(columnId, cardId, checklistId) {\n    state.columns[columnId].cards.map(function (card) {\n      if (card.id === cardId) {\n        card.checklists = card.checklists.filter(function (checklist) {\n          return checklist.id !== checklistId;\n        });\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, \"A checklist is deleted\");\n    setState(_objectSpread({}, state));\n  };\n\n  var convertDate = function convertDate(date) {\n    var month = date.toString().split(' ')[1];\n    var day = date.toString().split(' ')[2];\n    var year = date.toString().split(' ')[3];\n    return \"\".concat(month, \" \").concat(day, \", \").concat(year);\n  };\n\n  var setDueDate = function setDueDate(columnId, cardId, date) {\n    state.columns[columnId].cards.map(function (card) {\n      if (card.id === cardId) {\n        card.dueDate = new Date(date);\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, \"A due date is set to \".concat(convertDate(date)));\n    setState(_objectSpread({}, state));\n  };\n\n  var addActivity = function addActivity(columnId, cardId, activity) {\n    if (columnId === 'archive') {\n      state.archive.cards.map(function (card) {\n        if (card.id === cardId) {\n          card.activities.unshift({\n            id: uuidv4(),\n            activity: activity,\n            createdAt: new Date()\n          });\n        }\n      });\n    } else {\n      state.columns[columnId].cards.map(function (card) {\n        if (card.id === cardId) {\n          card.activities.unshift({\n            id: uuidv4(),\n            activity: activity,\n            createdAt: new Date()\n          });\n        }\n      });\n    }\n\n    if (activity.toLowerCase().includes('archive')) {\n      handleSnackbar(activity, 'warning');\n    } else {\n      handleSnackbar(activity, 'info');\n    }\n\n    setState(_objectSpread({}, state));\n  };\n\n  var changeProjectName = function changeProjectName(projectName) {\n    handleSnackbar(\"Project name is changed to '\".concat(projectName, \"'\"), 'info');\n    props.setProjectName(projectName);\n  };\n\n  var handleSnackbar = function handleSnackbar(message, variant) {\n    enqueueSnackbar(message, {\n      variant: variant\n    });\n  };\n\n  return __jsx(React.Fragment, null, isLoadingCompleted && __jsx(React.Fragment, null, __jsx(Top, {\n    _id: props._id,\n    setProjectName: changeProjectName,\n    projectName: props.projectName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 588,\n      columnNumber: 11\n    }\n  }), __jsx(\"div\", {\n    className: \"board\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 593,\n      columnNumber: 11\n    }\n  }, __jsx(DragDropContext, {\n    onDragEnd: onDragEnd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 594,\n      columnNumber: 13\n    }\n  }, __jsx(Droppable, {\n    direction: \"horizontal\",\n    droppableId: \"all-droppables\",\n    type: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 595,\n      columnNumber: 15\n    }\n  }, function (provided, snapshot) {\n    return __jsx(\"div\", _extends({\n      ref: provided.innerRef\n    }, provided.droppableProps, {\n      style: getItemStyle(snapshot.isDragging, provided.droppableProps.style),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 601,\n        columnNumber: 19\n      }\n    }), state.columnOrder.map(function (columnId, index) {\n      return __jsx(Column, {\n        key: columnId,\n        column: state.columns[columnId],\n        index: index,\n        addCard: addCard,\n        setOpen: setOpen,\n        setCardForOpen: setCardForOpen,\n        updateSectionTitle: updateSectionTitle,\n        deleteColumn: deleteColumn // onDragEnd={onDragEnd}\n        ,\n        convertDate: convertDate,\n        open: true,\n        projectName: props.projectName,\n        handleModalClose: handleModalClose,\n        addChecklist: addChecklist,\n        updateChecklist: updateChecklist,\n        addActivity: addActivity,\n        updateDate: updateDate,\n        updateCardTitle: updateCardTitle,\n        updateCardNote: updateCardNote,\n        completeChecklist: completeChecklist,\n        deleteChecklist: deleteChecklist,\n        setDueDate: setDueDate,\n        completeCard: completeCard,\n        deleteCard: deleteCard,\n        archiveCard: archiveCard,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 612,\n          columnNumber: 27\n        }\n      });\n    }), provided.placeholder);\n  })), state.archive.cards.length > 0 && __jsx(Archive, {\n    index: 0 // onDragEnd={onDragEnd}\n    ,\n    column: state.archive,\n    setCardForOpen: setCardForOpen,\n    convertDate: convertDate,\n    setOpen: setOpen,\n    open: true,\n    projectName: props.projectName,\n    handleModalClose: handleModalClose,\n    updateSectionTitle: updateSectionTitle,\n    deleteColumn: deleteColumn,\n    addChecklist: addChecklist,\n    updateChecklist: updateChecklist,\n    addActivity: addActivity,\n    updateDate: updateDate,\n    updateCardTitle: updateCardTitle,\n    updateCardNote: updateCardNote,\n    completeChecklist: completeChecklist,\n    deleteChecklist: deleteChecklist,\n    setDueDate: setDueDate,\n    completeCard: completeCard,\n    deleteCard: deleteCard,\n    archiveCard: archiveCard,\n    addCard: addCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 648,\n      columnNumber: 15\n    }\n  }), __jsx(AddSection, {\n    colorIndex: colorIndex,\n    addSection: addSection,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 675,\n      columnNumber: 13\n    }\n  })), open && __jsx(CardModal, {\n    open: true,\n    projectName: props.projectName,\n    currentColumn: currentColumn,\n    handleModalClose: handleModalClose,\n    currentCard: currentCard,\n    addChecklist: addChecklist,\n    updateChecklist: updateChecklist,\n    addActivity: addActivity,\n    updateDate: updateDate,\n    updateCardTitle: updateCardTitle,\n    updateCardNote: updateCardNote,\n    completeChecklist: completeChecklist,\n    deleteChecklist: deleteChecklist,\n    setDueDate: setDueDate,\n    convertDate: convertDate,\n    completeCard: completeCard,\n    deleteCard: deleteCard,\n    archiveCard: archiveCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 678,\n      columnNumber: 13\n    }\n  })));\n}\n\n_s(Board, \"M7vBntRHvgJBi7CJPeaVFUFPZ/Y=\", false, function () {\n  return [useSnackbar];\n});\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/heegupark/Desktop/Workspace/MyProject/omega-kanban/components/board.tsx"],"names":["React","useState","useEffect","DragDropContext","Droppable","v4","uuidv4","Top","Column","AddSection","Archive","CardModal","useSnackbar","Board","props","enqueueSnackbar","columns","columnOrder","archive","_id","title","cards","colorIndex","createdAt","Date","updatedAt","state","setState","setColorIndex","currentCard","setCurrentCard","currentColumn","setCurrentColumn","isLoadingCompleted","setIsLoadingCompleted","length","getColumns","fetch","method","headers","body","JSON","stringify","then","res","json","data","success","console","log","map","column","push","err","error","message","addSection","sectionTitle","card","newSection","projectId","handleSnackbar","addCard","columnId","cardTitle","newCard","id","note","isCardCompleted","isArchived","checklists","activities","dueDate","undefined","addActivity","updateDate","completeCard","cardId","index","splice","updateSectionTitle","updateCardTitle","updateCardNote","deleteColumn","indexOf","deleteCard","archiveCard","tempCard","onDragEnd","result","destination","type","reorderColumn","source","droppableId","reorderCards","newState","sourceColumn","destinationColumn","newSourceColumn","newDestinationColumn","getItemStyle","isDragging","draggableStyle","display","flexDirection","list","startIndex","endIndex","Array","from","removed","open","setOpen","setCardForOpen","filter","handleModalClose","addChecklist","checklist","isChecked","date","updateChecklist","checklistId","checklistContent","completeChecklist","deleteChecklist","convertDate","month","toString","split","day","year","setDueDate","activity","unshift","toLowerCase","includes","changeProjectName","projectName","setProjectName","variant","provided","snapshot","innerRef","droppableProps","style","placeholder"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { v4 as uuidv4 } from 'uuid';\nimport Top from './top';\nimport Column from './column';\nimport AddSection from './add-section';\nimport Archive from './archive';\nimport CardModal from './card-modal';\nimport { VariantType, useSnackbar } from 'notistack';\nimport IMainProps from './interfaces/imainprops';\nimport IColumns from './interfaces/icolumns';\nimport ICard from './interfaces/icard';\nimport ISection from './interfaces/isection';\nimport IChecklist from './interfaces/ichecklist';\nimport IEndPoint from './interfaces/iendpoint';\n\nfunction Board(props: IMainProps) {\n  const { enqueueSnackbar } = useSnackbar();\n  // const [state, setState] = useState<IColumns>({\n  //   columns: {\n  //     'column-0': {\n  //       id: 'column-0',\n  //       title: 'Plan',\n  //       cards: [\n  //         {\n  //           id: uuidv4(),\n  //           cardTitle: 'Create HTML skeleton',\n  //           note: '',\n  //           isCardCompleted: false,\n  //           isArchived: false,\n  //           checklists: [],\n  //           activities: [],\n  //           dueDate: new Date(2020, 9, 11),\n  //           createdAt: new Date(2020, 8, 11),\n  //           updatedAt: new Date(2020, 8, 11),\n  //         },\n  //       ],\n  //       colorIndex: 0,\n  //       createdAt: new Date(2020, 8, 1),\n  //       updatedAt: new Date(2020, 8, 11),\n  //     },\n  //     'column-1': {\n  //       id: 'column-1',\n  //       title: 'Progress',\n  //       cards: [],\n  //       colorIndex: 1,\n  //       createdAt: new Date(2020, 8, 2),\n  //       updatedAt: new Date(2020, 8, 2),\n  //     },\n  //     'column-2': {\n  //       id: 'column-2',\n  //       title: 'Complete',\n  //       cards: [],\n  //       colorIndex: 2,\n  //       createdAt: new Date(2020, 8, 3),\n  //       updatedAt: new Date(2020, 8, 3),\n  //     },\n  //   },\n  //   columnOrder: ['column-0', 'column-1', 'column-2'],\n  //   archive: {\n  //     id: 'archive',\n  //     title: 'Archive',\n  //     cards: [],\n  //     colorIndex: 0,\n  //     createdAt: new Date(),\n  //     updatedAt: new Date(),\n  //   },\n  // });\n\n  const [state, setState] = useState<IColumns>({\n    columns: {},\n    columnOrder: [],\n    archive: {\n      _id: 'archive',\n      title: 'Archive',\n      cards: [],\n      colorIndex: 0,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    },\n  });\n\n  const [colorIndex, setColorIndex] = useState(0);\n  const [currentCard, setCurrentCard] = useState<ICard>();\n  const [currentColumn, setCurrentColumn] = useState<ISection>();\n  const [isLoadingCompleted, setIsLoadingCompleted] = useState(false);\n  useEffect(() => {\n    setColorIndex(state.columnOrder.length - 1);\n  }, []);\n\n  useEffect(() => {\n    getColumns(props._id);\n  }, []);\n\n  const getColumns = (_id: String) => {\n    fetch(`/api/get-columns`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        _id,\n      }),\n    })\n      .then((res) => res.json())\n      .then((data: any) => {\n        if (data.success) {\n          console.log(data.data);\n          data.data.map((column: ISection) => {\n            state.columns[column._id] = column;\n            state.columnOrder.push(column._id);\n            setState({\n              ...state,\n            });\n          });\n          console.log(state);\n          setIsLoadingCompleted(true);\n        } else {\n        }\n      })\n      .catch((err) => {\n        console.error(\n          `Something wrong happened while getting a route:${err.message}`\n        );\n      });\n  };\n\n  const addSection = (sectionTitle: string, card: ICard | undefined) => {\n    const newSection: ISection = {\n      _id: uuidv4(),\n      title: sectionTitle,\n      cards: [],\n      colorIndex: colorIndex + 1,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    if (card) {\n      newSection.cards.push(card);\n    }\n    setColorIndex(colorIndex + 1);\n    fetch('/api/add-column', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        projectId: props._id,\n        title: sectionTitle,\n        colorIndex: colorIndex + 1,\n      }),\n    })\n      .then((res) => res.json())\n      .then((data: IEndPoint) => {\n        if (data.success) {\n        } else {\n        }\n      })\n      .catch((err) => {\n        console.error(\n          `Something wrong happened while getting a route:${err.message}`\n        );\n      });\n    state.columns[newSection._id] = newSection;\n    state.columnOrder.push(newSection._id);\n    setState({\n      ...state,\n    });\n    handleSnackbar(`'${sectionTitle}' is created`, 'success');\n  };\n\n  const addCard = (columnId: string, cardTitle: string) => {\n    const newCard = {\n      id: uuidv4(),\n      cardTitle,\n      note: '',\n      isCardCompleted: false,\n      isArchived: false,\n      checklists: [],\n      activities: [],\n      dueDate: undefined,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    addActivity(\n      columnId,\n      newCard.id,\n      `A card with title '${cardTitle}' is created in '${state.columns[columnId].title}'`\n    );\n    updateDate(columnId, '');\n    state.columns[columnId].cards.push(newCard);\n    setState({\n      ...state,\n    });\n  };\n\n  const completeCard = (columnId: string, cardId: string) => {\n    let completeCard: ICard = {} as ICard;\n    state.columns[columnId].cards.map((card: ICard, index: number) => {\n      if (card.id === cardId) {\n        card.isCardCompleted = true;\n        completeCard = card;\n        state.columns[columnId].cards.splice(index, 1);\n      }\n    });\n    state.columns[columnId].cards.push(completeCard);\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `Card is completed`);\n    setState({\n      ...state,\n    });\n  };\n  const updateSectionTitle = (columnId: string, sectionTitle: string) => {\n    state.columns[columnId].title = sectionTitle;\n    state.columns[columnId].updatedAt = new Date();\n    setState({\n      ...state,\n    });\n  };\n\n  const updateCardTitle = (\n    columnId: string,\n    cardId: string,\n    cardTitle: string\n  ) => {\n    state.columns[columnId].cards.map((card: ICard) => {\n      if (card.id === cardId) {\n        card.cardTitle = cardTitle;\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `Card title is changed to ${cardTitle}`);\n    setState({\n      ...state,\n    });\n  };\n\n  const updateCardNote = (columnId: string, cardId: string, note: string) => {\n    state.columns[columnId].cards.map((card: ICard) => {\n      if (card.id === cardId) {\n        card.note = note;\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `Card note is changed to ||${note}`);\n    setState({\n      ...state,\n    });\n  };\n\n  const deleteColumn = (id: string) => {\n    const title = state.columns[id].title;\n    delete state.columns[id];\n    state.columnOrder.splice(state.columnOrder.indexOf(id), 1);\n    handleSnackbar(`'${title}' is deleted`, 'error');\n    setState({\n      ...state,\n    });\n  };\n\n  const deleteCard = (columnId: string, cardId: string) => {\n    state.columns[columnId].cards.map((card: ICard, index: number) => {\n      if (card.id === cardId) {\n        state.columns[columnId].cards.splice(index, 1);\n      }\n    });\n    updateDate(columnId, cardId);\n    handleSnackbar('A card is deleted', 'error');\n    setState({\n      ...state,\n    });\n  };\n\n  const archiveCard = (columnId: string, cardId: string) => {\n    let tempCard: ICard = {} as ICard;\n    state.columns[columnId].cards.map((card: ICard, index: number) => {\n      if (card.id === cardId) {\n        card.isArchived = true;\n        tempCard = card;\n        state.columns[columnId].cards.splice(index, 1);\n      }\n    });\n    updateDate(columnId, cardId);\n    state.archive.cards.push(tempCard);\n    addActivity('archive', cardId, `Card is archived`);\n    setState({\n      ...state,\n    });\n  };\n\n  const onDragEnd = (result: any) => {\n    if (!result.destination) {\n      return;\n    }\n\n    if (result.type === 'column') {\n      const columnOrder: Array<string> = reorderColumn(\n        state.columnOrder,\n        result.source.index,\n        result.destination.index\n      );\n      handleSnackbar(\n        `'${\n          state.columns[state.columnOrder[result.source.index]].title\n        }' and '${\n          state.columns[state.columnOrder[result.destination.index]].title\n        }' are reordered`,\n        'success'\n      );\n      setState({\n        ...state,\n        columnOrder,\n      });\n      return;\n    }\n\n    if (result.source.droppableId === result.destination.droppableId) {\n      const column = state.columns[result.source.droppableId];\n      const cards = reorderCards(\n        column.cards,\n        result.source.index,\n        result.destination.index\n      );\n\n      const newState = {\n        ...state,\n        columns: {\n          ...state.columns,\n          [column._id]: {\n            ...column,\n            cards,\n          },\n        },\n      };\n      setState(newState);\n      handleSnackbar(`A card is reordered in'${column.title}'`, 'success');\n      return;\n    }\n\n    const sourceColumn = state.columns[result.source.droppableId];\n    const destinationColumn = state.columns[result.destination.droppableId];\n    const card = sourceColumn.cards[result.source.index];\n\n    const newSourceColumn = {\n      ...sourceColumn,\n      cards: [...sourceColumn.cards],\n    };\n    newSourceColumn.cards.splice(result.source.index, 1);\n\n    const newDestinationColumn = {\n      ...destinationColumn,\n      cards: [...destinationColumn.cards],\n    };\n    newDestinationColumn.cards.splice(result.destination.index, 0, card);\n\n    const newState = {\n      ...state,\n      columns: {\n        ...state.columns,\n        [newSourceColumn._id]: newSourceColumn,\n        [newDestinationColumn._id]: newDestinationColumn,\n      },\n    };\n    handleSnackbar(\n      `A card is moved from '${newSourceColumn.title}' to '${newDestinationColumn.title}'`,\n      'success'\n    );\n    setState(newState);\n  };\n\n  const getItemStyle = (isDragging: boolean, draggableStyle: any) => ({\n    display: 'flex',\n    flexDirection: 'row',\n    ...draggableStyle,\n  });\n\n  const reorderCards = (\n    list: Array<ICard>,\n    startIndex: number,\n    endIndex: number\n  ) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    return result;\n  };\n\n  const reorderColumn = (\n    list: Array<string>,\n    startIndex: number,\n    endIndex: number\n  ) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    return result;\n  };\n\n  const [open, setOpen] = React.useState(false);\n  const setCardForOpen = (columnId: string, cardId: string) => {\n    if (columnId === 'archive') {\n      const card = state.archive.cards.filter(\n        (card: ICard) => card.id === cardId\n      );\n      setCurrentCard(card[0]);\n      setCurrentColumn(state.archive);\n    } else {\n      const card = state.columns[columnId].cards.filter(\n        (card: ICard) => card.id === cardId\n      );\n      setCurrentCard(card[0]);\n      setCurrentColumn(state.columns[columnId]);\n    }\n  };\n\n  const handleModalClose = () => {\n    setOpen(false);\n  };\n\n  const addChecklist = (\n    columnId: string,\n    cardId: string,\n    checklist: string\n  ) => {\n    state.columns[columnId].cards.map((card: ICard) => {\n      if (card.id === cardId) {\n        card.checklists.push({\n          id: uuidv4(),\n          checklist,\n          isChecked: false,\n          date: new Date(),\n        });\n      }\n    });\n    addActivity(columnId, cardId, `${checklist} is added to the checklist`);\n    updateDate(columnId, cardId);\n    setState({\n      ...state,\n    });\n  };\n\n  const updateDate = (columnId: string, cardId: string) => {\n    if (cardId) {\n      state.columns[columnId].cards.map((card: ICard) => {\n        if (card.id === cardId) {\n          card.updatedAt = new Date();\n        }\n      });\n    }\n    state.columns[columnId].updatedAt = new Date();\n    setState({\n      ...state,\n    });\n  };\n\n  const updateChecklist = (\n    columnId: string,\n    cardId: string,\n    checklistId: string,\n    checklistContent: string\n  ) => {\n    state.columns[columnId].cards.map((card: ICard) => {\n      if (card.id === cardId) {\n        card.checklists.map((checklist: IChecklist) => {\n          if (checklist.id === checklistId) {\n            checklist.checklist = checklistContent;\n          }\n        });\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(\n      columnId,\n      cardId,\n      `A checklist is updated to ${checklistContent}`\n    );\n    setState({\n      ...state,\n    });\n  };\n\n  const completeChecklist = (\n    columnId: string,\n    cardId: string,\n    checklistId: string,\n    isChecked: boolean\n  ) => {\n    state.columns[columnId].cards.map((card: ICard) => {\n      if (card.id === cardId) {\n        card.checklists.map((checklist: IChecklist) => {\n          if (checklist.id === checklistId) {\n            checklist.isChecked = isChecked;\n          }\n        });\n      }\n    });\n    updateDate(columnId, cardId);\n    if (isChecked) addActivity(columnId, cardId, `A checklist is completed`);\n    else addActivity(columnId, cardId, `A checklist is changed to incomplete`);\n    setState({\n      ...state,\n    });\n  };\n\n  const deleteChecklist = (\n    columnId: string,\n    cardId: string,\n    checklistId: string\n  ) => {\n    state.columns[columnId].cards.map((card: ICard) => {\n      if (card.id === cardId) {\n        card.checklists = card.checklists.filter(\n          (checklist: IChecklist) => checklist.id !== checklistId\n        );\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `A checklist is deleted`);\n    setState({\n      ...state,\n    });\n  };\n\n  const convertDate = (date: Date) => {\n    const month = date.toString().split(' ')[1];\n    const day = date.toString().split(' ')[2];\n    const year = date.toString().split(' ')[3];\n    return `${month} ${day}, ${year}`;\n  };\n\n  const setDueDate = (columnId: string, cardId: string, date: Date) => {\n    state.columns[columnId].cards.map((card: ICard) => {\n      if (card.id === cardId) {\n        card.dueDate = new Date(date);\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `A due date is set to ${convertDate(date)}`);\n    setState({\n      ...state,\n    });\n  };\n\n  const addActivity = (columnId: string, cardId: string, activity: string) => {\n    if (columnId === 'archive') {\n      state.archive.cards.map((card: ICard) => {\n        if (card.id === cardId) {\n          card.activities.unshift({\n            id: uuidv4(),\n            activity,\n            createdAt: new Date(),\n          });\n        }\n      });\n    } else {\n      state.columns[columnId].cards.map((card: ICard) => {\n        if (card.id === cardId) {\n          card.activities.unshift({\n            id: uuidv4(),\n            activity,\n            createdAt: new Date(),\n          });\n        }\n      });\n    }\n    if (activity.toLowerCase().includes('archive')) {\n      handleSnackbar(activity, 'warning');\n    } else {\n      handleSnackbar(activity, 'info');\n    }\n    setState({\n      ...state,\n    });\n  };\n\n  const changeProjectName = (projectName: string) => {\n    handleSnackbar(`Project name is changed to '${projectName}'`, 'info');\n    props.setProjectName(projectName);\n  };\n\n  const handleSnackbar = (message: string, variant: VariantType) => {\n    enqueueSnackbar(message, { variant });\n  };\n\n  return (\n    <>\n      {isLoadingCompleted && (\n        <>\n          <Top\n            _id={props._id}\n            setProjectName={changeProjectName}\n            projectName={props.projectName}\n          />\n          <div className=\"board\">\n            <DragDropContext onDragEnd={onDragEnd}>\n              <Droppable\n                direction=\"horizontal\"\n                droppableId=\"all-droppables\"\n                type=\"column\"\n              >\n                {(provided: any, snapshot: any) => (\n                  <div\n                    ref={provided.innerRef}\n                    {...provided.droppableProps}\n                    style={getItemStyle(\n                      snapshot.isDragging,\n                      provided.droppableProps.style\n                    )}\n                  >\n                    {state.columnOrder.map(\n                      (columnId: string, index: number) => {\n                        return (\n                          <Column\n                            key={columnId}\n                            column={state.columns[columnId]}\n                            index={index}\n                            addCard={addCard}\n                            setOpen={setOpen}\n                            setCardForOpen={setCardForOpen}\n                            updateSectionTitle={updateSectionTitle}\n                            deleteColumn={deleteColumn}\n                            // onDragEnd={onDragEnd}\n                            convertDate={convertDate}\n                            open={true}\n                            projectName={props.projectName}\n                            handleModalClose={handleModalClose}\n                            addChecklist={addChecklist}\n                            updateChecklist={updateChecklist}\n                            addActivity={addActivity}\n                            updateDate={updateDate}\n                            updateCardTitle={updateCardTitle}\n                            updateCardNote={updateCardNote}\n                            completeChecklist={completeChecklist}\n                            deleteChecklist={deleteChecklist}\n                            setDueDate={setDueDate}\n                            completeCard={completeCard}\n                            deleteCard={deleteCard}\n                            archiveCard={archiveCard}\n                          />\n                        );\n                      }\n                    )}\n                    {provided.placeholder}\n                  </div>\n                )}\n              </Droppable>\n            </DragDropContext>\n            {state.archive.cards.length > 0 && (\n              <Archive\n                index={0}\n                // onDragEnd={onDragEnd}\n                column={state.archive}\n                setCardForOpen={setCardForOpen}\n                convertDate={convertDate}\n                setOpen={setOpen}\n                open={true}\n                projectName={props.projectName}\n                handleModalClose={handleModalClose}\n                updateSectionTitle={updateSectionTitle}\n                deleteColumn={deleteColumn}\n                addChecklist={addChecklist}\n                updateChecklist={updateChecklist}\n                addActivity={addActivity}\n                updateDate={updateDate}\n                updateCardTitle={updateCardTitle}\n                updateCardNote={updateCardNote}\n                completeChecklist={completeChecklist}\n                deleteChecklist={deleteChecklist}\n                setDueDate={setDueDate}\n                completeCard={completeCard}\n                deleteCard={deleteCard}\n                archiveCard={archiveCard}\n                addCard={addCard}\n              />\n            )}\n            <AddSection colorIndex={colorIndex} addSection={addSection} />\n          </div>\n          {open && (\n            <CardModal\n              open={true}\n              projectName={props.projectName}\n              currentColumn={currentColumn}\n              handleModalClose={handleModalClose}\n              currentCard={currentCard}\n              addChecklist={addChecklist}\n              updateChecklist={updateChecklist}\n              addActivity={addActivity}\n              updateDate={updateDate}\n              updateCardTitle={updateCardTitle}\n              updateCardNote={updateCardNote}\n              completeChecklist={completeChecklist}\n              deleteChecklist={deleteChecklist}\n              setDueDate={setDueDate}\n              convertDate={convertDate}\n              completeCard={completeCard}\n              deleteCard={deleteCard}\n              archiveCard={archiveCard}\n            />\n          )}\n        </>\n      )}\n    </>\n  );\n}\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}