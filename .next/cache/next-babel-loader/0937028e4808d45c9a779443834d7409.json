{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _jsxFileName = \"/Users/heegupark/Desktop/Workspace/MyProject/omega-kanban/components/board.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport Top from './top';\nimport Column from './column';\nimport AddColumn from './add-column';\nimport Archive from './archive';\nimport CardModal from './card-modal';\nimport { useSnackbar } from 'notistack';\n\nfunction Board(props) {\n  _s();\n\n  var _this = this;\n\n  var _useSnackbar = useSnackbar(),\n      enqueueSnackbar = _useSnackbar.enqueueSnackbar; // const [state, setState] = useState<IColumns>({\n  //   columns: {\n  //     'column-0': {\n  //       id: 'column-0',\n  //       title: 'Plan',\n  //       cards: [\n  //         {\n  //           id: uuidv4(),\n  //           cardTitle: 'Create HTML skeleton',\n  //           note: '',\n  //           isCardCompleted: false,\n  //           isArchived: false,\n  //           checklists: [],\n  //           activities: [],\n  //           dueDate: new Date(2020, 9, 11),\n  //           createdAt: new Date(2020, 8, 11),\n  //           updatedAt: new Date(2020, 8, 11),\n  //         },\n  //       ],\n  //       colorIndex: 0,\n  //       createdAt: new Date(2020, 8, 1),\n  //       updatedAt: new Date(2020, 8, 11),\n  //     },\n  //     'column-1': {\n  //       id: 'column-1',\n  //       title: 'Progress',\n  //       cards: [],\n  //       colorIndex: 1,\n  //       createdAt: new Date(2020, 8, 2),\n  //       updatedAt: new Date(2020, 8, 2),\n  //     },\n  //     'column-2': {\n  //       id: 'column-2',\n  //       title: 'Complete',\n  //       cards: [],\n  //       colorIndex: 2,\n  //       createdAt: new Date(2020, 8, 3),\n  //       updatedAt: new Date(2020, 8, 3),\n  //     },\n  //   },\n  //   columnOrder: ['column-0', 'column-1', 'column-2'],\n  //   archive: {\n  //     id: 'archive',\n  //     title: 'Archive',\n  //     cards: [],\n  //     colorIndex: 0,\n  //     createdAt: new Date(),\n  //     updatedAt: new Date(),\n  //   },\n  // });\n\n\n  var _useState = useState({\n    columns: {},\n    columnOrder: [],\n    archive: {\n      _id: 'archive',\n      title: 'Archive',\n      cards: [],\n      colorIndex: 0,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    }\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  var _useState2 = useState(0),\n      colorIndex = _useState2[0],\n      setColorIndex = _useState2[1];\n\n  var _useState3 = useState({}),\n      currentCard = _useState3[0],\n      setCurrentCard = _useState3[1];\n\n  var _useState4 = useState({}),\n      currentColumn = _useState4[0],\n      setCurrentColumn = _useState4[1];\n\n  var _useState5 = useState(false),\n      isLoadingCompleted = _useState5[0],\n      setIsLoadingCompleted = _useState5[1];\n\n  var _useState6 = useState(''),\n      archiveColumnId = _useState6[0],\n      setArchiveColumnId = _useState6[1]; // useEffect(() => {\n  //   setColorIndex(state.columnOrder.length - 1);\n  // }, []);\n\n\n  useEffect(function () {\n    getColumns(props._id);\n  }, []);\n\n  var getColumns = function getColumns(_id) {\n    fetch(\"/api/get-columns\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        _id: _id\n      })\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      if (data.success) {\n        console.log(data.columns);\n        state.columnOrder = _toConsumableArray(data.columnOrder);\n        state.archive = data.archive[0];\n        setArchiveColumnId(data.archive[0]._id);\n        data.columns.map(function (column) {\n          state.columns[column._id] = column;\n        });\n        setState(_objectSpread({}, state));\n        setColorIndex(data.columns.length);\n        setIsLoadingCompleted(true);\n      } else {}\n    })[\"catch\"](function (err) {\n      console.error(\"Something wrong happened while getting a route:\".concat(err.message));\n    });\n  };\n\n  var addColumn = function addColumn(sectionTitle, card) {\n    fetch('/api/add-column', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        projectId: props._id,\n        title: sectionTitle,\n        colorIndex: colorIndex + 1\n      })\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      if (data.success) {\n        state.columns[data.data._id] = _objectSpread(_objectSpread({}, data.data), {}, {\n          cards: []\n        });\n        state.columnOrder.push(data.data._id);\n        setColorIndex(colorIndex + 1);\n        setState(_objectSpread({}, state));\n        handleSnackbar(\"'\".concat(sectionTitle, \"' is created\"), 'success');\n      } else {\n        handleSnackbar(\"Failed to add a column\", 'error');\n      }\n    })[\"catch\"](function (err) {\n      console.error(\"Something wrong happened while adding a column:\".concat(err.message));\n    });\n  };\n\n  var updateCard = function updateCard(columnId, card) {\n    fetch(\"/api/update-card\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(card)\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      if (data.success) {\n        state.columns[columnId].cards.map(function (item, index) {\n          if (item._id === card._id) {\n            if (card.cardTitle) {\n              item.cardTitle = card.cardTitle;\n              addActivity(columnId, card._id, \"Card title is changed to \".concat(card.cardTitle));\n            }\n\n            if (card.note) {\n              item.note = card.note;\n              addActivity(columnId, card._id, \"Card note is changed\");\n            }\n\n            if (card.isCardCompleted) {\n              item.isCardCompleted = card.isCardCompleted;\n              addActivity(columnId, card._id, \"Card is completed\");\n            }\n\n            if (card.isArchived) {\n              var tempCard = {};\n              console.log(tempCard);\n              state.columns[columnId].cards.map(function (card, index) {\n                if (item._id === card._id) {\n                  item.isArchived = true;\n                  item.columnId = 'archive';\n                  tempCard = card;\n                  state.columns[columnId].cards.splice(index, 1);\n                }\n              });\n              updateDate(columnId, card._id);\n              state.archive.cards.push(tempCard);\n              addActivity('archive', card._id, \"Card is archived\");\n            }\n\n            if (card.dueDate) {\n              item.dueDate = card.dueDate;\n              addActivity(columnId, card._id, \"A due date is set to \".concat(convertDate(card.dueDate)));\n            }\n          }\n        });\n        updateDate(columnId, card._id);\n        setState(_objectSpread({}, state));\n      } else {\n        handleSnackbar('Something wrong happened while updating a card', 'warning');\n      }\n    })[\"catch\"](function (err) {\n      console.error(\"Something wrong happened while updating a card:\".concat(err.message));\n    });\n  };\n\n  var addCard = function addCard(columnId, cardTitle) {\n    fetch(\"/api/add-card\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        columnId: columnId,\n        cardTitle: cardTitle\n      })\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      if (data.success) {\n        state.columns[columnId].cards.push(data.data);\n        addActivity(columnId, data.data._id, \"A card with title '\".concat(cardTitle, \"' is created in '\").concat(state.columns[columnId].title, \"'\"));\n        updateDate(columnId, '');\n        setState(_objectSpread({}, state));\n      } else {\n        handleSnackbar('Something wrong happened while adding a card', 'warning');\n      }\n    })[\"catch\"](function (err) {\n      console.error(\"Something wrong happened while adding a card:\".concat(err.message));\n    });\n  };\n\n  var updateColumnTitle = function updateColumnTitle(_id, title) {\n    fetch(\"/api/update-column-title\", {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        _id: _id,\n        title: title\n      })\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      if (data.success) {\n        state.columns[_id].title = title;\n        state.columns[_id].updatedAt = new Date();\n        setState(_objectSpread({}, state));\n        handleSnackbar(\"Column title is updated\", 'info');\n      } else {\n        handleSnackbar(\"Failed to update a column title\", 'error');\n      }\n    })[\"catch\"](function (err) {\n      console.error(\"Something wrong happened while getting a route:\".concat(err.message));\n      handleSnackbar(\"Failed to update a column title\", 'error');\n    });\n  };\n\n  var deleteColumn = function deleteColumn(columnId) {\n    var title = state.columns[columnId].title;\n    fetch(\"/api/delete-column\", {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        projectId: props._id,\n        columnId: columnId\n      })\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      if (data.success) {\n        delete state.columns[columnId];\n        state.columnOrder.splice(state.columnOrder.indexOf(columnId), 1);\n        setState(_objectSpread({}, state));\n        handleSnackbar(\"'\".concat(title, \"' is deleted\"), 'error');\n      } else {\n        handleSnackbar(\"Failed to delete a column\", 'warning');\n      }\n    })[\"catch\"](function (err) {\n      console.error(\"Something wrong happened while deleting a column:\".concat(err.message));\n    });\n  };\n\n  var deleteCard = function deleteCard(columnId, cardId) {\n    fetch(\"/api/delete-card\", {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        columnId: columnId,\n        cardId: cardId\n      })\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      if (data.success) {\n        state.columns[columnId].cards.map(function (card, index) {\n          if (card._id === cardId) {\n            state.columns[columnId].cards.splice(index, 1);\n          }\n        });\n        updateDate(columnId, cardId);\n        handleSnackbar('A card is deleted', 'error');\n        setState(_objectSpread({}, state));\n      } else {\n        handleSnackbar(\"Failed to delete a card\", 'warning');\n      }\n    })[\"catch\"](function (err) {\n      console.error(\"Something wrong happened while deleting a card:\".concat(err.message));\n    });\n  };\n\n  var archiveCard = function archiveCard(columnId, cardId) {\n    fetch(\"/api/archive-card\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        _id: cardId,\n        projectId: props._id\n      })\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      if (data.success) {\n        var tempCard = {};\n        state.columns[columnId].cards.map(function (card, index) {\n          if (card._id === cardId) {\n            card.isArchived = true;\n            tempCard = card;\n            state.columns[columnId].cards.splice(index, 1);\n          }\n        });\n        updateDate(columnId, cardId);\n        state.archive.cards.push(tempCard);\n        addActivity(archiveColumnId, cardId, \"Card is archived\");\n        setState(_objectSpread({}, state));\n      } else {\n        handleSnackbar('Something wrong happened while archiving a card', 'warning');\n      }\n    })[\"catch\"](function (err) {\n      console.error(\"Something wrong happened while archiving a card:\".concat(err.message));\n    });\n  };\n\n  var reorderCards = function reorderCards(column, cards) {\n    fetch(\"/api/reorder-card\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        columnId: column._id,\n        cards: cards\n      })\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      if (data.success) {\n        handleSnackbar(\"Cards are reordered in '\".concat(column.title, \"'\"), 'success');\n      } else {\n        handleSnackbar('Something wrong happened while reordering cards in a same column', 'warning');\n      }\n    })[\"catch\"](function (err) {\n      console.error(\"Something wrong happened while reordering cards in a same column:\".concat(err.message));\n    });\n  };\n\n  var reorderColumns = function reorderColumns(column, cards) {\n    fetch(\"/api/reorder-column\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        columnId: column._id,\n        cards: cards\n      })\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      if (data.success) {\n        handleSnackbar(\"Cards are reordered in '\".concat(column.title, \"'\"), 'success');\n      } else {\n        handleSnackbar('Something wrong happened while reordering cards in a same column', 'warning');\n      }\n    })[\"catch\"](function (err) {\n      console.error(\"Something wrong happened while reordering cards in a same column:\".concat(err.message));\n    });\n  };\n\n  var onDragEnd = function onDragEnd(result) {\n    var _objectSpread3;\n\n    if (!result.destination) {\n      return;\n    } // Move column\n\n\n    if (result.type === 'column') {\n      var columnOrder = reorder(state.columnOrder, result.source.index, result.destination.index);\n      setState(_objectSpread(_objectSpread({}, state), {}, {\n        columnOrder: columnOrder\n      }));\n      fetch(\"/api/reorder-column\", {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          _id: props._id,\n          columnOrder: columnOrder\n        })\n      }).then(function (res) {\n        return res.json();\n      }).then(function (data) {\n        if (data.success) {\n          handleSnackbar(\"'\".concat(state.columns[state.columnOrder[result.source.index]].title, \"' and '\").concat(state.columns[state.columnOrder[result.destination.index]].title, \"' are reordered\"), 'success');\n        } else {\n          handleSnackbar('Something wrong happened while reordering columns', 'warning');\n        }\n      })[\"catch\"](function (err) {\n        console.error(\"Something wrong happened while reordering columns:\".concat(err.message));\n      });\n      return;\n    } // Reorder cards in a same column\n\n\n    if (result.source.droppableId === result.destination.droppableId) {\n      var column = state.columns[result.source.droppableId];\n      var cards = reorder(column.cards, result.source.index, result.destination.index);\n\n      var _newState = _objectSpread(_objectSpread({}, state), {}, {\n        columns: _objectSpread(_objectSpread({}, state.columns), {}, _defineProperty({}, column._id, _objectSpread(_objectSpread({}, column), {}, {\n          cards: cards\n        })))\n      });\n\n      reorderCards(column, cards);\n      setState(_newState);\n      return;\n    } // Move a card to a different column\n\n\n    var sourceColumn = state.columns[result.source.droppableId];\n    var destinationColumn = state.columns[result.destination.droppableId];\n    var card = sourceColumn.cards[result.source.index];\n\n    var newSourceColumn = _objectSpread(_objectSpread({}, sourceColumn), {}, {\n      cards: _toConsumableArray(sourceColumn.cards)\n    });\n\n    newSourceColumn.cards.splice(result.source.index, 1); // reorderCards(sourceColumn, newSourceColumn.cards as []);\n\n    var newDestinationColumn = _objectSpread(_objectSpread({}, destinationColumn), {}, {\n      cards: _toConsumableArray(destinationColumn.cards)\n    });\n\n    newDestinationColumn.cards.splice(result.destination.index, 0, card);\n    reorderCards(destinationColumn, newDestinationColumn.cards);\n\n    var newState = _objectSpread(_objectSpread({}, state), {}, {\n      columns: _objectSpread(_objectSpread({}, state.columns), {}, (_objectSpread3 = {}, _defineProperty(_objectSpread3, newSourceColumn._id, newSourceColumn), _defineProperty(_objectSpread3, newDestinationColumn._id, newDestinationColumn), _objectSpread3))\n    });\n\n    handleSnackbar(\"A card is moved from '\".concat(newSourceColumn.title, \"' to '\").concat(newDestinationColumn.title, \"'\"), 'success');\n    setState(newState);\n  };\n\n  var getItemStyle = function getItemStyle(isDragging, draggableStyle) {\n    return _objectSpread({\n      display: 'flex',\n      flexDirection: 'row'\n    }, draggableStyle);\n  };\n\n  var reorder = function reorder(list, startIndex, endIndex) {\n    var result = Array.from(list);\n\n    var _result$splice = result.splice(startIndex, 1),\n        _result$splice2 = _slicedToArray(_result$splice, 1),\n        removed = _result$splice2[0];\n\n    result.splice(endIndex, 0, removed);\n    return result;\n  }; // const reorderCards = (\n  //   list: Array<ICard>,\n  //   startIndex: number,\n  //   endIndex: number\n  // ) => {\n  //   const result = Array.from(list);\n  //   const [removed] = result.splice(startIndex, 1);\n  //   result.splice(endIndex, 0, removed);\n  //   return result;\n  // };\n  // const reorderColumn = (\n  //   list: Array<string>,\n  //   startIndex: number,\n  //   endIndex: number\n  // ) => {\n  //   const result = Array.from(list);\n  //   const [removed] = result.splice(startIndex, 1);\n  //   result.splice(endIndex, 0, removed);\n  //   return result;\n  // };\n\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      open = _React$useState2[0],\n      setOpen = _React$useState2[1];\n\n  var setCardForOpen = function setCardForOpen(columnId, cardId) {\n    if (columnId === archiveColumnId) {\n      var card = state.archive.cards.filter(function (card) {\n        return card._id === cardId;\n      });\n      setCurrentCard(card[0]);\n      setCurrentColumn(state.archive);\n    } else {\n      var _card = state.columns[columnId].cards.filter(function (card) {\n        return card._id === cardId;\n      });\n\n      setCurrentCard(_card[0]);\n      setCurrentColumn(state.columns[columnId]);\n    }\n  };\n\n  var handleModalClose = function handleModalClose() {\n    setOpen(false);\n  };\n\n  var addChecklist = function addChecklist(columnId, cardId, checklist) {\n    fetch(\"/api/add-checklist\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        cardId: cardId,\n        checklist: checklist\n      })\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      if (data.success) {\n        state.columns[columnId].cards.map(function (card) {\n          if (card._id === cardId) {\n            card.checklists.push(data.data);\n          }\n        });\n        addActivity(columnId, cardId, \"\".concat(checklist, \" is added to the checklist\")); // updateDate(columnId, cardId);\n\n        setState(_objectSpread({}, state));\n      } else {\n        handleSnackbar('Something wrong happened while adding a checklist', 'warning');\n      }\n    })[\"catch\"](function (err) {\n      console.error(\"Something wrong happened while adding a checklist:\".concat(err.message));\n    });\n  };\n\n  var updateDate = function updateDate(columnId, cardId) {\n    if (cardId) {\n      state.columns[columnId].cards.map(function (card) {\n        if (card._id === cardId) {\n          card.updatedAt = new Date();\n        }\n      });\n    }\n\n    state.columns[columnId].updatedAt = new Date();\n    setState(_objectSpread({}, state));\n  };\n\n  var updateChecklist = function updateChecklist(columnId, cardId, checklist) {\n    fetch(\"/api/update-checklist\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(checklist)\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      if (data.success) {\n        state.columns[columnId].cards.map(function (card) {\n          if (card._id === cardId) {\n            if (checklist.checklist) {\n              card.checklists.map(function (item) {\n                if (item._id === checklist._id) {\n                  item.checklist = checklist.checklist;\n                }\n              });\n              updateDate(columnId, cardId);\n              addActivity(columnId, cardId, \"A checklist is updated to \".concat(checklist.checklist));\n            }\n\n            if (checklist.isChecked !== undefined) {\n              if (checklist.isChecked) {\n                card.checklists.map(function (item) {\n                  if (item._id === checklist._id) {\n                    item.isChecked = true;\n                  }\n                });\n                updateDate(columnId, cardId);\n                addActivity(columnId, cardId, \"A checklist is completed\");\n              }\n\n              console.log(checklist.isChecked);\n\n              if (!checklist.isChecked) {\n                card.checklists.map(function (item) {\n                  if (item._id === checklist._id) {\n                    item.isChecked = false;\n                  }\n                });\n                updateDate(columnId, cardId);\n                addActivity(columnId, cardId, \"A checklist is incompleted\");\n              }\n            }\n          }\n        });\n        setState(_objectSpread({}, state));\n      } else {\n        handleSnackbar('Something wrong happened while updating a checklist', 'warning');\n      }\n    })[\"catch\"](function (err) {\n      console.error(\"Something wrong happened while updating a checklist:\".concat(err.message));\n    });\n  };\n\n  var deleteChecklist = function deleteChecklist(columnId, cardId, checklistId) {\n    fetch(\"/api/delete-checklist\", {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        _id: checklistId\n      })\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      if (data.success) {\n        state.columns[columnId].cards.map(function (card) {\n          if (card._id === cardId) {\n            card.checklists = card.checklists.filter(function (checklist) {\n              return checklist._id !== checklistId;\n            });\n          }\n        });\n        updateDate(columnId, cardId);\n        addActivity(columnId, cardId, \"A checklist is deleted\");\n        setState(_objectSpread({}, state));\n      } else {\n        handleSnackbar(\"Failed to delete a checklist\", 'warning');\n      }\n    })[\"catch\"](function (err) {\n      console.error(\"Something wrong happened while deleting a checklist:\".concat(err.message));\n    });\n  };\n\n  var convertDate = function convertDate(date) {\n    var formattedDate = new Date(date);\n    var month = formattedDate.toString().split(' ')[1];\n    var day = formattedDate.toString().split(' ')[2];\n    var year = formattedDate.toString().split(' ')[3];\n    return \"\".concat(month, \" \").concat(day, \", \").concat(year);\n  };\n\n  var addActivity = function addActivity(columnId, cardId, activity) {\n    fetch(\"/api/add-activity\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        cardId: cardId,\n        activity: activity\n      })\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      if (data.success) {\n        if (columnId === archiveColumnId) {\n          state.archive.cards.map(function (card) {\n            if (card._id === cardId) {\n              card.activities.unshift(data.data);\n            }\n          });\n        } else {\n          state.columns[columnId].cards.map(function (card) {\n            if (card._id === cardId) {\n              card.activities.unshift(data.data);\n            }\n          });\n        }\n\n        if (activity.toLowerCase().includes('archive')) {\n          handleSnackbar(activity, 'warning');\n        } else {\n          handleSnackbar(activity, 'info');\n        }\n\n        setState(_objectSpread({}, state));\n      } else {\n        handleSnackbar('Something wrong happened while adding an activity', 'warning');\n      }\n    })[\"catch\"](function (err) {\n      console.error(\"Something wrong happened while getting an activity:\".concat(err.message));\n    });\n  };\n\n  var handleSnackbar = function handleSnackbar(message, variant) {\n    enqueueSnackbar(message, {\n      variant: variant\n    });\n  };\n\n  return __jsx(React.Fragment, null, isLoadingCompleted && __jsx(React.Fragment, null, __jsx(Top, {\n    _id: props._id,\n    changeProjectName: props.changeProjectName,\n    projectName: props.projectName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 896,\n      columnNumber: 11\n    }\n  }), __jsx(\"div\", {\n    className: \"board\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 901,\n      columnNumber: 11\n    }\n  }, __jsx(DragDropContext, {\n    onDragEnd: onDragEnd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 902,\n      columnNumber: 13\n    }\n  }, __jsx(Droppable, {\n    direction: \"horizontal\",\n    droppableId: \"all-droppables\",\n    type: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 903,\n      columnNumber: 15\n    }\n  }, function (provided, snapshot) {\n    return __jsx(\"div\", _extends({\n      ref: provided.innerRef\n    }, provided.droppableProps, {\n      style: getItemStyle(snapshot.isDragging, provided.droppableProps.style),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 909,\n        columnNumber: 19\n      }\n    }), state.columnOrder.map(function (columnId, index) {\n      return __jsx(Column, {\n        key: columnId,\n        column: state.columns[columnId],\n        index: index,\n        addCard: addCard,\n        setOpen: setOpen,\n        setCardForOpen: setCardForOpen,\n        updateColumnTitle: updateColumnTitle,\n        deleteColumn: deleteColumn // onDragEnd={onDragEnd}\n        ,\n        convertDate: convertDate,\n        open: true,\n        projectName: props.projectName,\n        handleModalClose: handleModalClose,\n        addChecklist: addChecklist,\n        updateChecklist: updateChecklist,\n        addActivity: addActivity,\n        updateDate: updateDate,\n        updateCard: updateCard,\n        deleteChecklist: deleteChecklist,\n        deleteCard: deleteCard,\n        archiveCard: archiveCard,\n        archiveColumnId: archiveColumnId,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 920,\n          columnNumber: 27\n        }\n      });\n    }), provided.placeholder);\n  })), state.archive.cards.length > 0 && __jsx(Archive, {\n    index: 0 // onDragEnd={onDragEnd}\n    ,\n    column: state.archive,\n    archiveColumnId: archiveColumnId,\n    setCardForOpen: setCardForOpen,\n    convertDate: convertDate,\n    setOpen: setOpen,\n    open: true,\n    projectName: props.projectName,\n    handleModalClose: handleModalClose,\n    updateColumnTitle: updateColumnTitle,\n    deleteColumn: deleteColumn,\n    addChecklist: addChecklist,\n    updateChecklist: updateChecklist,\n    addActivity: addActivity,\n    updateDate: updateDate,\n    updateCard: updateCard,\n    deleteChecklist: deleteChecklist,\n    deleteCard: deleteCard,\n    addCard: addCard,\n    archiveCard: archiveCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 953,\n      columnNumber: 15\n    }\n  }), __jsx(AddColumn, {\n    colorIndex: colorIndex,\n    addColumn: addColumn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 977,\n      columnNumber: 13\n    }\n  })), open && __jsx(CardModal, {\n    open: true // column={}\n    ,\n    addCard: addCard,\n    projectName: props.projectName,\n    currentCard: currentCard,\n    currentColumn: currentColumn,\n    handleModalClose: handleModalClose,\n    addChecklist: addChecklist,\n    updateChecklist: updateChecklist,\n    addActivity: addActivity,\n    updateDate: updateDate,\n    updateCard: updateCard,\n    deleteChecklist: deleteChecklist,\n    convertDate: convertDate,\n    deleteCard: deleteCard,\n    archiveCard: archiveCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 980,\n      columnNumber: 13\n    }\n  })));\n}\n\n_s(Board, \"1S/C0xaOHB/EcNyTOcUdCD7ZAr0=\", false, function () {\n  return [useSnackbar];\n});\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/heegupark/Desktop/Workspace/MyProject/omega-kanban/components/board.tsx"],"names":["React","useState","useEffect","DragDropContext","Droppable","Top","Column","AddColumn","Archive","CardModal","useSnackbar","Board","props","enqueueSnackbar","columns","columnOrder","archive","_id","title","cards","colorIndex","createdAt","Date","updatedAt","state","setState","setColorIndex","currentCard","setCurrentCard","currentColumn","setCurrentColumn","isLoadingCompleted","setIsLoadingCompleted","archiveColumnId","setArchiveColumnId","getColumns","fetch","method","headers","body","JSON","stringify","then","res","json","data","success","console","log","map","column","length","err","error","message","addColumn","sectionTitle","card","projectId","push","handleSnackbar","updateCard","columnId","item","index","cardTitle","addActivity","note","isCardCompleted","isArchived","tempCard","splice","updateDate","dueDate","convertDate","addCard","updateColumnTitle","deleteColumn","indexOf","deleteCard","cardId","archiveCard","reorderCards","reorderColumns","onDragEnd","result","destination","type","reorder","source","droppableId","newState","sourceColumn","destinationColumn","newSourceColumn","newDestinationColumn","getItemStyle","isDragging","draggableStyle","display","flexDirection","list","startIndex","endIndex","Array","from","removed","open","setOpen","setCardForOpen","filter","handleModalClose","addChecklist","checklist","checklists","updateChecklist","isChecked","undefined","deleteChecklist","checklistId","date","formattedDate","month","toString","split","day","year","activity","activities","unshift","toLowerCase","includes","variant","changeProjectName","projectName","provided","snapshot","innerRef","droppableProps","style","placeholder"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport Top from './top';\nimport Column from './column';\nimport AddColumn from './add-column';\nimport Archive from './archive';\nimport CardModal from './card-modal';\nimport { VariantType, useSnackbar } from 'notistack';\nimport IMainProps from './interfaces/imainprops';\nimport IColumns from './interfaces/icolumns';\nimport ICard from './interfaces/icard';\nimport IColumnItem from './interfaces/icolumnitem';\nimport IChecklist from './interfaces/ichecklist';\nimport IColumnData from './interfaces/icolumndata';\nimport { IActivity } from '../middleware/models/activity';\nimport { IColumn } from '../middleware/models/column';\n\nfunction Board(props: IMainProps) {\n  const { enqueueSnackbar } = useSnackbar();\n  // const [state, setState] = useState<IColumns>({\n  //   columns: {\n  //     'column-0': {\n  //       id: 'column-0',\n  //       title: 'Plan',\n  //       cards: [\n  //         {\n  //           id: uuidv4(),\n  //           cardTitle: 'Create HTML skeleton',\n  //           note: '',\n  //           isCardCompleted: false,\n  //           isArchived: false,\n  //           checklists: [],\n  //           activities: [],\n  //           dueDate: new Date(2020, 9, 11),\n  //           createdAt: new Date(2020, 8, 11),\n  //           updatedAt: new Date(2020, 8, 11),\n  //         },\n  //       ],\n  //       colorIndex: 0,\n  //       createdAt: new Date(2020, 8, 1),\n  //       updatedAt: new Date(2020, 8, 11),\n  //     },\n  //     'column-1': {\n  //       id: 'column-1',\n  //       title: 'Progress',\n  //       cards: [],\n  //       colorIndex: 1,\n  //       createdAt: new Date(2020, 8, 2),\n  //       updatedAt: new Date(2020, 8, 2),\n  //     },\n  //     'column-2': {\n  //       id: 'column-2',\n  //       title: 'Complete',\n  //       cards: [],\n  //       colorIndex: 2,\n  //       createdAt: new Date(2020, 8, 3),\n  //       updatedAt: new Date(2020, 8, 3),\n  //     },\n  //   },\n  //   columnOrder: ['column-0', 'column-1', 'column-2'],\n  //   archive: {\n  //     id: 'archive',\n  //     title: 'Archive',\n  //     cards: [],\n  //     colorIndex: 0,\n  //     createdAt: new Date(),\n  //     updatedAt: new Date(),\n  //   },\n  // });\n\n  const [state, setState] = useState<IColumns>({\n    columns: {},\n    columnOrder: [],\n    archive: {\n      _id: 'archive',\n      title: 'Archive',\n      cards: [],\n      colorIndex: 0,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    },\n  });\n\n  const [colorIndex, setColorIndex] = useState(0);\n  const [currentCard, setCurrentCard] = useState<ICard>({} as ICard);\n  const [currentColumn, setCurrentColumn] = useState<IColumnItem>(\n    {} as IColumnItem\n  );\n  const [isLoadingCompleted, setIsLoadingCompleted] = useState(false);\n  const [archiveColumnId, setArchiveColumnId] = useState('');\n  // useEffect(() => {\n  //   setColorIndex(state.columnOrder.length - 1);\n  // }, []);\n\n  useEffect(() => {\n    getColumns(props._id);\n  }, []);\n\n  const getColumns = (_id: String) => {\n    fetch(`/api/get-columns`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        _id,\n      }),\n    })\n      .then((res) => res.json())\n      .then(\n        (data: {\n          success: boolean;\n          columns: [IColumnItem];\n          columnOrder: [];\n          archive: [IColumnItem];\n        }) => {\n          if (data.success) {\n            console.log(data.columns);\n            state.columnOrder = [...data.columnOrder];\n            state.archive = data.archive[0];\n            setArchiveColumnId(data.archive[0]._id);\n            data.columns.map((column: IColumnItem) => {\n              state.columns[column._id] = column;\n            });\n            setState({\n              ...state,\n            });\n            setColorIndex(data.columns.length);\n            setIsLoadingCompleted(true);\n          } else {\n          }\n        }\n      )\n      .catch((err) => {\n        console.error(\n          `Something wrong happened while getting a route:${err.message}`\n        );\n      });\n  };\n\n  const addColumn = (sectionTitle: string, card: ICard | undefined) => {\n    fetch('/api/add-column', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        projectId: props._id,\n        title: sectionTitle,\n        colorIndex: colorIndex + 1,\n      }),\n    })\n      .then((res) => res.json())\n      .then((data: IColumnData) => {\n        if (data.success) {\n          state.columns[data.data._id] = { ...data.data, cards: [] };\n          state.columnOrder.push(data.data._id);\n          setColorIndex(colorIndex + 1);\n          setState({\n            ...state,\n          });\n          handleSnackbar(`'${sectionTitle}' is created`, 'success');\n        } else {\n          handleSnackbar(`Failed to add a column`, 'error');\n        }\n      })\n      .catch((err) => {\n        console.error(\n          `Something wrong happened while adding a column:${err.message}`\n        );\n      });\n  };\n\n  const updateCard = (\n    columnId: string,\n    card: {\n      _id: string;\n      columnId: string | undefined;\n      cardTitle: string | undefined;\n      note: string | undefined;\n      isCardCompleted: boolean | undefined;\n      isArchived: boolean | undefined;\n      dueDate: Date | null;\n    }\n  ) => {\n    fetch(`/api/update-card`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(card),\n    })\n      .then((res) => res.json())\n      .then((data: { success: boolean; data: ICard }) => {\n        if (data.success) {\n          state.columns[columnId].cards.map((item: ICard, index: number) => {\n            if (item._id === card._id) {\n              if (card.cardTitle) {\n                item.cardTitle = card.cardTitle;\n                addActivity(\n                  columnId,\n                  card._id,\n                  `Card title is changed to ${card.cardTitle}`\n                );\n              }\n              if (card.note) {\n                item.note = card.note;\n                addActivity(columnId, card._id, `Card note is changed`);\n              }\n              if (card.isCardCompleted) {\n                item.isCardCompleted = card.isCardCompleted;\n                addActivity(columnId, card._id, `Card is completed`);\n              }\n              if (card.isArchived) {\n                let tempCard: ICard = {} as ICard;\n                console.log(tempCard);\n                state.columns[columnId].cards.map(\n                  (card: ICard, index: number) => {\n                    if (item._id === card._id) {\n                      item.isArchived = true;\n                      item.columnId = 'archive';\n                      tempCard = card;\n                      state.columns[columnId].cards.splice(index, 1);\n                    }\n                  }\n                );\n                updateDate(columnId, card._id);\n                state.archive.cards.push(tempCard);\n                addActivity('archive', card._id, `Card is archived`);\n              }\n              if (card.dueDate) {\n                item.dueDate = card.dueDate;\n                addActivity(\n                  columnId,\n                  card._id,\n                  `A due date is set to ${convertDate(card.dueDate)}`\n                );\n              }\n            }\n          });\n          updateDate(columnId, card._id);\n          setState({\n            ...state,\n          });\n        } else {\n          handleSnackbar(\n            'Something wrong happened while updating a card',\n            'warning'\n          );\n        }\n      })\n      .catch((err) => {\n        console.error(\n          `Something wrong happened while updating a card:${err.message}`\n        );\n      });\n  };\n\n  const addCard = (columnId: string, cardTitle: string) => {\n    fetch(`/api/add-card`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        columnId,\n        cardTitle,\n      }),\n    })\n      .then((res) => res.json())\n      .then((data: { success: boolean; data: ICard }) => {\n        if (data.success) {\n          state.columns[columnId].cards.push(data.data);\n          addActivity(\n            columnId,\n            data.data._id,\n            `A card with title '${cardTitle}' is created in '${state.columns[columnId].title}'`\n          );\n          updateDate(columnId, '');\n          setState({\n            ...state,\n          });\n        } else {\n          handleSnackbar(\n            'Something wrong happened while adding a card',\n            'warning'\n          );\n        }\n      })\n      .catch((err) => {\n        console.error(\n          `Something wrong happened while adding a card:${err.message}`\n        );\n      });\n  };\n\n  const updateColumnTitle = (_id: string, title: string) => {\n    fetch(`/api/update-column-title`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        _id,\n        title,\n      }),\n    })\n      .then((res) => res.json())\n      .then((data: { success: boolean }) => {\n        if (data.success) {\n          state.columns[_id].title = title;\n          state.columns[_id].updatedAt = new Date();\n          setState({\n            ...state,\n          });\n          handleSnackbar(`Column title is updated`, 'info');\n        } else {\n          handleSnackbar(`Failed to update a column title`, 'error');\n        }\n      })\n      .catch((err) => {\n        console.error(\n          `Something wrong happened while getting a route:${err.message}`\n        );\n        handleSnackbar(`Failed to update a column title`, 'error');\n      });\n  };\n\n  const deleteColumn = (columnId: string) => {\n    const title = state.columns[columnId].title;\n    fetch(`/api/delete-column`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        projectId: props._id,\n        columnId,\n      }),\n    })\n      .then((res) => res.json())\n      .then((data: { success: boolean; message: string }) => {\n        if (data.success) {\n          delete state.columns[columnId];\n          state.columnOrder.splice(state.columnOrder.indexOf(columnId), 1);\n          setState({\n            ...state,\n          });\n          handleSnackbar(`'${title}' is deleted`, 'error');\n        } else {\n          handleSnackbar(`Failed to delete a column`, 'warning');\n        }\n      })\n      .catch((err) => {\n        console.error(\n          `Something wrong happened while deleting a column:${err.message}`\n        );\n      });\n  };\n\n  const deleteCard = (columnId: string, cardId: string) => {\n    fetch(`/api/delete-card`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        columnId,\n        cardId,\n      }),\n    })\n      .then((res) => res.json())\n      .then((data: { success: boolean; message: string }) => {\n        if (data.success) {\n          state.columns[columnId].cards.map((card: ICard, index: number) => {\n            if (card._id === cardId) {\n              state.columns[columnId].cards.splice(index, 1);\n            }\n          });\n          updateDate(columnId, cardId);\n          handleSnackbar('A card is deleted', 'error');\n          setState({\n            ...state,\n          });\n        } else {\n          handleSnackbar(`Failed to delete a card`, 'warning');\n        }\n      })\n      .catch((err) => {\n        console.error(\n          `Something wrong happened while deleting a card:${err.message}`\n        );\n      });\n  };\n\n  const archiveCard = (columnId: string, cardId: string) => {\n    fetch(`/api/archive-card`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ _id: cardId, projectId: props._id }),\n    })\n      .then((res) => res.json())\n      .then((data: { success: boolean; data: ICard }) => {\n        if (data.success) {\n          let tempCard: ICard = {} as ICard;\n          state.columns[columnId].cards.map((card: ICard, index: number) => {\n            if (card._id === cardId) {\n              card.isArchived = true;\n              tempCard = card;\n              state.columns[columnId].cards.splice(index, 1);\n            }\n          });\n          updateDate(columnId, cardId);\n          state.archive.cards.push(tempCard);\n          addActivity(archiveColumnId, cardId, `Card is archived`);\n          setState({\n            ...state,\n          });\n        } else {\n          handleSnackbar(\n            'Something wrong happened while archiving a card',\n            'warning'\n          );\n        }\n      })\n      .catch((err) => {\n        console.error(\n          `Something wrong happened while archiving a card:${err.message}`\n        );\n      });\n  };\n\n  const reorderCards = (column: IColumnItem, cards: []) => {\n    fetch(`/api/reorder-card`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        columnId: column._id,\n        cards,\n      }),\n    })\n      .then((res) => res.json())\n      .then((data: { success: boolean }) => {\n        if (data.success) {\n          handleSnackbar(`Cards are reordered in '${column.title}'`, 'success');\n        } else {\n          handleSnackbar(\n            'Something wrong happened while reordering cards in a same column',\n            'warning'\n          );\n        }\n      })\n      .catch((err) => {\n        console.error(\n          `Something wrong happened while reordering cards in a same column:${err.message}`\n        );\n      });\n  };\n\n  const reorderColumns = (column: IColumnItem, cards: []) => {\n    fetch(`/api/reorder-column`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        columnId: column._id,\n        cards,\n      }),\n    })\n      .then((res) => res.json())\n      .then((data: { success: boolean }) => {\n        if (data.success) {\n          handleSnackbar(`Cards are reordered in '${column.title}'`, 'success');\n        } else {\n          handleSnackbar(\n            'Something wrong happened while reordering cards in a same column',\n            'warning'\n          );\n        }\n      })\n      .catch((err) => {\n        console.error(\n          `Something wrong happened while reordering cards in a same column:${err.message}`\n        );\n      });\n  };\n\n  const onDragEnd = (result: any) => {\n    if (!result.destination) {\n      return;\n    }\n\n    // Move column\n    if (result.type === 'column') {\n      const columnOrder: Array<string> = reorder(\n        state.columnOrder as [],\n        result.source.index,\n        result.destination.index\n      );\n      setState({\n        ...state,\n        columnOrder,\n      });\n      fetch(`/api/reorder-column`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ _id: props._id, columnOrder }),\n      })\n        .then((res) => res.json())\n        .then((data: { success: boolean }) => {\n          if (data.success) {\n            handleSnackbar(\n              `'${\n                state.columns[state.columnOrder[result.source.index]].title\n              }' and '${\n                state.columns[state.columnOrder[result.destination.index]].title\n              }' are reordered`,\n              'success'\n            );\n          } else {\n            handleSnackbar(\n              'Something wrong happened while reordering columns',\n              'warning'\n            );\n          }\n        })\n        .catch((err) => {\n          console.error(\n            `Something wrong happened while reordering columns:${err.message}`\n          );\n        });\n      return;\n    }\n\n    // Reorder cards in a same column\n    if (result.source.droppableId === result.destination.droppableId) {\n      const column = state.columns[result.source.droppableId];\n      const cards = reorder(\n        column.cards as [],\n        result.source.index,\n        result.destination.index\n      );\n      const newState = {\n        ...state,\n        columns: {\n          ...state.columns,\n          [column._id]: {\n            ...column,\n            cards,\n          },\n        },\n      };\n      reorderCards(column, cards as []);\n      setState(newState);\n\n      return;\n    }\n\n    // Move a card to a different column\n    const sourceColumn = state.columns[result.source.droppableId];\n    const destinationColumn = state.columns[result.destination.droppableId];\n    const card = sourceColumn.cards[result.source.index];\n\n    const newSourceColumn = {\n      ...sourceColumn,\n      cards: [...sourceColumn.cards],\n    };\n    newSourceColumn.cards.splice(result.source.index, 1);\n    // reorderCards(sourceColumn, newSourceColumn.cards as []);\n\n    const newDestinationColumn = {\n      ...destinationColumn,\n      cards: [...destinationColumn.cards],\n    };\n    newDestinationColumn.cards.splice(result.destination.index, 0, card);\n    reorderCards(destinationColumn, newDestinationColumn.cards as []);\n\n    const newState = {\n      ...state,\n      columns: {\n        ...state.columns,\n        [newSourceColumn._id]: newSourceColumn,\n        [newDestinationColumn._id]: newDestinationColumn,\n      },\n    };\n    handleSnackbar(\n      `A card is moved from '${newSourceColumn.title}' to '${newDestinationColumn.title}'`,\n      'success'\n    );\n    setState(newState);\n  };\n\n  const getItemStyle = (isDragging: boolean, draggableStyle: any) => ({\n    display: 'flex',\n    flexDirection: 'row',\n    ...draggableStyle,\n  });\n\n  const reorder = (list: [], startIndex: number, endIndex: number) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    return result;\n  };\n\n  // const reorderCards = (\n  //   list: Array<ICard>,\n  //   startIndex: number,\n  //   endIndex: number\n  // ) => {\n  //   const result = Array.from(list);\n  //   const [removed] = result.splice(startIndex, 1);\n  //   result.splice(endIndex, 0, removed);\n  //   return result;\n  // };\n\n  // const reorderColumn = (\n  //   list: Array<string>,\n  //   startIndex: number,\n  //   endIndex: number\n  // ) => {\n  //   const result = Array.from(list);\n  //   const [removed] = result.splice(startIndex, 1);\n  //   result.splice(endIndex, 0, removed);\n  //   return result;\n  // };\n\n  const [open, setOpen] = React.useState(false);\n  const setCardForOpen = (columnId: string, cardId: string) => {\n    if (columnId === archiveColumnId) {\n      const card = state.archive.cards.filter(\n        (card: ICard) => card._id === cardId\n      );\n      setCurrentCard(card[0]);\n      setCurrentColumn(state.archive);\n    } else {\n      const card = state.columns[columnId].cards.filter(\n        (card: ICard) => card._id === cardId\n      );\n      setCurrentCard(card[0]);\n      setCurrentColumn(state.columns[columnId]);\n    }\n  };\n\n  const handleModalClose = () => {\n    setOpen(false);\n  };\n\n  const addChecklist = (\n    columnId: string,\n    cardId: string,\n    checklist: string\n  ) => {\n    fetch(`/api/add-checklist`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        cardId,\n        checklist,\n      }),\n    })\n      .then((res) => res.json())\n      .then((data: { success: boolean; data: IChecklist }) => {\n        if (data.success) {\n          state.columns[columnId].cards.map((card: ICard) => {\n            if (card._id === cardId) {\n              card.checklists.push(data.data);\n            }\n          });\n          addActivity(\n            columnId,\n            cardId,\n            `${checklist} is added to the checklist`\n          );\n          // updateDate(columnId, cardId);\n          setState({\n            ...state,\n          });\n        } else {\n          handleSnackbar(\n            'Something wrong happened while adding a checklist',\n            'warning'\n          );\n        }\n      })\n      .catch((err) => {\n        console.error(\n          `Something wrong happened while adding a checklist:${err.message}`\n        );\n      });\n  };\n\n  const updateDate = (columnId: string, cardId: string) => {\n    if (cardId) {\n      state.columns[columnId].cards.map((card: ICard) => {\n        if (card._id === cardId) {\n          card.updatedAt = new Date();\n        }\n      });\n    }\n    state.columns[columnId].updatedAt = new Date();\n    setState({\n      ...state,\n    });\n  };\n\n  const updateChecklist = (\n    columnId: string,\n    cardId: string,\n    checklist: {\n      _id: string;\n      checklist: string | undefined;\n      isChecked: boolean | undefined;\n    }\n  ) => {\n    fetch(`/api/update-checklist`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(checklist),\n    })\n      .then((res) => res.json())\n      .then((data: { success: boolean; data: ICard }) => {\n        if (data.success) {\n          state.columns[columnId].cards.map((card: ICard) => {\n            if (card._id === cardId) {\n              if (checklist.checklist) {\n                card.checklists.map((item: IChecklist) => {\n                  if (item._id === checklist._id) {\n                    item.checklist = checklist.checklist as string;\n                  }\n                });\n                updateDate(columnId, cardId);\n                addActivity(\n                  columnId,\n                  cardId,\n                  `A checklist is updated to ${checklist.checklist}`\n                );\n              }\n              if (checklist.isChecked !== undefined) {\n                if (checklist.isChecked) {\n                  card.checklists.map((item: IChecklist) => {\n                    if (item._id === checklist._id) {\n                      item.isChecked = true;\n                    }\n                  });\n                  updateDate(columnId, cardId);\n                  addActivity(columnId, cardId, `A checklist is completed`);\n                }\n                console.log(checklist.isChecked);\n                if (!checklist.isChecked) {\n                  card.checklists.map((item: IChecklist) => {\n                    if (item._id === checklist._id) {\n                      item.isChecked = false;\n                    }\n                  });\n                  updateDate(columnId, cardId);\n                  addActivity(columnId, cardId, `A checklist is incompleted`);\n                }\n              }\n            }\n          });\n\n          setState({\n            ...state,\n          });\n        } else {\n          handleSnackbar(\n            'Something wrong happened while updating a checklist',\n            'warning'\n          );\n        }\n      })\n      .catch((err) => {\n        console.error(\n          `Something wrong happened while updating a checklist:${err.message}`\n        );\n      });\n  };\n\n  const deleteChecklist = (\n    columnId: string,\n    cardId: string,\n    checklistId: string\n  ) => {\n    fetch(`/api/delete-checklist`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        _id: checklistId,\n      }),\n    })\n      .then((res) => res.json())\n      .then((data: { success: boolean; message: string }) => {\n        if (data.success) {\n          state.columns[columnId].cards.map((card: ICard) => {\n            if (card._id === cardId) {\n              card.checklists = card.checklists.filter(\n                (checklist: IChecklist) => checklist._id !== checklistId\n              );\n            }\n          });\n          updateDate(columnId, cardId);\n          addActivity(columnId, cardId, `A checklist is deleted`);\n          setState({\n            ...state,\n          });\n        } else {\n          handleSnackbar(`Failed to delete a checklist`, 'warning');\n        }\n      })\n      .catch((err) => {\n        console.error(\n          `Something wrong happened while deleting a checklist:${err.message}`\n        );\n      });\n  };\n\n  const convertDate = (date: Date) => {\n    const formattedDate = new Date(date);\n    const month = formattedDate.toString().split(' ')[1];\n    const day = formattedDate.toString().split(' ')[2];\n    const year = formattedDate.toString().split(' ')[3];\n    return `${month} ${day}, ${year}`;\n  };\n\n  const addActivity = (columnId: string, cardId: string, activity: string) => {\n    fetch(`/api/add-activity`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        cardId,\n        activity,\n      }),\n    })\n      .then((res) => res.json())\n      .then((data: { success: boolean; data: IActivity }) => {\n        if (data.success) {\n          if (columnId === archiveColumnId) {\n            state.archive.cards.map((card: ICard) => {\n              if (card._id === cardId) {\n                card.activities.unshift(data.data);\n              }\n            });\n          } else {\n            state.columns[columnId].cards.map((card: ICard) => {\n              if (card._id === cardId) {\n                card.activities.unshift(data.data);\n              }\n            });\n          }\n          if (activity.toLowerCase().includes('archive')) {\n            handleSnackbar(activity, 'warning');\n          } else {\n            handleSnackbar(activity, 'info');\n          }\n          setState({\n            ...state,\n          });\n        } else {\n          handleSnackbar(\n            'Something wrong happened while adding an activity',\n            'warning'\n          );\n        }\n      })\n      .catch((err) => {\n        console.error(\n          `Something wrong happened while getting an activity:${err.message}`\n        );\n      });\n  };\n\n  const handleSnackbar = (message: string, variant: VariantType) => {\n    enqueueSnackbar(message, { variant });\n  };\n\n  return (\n    <>\n      {isLoadingCompleted && (\n        <>\n          <Top\n            _id={props._id}\n            changeProjectName={props.changeProjectName}\n            projectName={props.projectName}\n          />\n          <div className=\"board\">\n            <DragDropContext onDragEnd={onDragEnd}>\n              <Droppable\n                direction=\"horizontal\"\n                droppableId=\"all-droppables\"\n                type=\"column\"\n              >\n                {(provided: any, snapshot: any) => (\n                  <div\n                    ref={provided.innerRef}\n                    {...provided.droppableProps}\n                    style={getItemStyle(\n                      snapshot.isDragging,\n                      provided.droppableProps.style\n                    )}\n                  >\n                    {state.columnOrder.map(\n                      (columnId: string, index: number) => {\n                        return (\n                          <Column\n                            key={columnId}\n                            column={state.columns[columnId]}\n                            index={index}\n                            addCard={addCard}\n                            setOpen={setOpen}\n                            setCardForOpen={setCardForOpen}\n                            updateColumnTitle={updateColumnTitle}\n                            deleteColumn={deleteColumn}\n                            // onDragEnd={onDragEnd}\n                            convertDate={convertDate}\n                            open={true}\n                            projectName={props.projectName}\n                            handleModalClose={handleModalClose}\n                            addChecklist={addChecklist}\n                            updateChecklist={updateChecklist}\n                            addActivity={addActivity}\n                            updateDate={updateDate}\n                            updateCard={updateCard}\n                            deleteChecklist={deleteChecklist}\n                            deleteCard={deleteCard}\n                            archiveCard={archiveCard}\n                            archiveColumnId={archiveColumnId}\n                          />\n                        );\n                      }\n                    )}\n                    {provided.placeholder}\n                  </div>\n                )}\n              </Droppable>\n            </DragDropContext>\n            {state.archive.cards.length > 0 && (\n              <Archive\n                index={0}\n                // onDragEnd={onDragEnd}\n                column={state.archive}\n                archiveColumnId={archiveColumnId}\n                setCardForOpen={setCardForOpen}\n                convertDate={convertDate}\n                setOpen={setOpen}\n                open={true}\n                projectName={props.projectName}\n                handleModalClose={handleModalClose}\n                updateColumnTitle={updateColumnTitle}\n                deleteColumn={deleteColumn}\n                addChecklist={addChecklist}\n                updateChecklist={updateChecklist}\n                addActivity={addActivity}\n                updateDate={updateDate}\n                updateCard={updateCard}\n                deleteChecklist={deleteChecklist}\n                deleteCard={deleteCard}\n                addCard={addCard}\n                archiveCard={archiveCard}\n              />\n            )}\n            <AddColumn colorIndex={colorIndex} addColumn={addColumn} />\n          </div>\n          {open && (\n            <CardModal\n              open={true}\n              // column={}\n              addCard={addCard}\n              projectName={props.projectName}\n              currentCard={currentCard}\n              currentColumn={currentColumn}\n              handleModalClose={handleModalClose}\n              addChecklist={addChecklist}\n              updateChecklist={updateChecklist}\n              addActivity={addActivity}\n              updateDate={updateDate}\n              updateCard={updateCard}\n              deleteChecklist={deleteChecklist}\n              convertDate={convertDate}\n              deleteCard={deleteCard}\n              archiveCard={archiveCard}\n            />\n          )}\n        </>\n      )}\n    </>\n  );\n}\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}