{"ast":null,"code":"import Router from '../../middleware/models/router';\n\nrequire('../../middleware/db/mongoose');\n\nexport default (async (request, response) => {\n  const {\n    _id,\n    project\n  } = request.body;\n\n  try {\n    const router = await Router.findOne({\n      _id,\n      project\n    });\n\n    if (!router) {\n      return response.status(404).json({\n        success: false,\n        message: 'router not found'\n      });\n    }\n\n    return response.status(200).json({\n      success: true,\n      data: router\n    });\n  } catch (e) {\n    return response.status(500).json({\n      success: false,\n      message: 'failed to get a router'\n    });\n  }\n});","map":{"version":3,"sources":["/Users/heegupark/Desktop/Workspace/MyProject/omega-kanban/pages/api/get-router.tsx"],"names":["Router","require","request","response","_id","project","body","router","findOne","status","json","success","message","data","e"],"mappings":"AACA,OAAOA,MAAP,MAAmB,gCAAnB;;AACAC,OAAO,CAAC,8BAAD,CAAP;;AAEA,gBAAe,OAAOC,OAAP,EAAgCC,QAAhC,KAA8D;AAC3E,QAAM;AAAEC,IAAAA,GAAF;AAAOC,IAAAA;AAAP,MAAmBH,OAAO,CAACI,IAAjC;;AACA,MAAI;AACF,UAAMC,MAAM,GAAG,MAAMP,MAAM,CAACQ,OAAP,CAAe;AAAEJ,MAAAA,GAAF;AAAOC,MAAAA;AAAP,KAAf,CAArB;;AACA,QAAI,CAACE,MAAL,EAAa;AACX,aAAOJ,QAAQ,CAACM,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAC/BC,QAAAA,OAAO,EAAE,KADsB;AAE/BC,QAAAA,OAAO,EAAE;AAFsB,OAA1B,CAAP;AAID;;AACD,WAAOT,QAAQ,CAACM,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAAEC,MAAAA,OAAO,EAAE,IAAX;AAAiBE,MAAAA,IAAI,EAAEN;AAAvB,KAA1B,CAAP;AACD,GATD,CASE,OAAOO,CAAP,EAAU;AACV,WAAOX,QAAQ,CACZM,MADI,CACG,GADH,EAEJC,IAFI,CAEC;AAAEC,MAAAA,OAAO,EAAE,KAAX;AAAkBC,MAAAA,OAAO,EAAE;AAA3B,KAFD,CAAP;AAGD;AACF,CAhBD","sourcesContent":["import { NextApiRequest, NextApiResponse } from 'next';\nimport Router from '../../middleware/models/router';\nrequire('../../middleware/db/mongoose');\n\nexport default async (request: NextApiRequest, response: NextApiResponse) => {\n  const { _id, project } = request.body;\n  try {\n    const router = await Router.findOne({ _id, project });\n    if (!router) {\n      return response.status(404).json({\n        success: false,\n        message: 'router not found',\n      });\n    }\n    return response.status(200).json({ success: true, data: router });\n  } catch (e) {\n    return response\n      .status(500)\n      .json({ success: false, message: 'failed to get a router' });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}