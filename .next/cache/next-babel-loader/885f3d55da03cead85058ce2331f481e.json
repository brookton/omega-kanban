{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport Disclaimer from './disclaimer';\nimport Board from './board';\nimport { useSnackbar } from 'notistack';\nimport { useRouter } from 'next/router';\nexport default function Main(props) {\n  const [projectName, setProjectName] = React.useState(props.projectName);\n  const {\n    0: isAcceptDisclaimer,\n    1: setIsAcceptDisclaimer\n  } = useState(false);\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const router = useRouter();\n  useEffect(() => {\n    if (localStorage.getItem('omegakanbanaccept')) {\n      setIsAcceptDisclaimer(true);\n    }\n  });\n\n  const handleSnackbar = (message, variant) => {\n    enqueueSnackbar(message, {\n      variant\n    });\n  };\n\n  const changeProjectName = project => {\n    handleSnackbar(`Trying to update a project name to ${project}`, 'info');\n    fetch(`/api/update-project-name`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        _id: props._id,\n        project\n      })\n    }).then(res => res.json()).then(data => {\n      if (data.success) {\n        handleSnackbar(`Successfully changed. Will be redirecting...`, 'warning');\n        router.replace(`/${props._id}/${project}`);\n      } else {\n        handleSnackbar(`Failed to update a project name`, 'error');\n      }\n    }).catch(err => {\n      console.error(`Something wrong happened while updating a project name:${err.message}`);\n      handleSnackbar(`Failed to update a project name`, 'error');\n    });\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Board, {\n    _id: props._id,\n    changeProjectName: changeProjectName,\n    projectName: projectName\n  }), !isAcceptDisclaimer && __jsx(Disclaimer, {\n    setIsAcceptDisclaimer: setIsAcceptDisclaimer\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}