{"ast":null,"code":"require('../../middleware/db/mongoose');\n\nimport Column from '../../middleware/models/column';\nimport Card from '../../middleware/models/card';\nimport mongoose from 'mongoose';\nconst ObjectId = mongoose.Types.ObjectId;\nexport default (async (request, response) => {\n  const {\n    _id,\n    projectId\n  } = request.body;\n\n  try {\n    const column = await Column.findOne({\n      projectId,\n      category: 'archive'\n    });\n    await Card.updateOne({\n      _id\n    }, {\n      $set: {\n        columnId: ObjectId(column._id),\n        isArchived: true\n      }\n    });\n    return response.status(200).json({\n      success: true\n    });\n  } catch (e) {\n    return response.status(500).json({\n      success: false,\n      message: 'failed to archive a card'\n    });\n  }\n});","map":{"version":3,"sources":["/Users/heegupark/Desktop/Workspace/MyProject/omega-kanban/pages/api/archive-card.tsx"],"names":["require","Column","Card","mongoose","ObjectId","Types","request","response","_id","projectId","body","column","findOne","category","updateOne","$set","columnId","isArchived","status","json","success","e","message"],"mappings":"AAAAA,OAAO,CAAC,8BAAD,CAAP;;AAGA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,OAAOC,IAAP,MAAiB,8BAAjB;AACA,OAAOC,QAAP,MAAqB,UAArB;AAEA,MAAMC,QAAQ,GAAGD,QAAQ,CAACE,KAAT,CAAeD,QAAhC;AAEA,gBAAe,OAAOE,OAAP,EAAgCC,QAAhC,KAA8D;AAC3E,QAAM;AAAEC,IAAAA,GAAF;AAAOC,IAAAA;AAAP,MAAqBH,OAAO,CAACI,IAAnC;;AACA,MAAI;AACF,UAAMC,MAAM,GAAG,MAAMV,MAAM,CAACW,OAAP,CAAe;AAAEH,MAAAA,SAAF;AAAaI,MAAAA,QAAQ,EAAE;AAAvB,KAAf,CAArB;AAEA,UAAMX,IAAI,CAACY,SAAL,CACJ;AAAEN,MAAAA;AAAF,KADI,EAEJ;AAAEO,MAAAA,IAAI,EAAE;AAAEC,QAAAA,QAAQ,EAAEZ,QAAQ,CAACO,MAAM,CAACH,GAAR,CAApB;AAAkCS,QAAAA,UAAU,EAAE;AAA9C;AAAR,KAFI,CAAN;AAIA,WAAOV,QAAQ,CAACW,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAA1B,CAAP;AACD,GARD,CAQE,OAAOC,CAAP,EAAU;AACV,WAAOd,QAAQ,CACZW,MADI,CACG,GADH,EAEJC,IAFI,CAEC;AAAEC,MAAAA,OAAO,EAAE,KAAX;AAAkBE,MAAAA,OAAO,EAAE;AAA3B,KAFD,CAAP;AAGD;AACF,CAfD","sourcesContent":["require('../../middleware/db/mongoose');\n\nimport { NextApiRequest, NextApiResponse } from 'next';\nimport Column from '../../middleware/models/column';\nimport Card from '../../middleware/models/card';\nimport mongoose from 'mongoose';\n\nconst ObjectId = mongoose.Types.ObjectId;\n\nexport default async (request: NextApiRequest, response: NextApiResponse) => {\n  const { _id, projectId } = request.body;\n  try {\n    const column = await Column.findOne({ projectId, category: 'archive' });\n\n    await Card.updateOne(\n      { _id },\n      { $set: { columnId: ObjectId(column._id), isArchived: true } }\n    );\n    return response.status(200).json({ success: true });\n  } catch (e) {\n    return response\n      .status(500)\n      .json({ success: false, message: 'failed to archive a card' });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}