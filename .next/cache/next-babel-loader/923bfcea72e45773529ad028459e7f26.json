{"ast":null,"code":"import Card from '../../middleware/models/card';\nexport default (async (request, response) => {\n  const {\n    columnId,\n    cardId,\n    startIndex,\n    endIndex\n  } = request.body;\n\n  try {\n    let cards = await Card.find({\n      columnId\n    }).sort({\n      order: 1\n    });\n    console.log(cards);\n    const result = Array.from(cards);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    cards = [...result];\n    console.log(cards);\n    return response.status(200).json({\n      success: true\n    });\n  } catch (e) {\n    return response.status(500).json({\n      success: false,\n      message: 'failed to reorder cards in a same column'\n    });\n  }\n});","map":{"version":3,"sources":["/Users/heegupark/Desktop/Workspace/MyProject/omega-kanban/pages/api/reorder-card.tsx"],"names":["Card","request","response","columnId","cardId","startIndex","endIndex","body","cards","find","sort","order","console","log","result","Array","from","removed","splice","status","json","success","e","message"],"mappings":"AACA,OAAOA,IAAP,MAAiB,8BAAjB;AAEA,gBAAe,OAAOC,OAAP,EAAgCC,QAAhC,KAA8D;AAC3E,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,MAAZ;AAAoBC,IAAAA,UAApB;AAAgCC,IAAAA;AAAhC,MAA6CL,OAAO,CAACM,IAA3D;;AACA,MAAI;AACF,QAAIC,KAAK,GAAG,MAAMR,IAAI,CAACS,IAAL,CAAU;AAAEN,MAAAA;AAAF,KAAV,EAAwBO,IAAxB,CAA6B;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAA7B,CAAlB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AACA,UAAMM,MAAM,GAAGC,KAAK,CAACC,IAAN,CAAWR,KAAX,CAAf;AACA,UAAM,CAACS,OAAD,IAAYH,MAAM,CAACI,MAAP,CAAcb,UAAd,EAA0B,CAA1B,CAAlB;AACAS,IAAAA,MAAM,CAACI,MAAP,CAAcZ,QAAd,EAAwB,CAAxB,EAA2BW,OAA3B;AACAT,IAAAA,KAAK,GAAG,CAAC,GAAGM,MAAJ,CAAR;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AAEA,WAAON,QAAQ,CAACiB,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAA1B,CAAP;AACD,GAVD,CAUE,OAAOC,CAAP,EAAU;AACV,WAAOpB,QAAQ,CAACiB,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAC/BC,MAAAA,OAAO,EAAE,KADsB;AAE/BE,MAAAA,OAAO,EAAE;AAFsB,KAA1B,CAAP;AAID;AACF,CAlBD","sourcesContent":["import { NextApiRequest, NextApiResponse } from 'next';\nimport Card from '../../middleware/models/card';\n\nexport default async (request: NextApiRequest, response: NextApiResponse) => {\n  const { columnId, cardId, startIndex, endIndex } = request.body;\n  try {\n    let cards = await Card.find({ columnId }).sort({ order: 1 });\n    console.log(cards);\n    const result = Array.from(cards);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    cards = [...result];\n    console.log(cards);\n\n    return response.status(200).json({ success: true });\n  } catch (e) {\n    return response.status(500).json({\n      success: false,\n      message: 'failed to reorder cards in a same column',\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}