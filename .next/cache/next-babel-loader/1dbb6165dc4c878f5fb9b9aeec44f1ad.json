{"ast":null,"code":"var _jsxFileName = \"/Users/heegupark/Desktop/Workspace/MyProject/omega-kanban/components/board.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport Top from './top';\nimport Column from './column';\nimport AddSection from './add-section';\nimport { v4 as uuidv4 } from 'uuid';\nimport CardModal from './card-modal';\n\nfunction Board(props) {\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    columns: {\n      'column-0': {\n        id: 'column-0',\n        title: 'Plan',\n        cards: [{\n          id: uuidv4(),\n          cardTitle: 'Create HTML skeleton',\n          note: '',\n          isCardCompleted: false,\n          checklists: [],\n          activities: [],\n          dueDate: new Date(2020, 9, 11),\n          createdAt: new Date(2020, 8, 11),\n          updatedAt: new Date(2020, 8, 11)\n        }],\n        colorIndex: 0,\n        createdAt: new Date(2020, 8, 1),\n        updatedAt: new Date(2020, 8, 11)\n      },\n      'column-1': {\n        id: 'column-1',\n        title: 'Progress',\n        cards: [],\n        colorIndex: 1,\n        createdAt: new Date(2020, 8, 2),\n        updatedAt: new Date(2020, 8, 2)\n      },\n      'column-2': {\n        id: 'column-2',\n        title: 'Complete',\n        cards: [],\n        colorIndex: 2,\n        createdAt: new Date(2020, 8, 3),\n        updatedAt: new Date(2020, 8, 3)\n      }\n    },\n    columnOrder: ['column-0', 'column-1', 'column-2']\n  });\n  const {\n    0: colorIndex,\n    1: setColorIndex\n  } = useState(0);\n  const {\n    0: currentCard,\n    1: setCurrentCard\n  } = useState({});\n  const {\n    0: currentColumn,\n    1: setCurrentColumn\n  } = useState({});\n  useEffect(() => {\n    setColorIndex(state.columnOrder.length - 1);\n  }, []);\n\n  const addSection = sectionTitle => {\n    const newSection = {\n      id: uuidv4(),\n      title: sectionTitle,\n      cards: [],\n      colorIndex: colorIndex + 1,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    setColorIndex(colorIndex + 1);\n    state.columns[newSection.id] = newSection;\n    state.columnOrder.push(newSection.id);\n    setState(_objectSpread({}, state));\n  };\n\n  const addCard = (columnId, cardTitle) => {\n    const newCard = {\n      id: uuidv4(),\n      cardTitle,\n      note: '',\n      isCardCompleted: false,\n      checklists: [],\n      activities: [],\n      dueDate: null,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    addActivity(columnId, newCard.id, 'This card is created');\n    updateDate(columnId, null);\n    state.columns[columnId].cards.push(newCard);\n    setState(_objectSpread({}, state));\n  };\n\n  const completeCard = (columnId, cardId) => {\n    let completeCard = null;\n    state.columns[columnId].cards.map((card, index) => {\n      if (card.id === cardId) {\n        card.isCardCompleted = true;\n        completeCard = card;\n        state.columns[columnId].cards.splice(index, 1);\n      }\n    });\n    state.columns[columnId].cards.push(completeCard);\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `Card is completed`);\n    setState(_objectSpread({}, state));\n  };\n\n  const updateSectionTitle = (columnId, sectionTitle) => {\n    state.columns[columnId].title = sectionTitle;\n    state.columns[columnId].updatedAt = new Date();\n    setState(_objectSpread({}, state));\n  };\n\n  const updateCardTitle = (columnId, cardId, cardTitle) => {\n    state.columns[columnId].cards.map(card => {\n      if (card.id === cardId) {\n        card.cardTitle = cardTitle;\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `Card title is changed to ${cardTitle}`);\n    setState(_objectSpread({}, state));\n  };\n\n  const updateCardNote = (columnId, cardId, note) => {\n    state.columns[columnId].cards.map(card => {\n      if (card.id === cardId) {\n        card.note = note;\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `Card note is changed to ||${note}`);\n    setState(_objectSpread({}, state));\n  };\n\n  const deleteColumn = id => {\n    delete state.columns[id];\n    state.columnOrder.splice(state.columnOrder.indexOf(id), 1);\n    setState(_objectSpread({}, state));\n  };\n\n  const deleteCard = (columnId, cardId) => {\n    state.columns[columnId].cards.map((card, index) => {\n      if (card.id === cardId) {\n        state.columns[columnId].cards.splice(index, 1);\n      }\n    });\n    updateDate(columnId, cardId);\n    setState(_objectSpread({}, state));\n  };\n\n  const archiveCard = () => {\n    state.columns[columnId].cards.map((card, index) => {\n      if (card.id === cardId) {\n        state.columns[columnId].cards.splice(index, 1);\n      }\n    });\n    updateDate(columnId, cardId);\n    setState(_objectSpread({}, state));\n  };\n\n  const onDragEnd = result => {\n    if (!result.destination) {\n      return;\n    }\n\n    if (result.type === 'column') {\n      const columnOrder = reorder(state.columnOrder, result.source.index, result.destination.index);\n      setState(_objectSpread(_objectSpread({}, state), {}, {\n        columnOrder\n      }));\n      return;\n    }\n\n    if (result.source.droppableId === result.destination.droppableId) {\n      const column = state.columns[result.source.droppableId];\n      const cards = reorder(column.cards, result.source.index, result.destination.index);\n\n      const newState = _objectSpread(_objectSpread({}, state), {}, {\n        columns: _objectSpread(_objectSpread({}, state.columns), {}, {\n          [column.id]: _objectSpread(_objectSpread({}, column), {}, {\n            cards\n          })\n        })\n      });\n\n      setState(newState);\n      return;\n    }\n\n    const sourceColumn = state.columns[result.source.droppableId];\n    const destinationColumn = state.columns[result.destination.droppableId];\n    const card = sourceColumn.cards[result.source.index];\n\n    const newSourceColumn = _objectSpread(_objectSpread({}, sourceColumn), {}, {\n      cards: [...sourceColumn.cards]\n    });\n\n    newSourceColumn.cards.splice(result.source.index, 1);\n\n    const newDestinationColumn = _objectSpread(_objectSpread({}, destinationColumn), {}, {\n      cards: [...destinationColumn.cards]\n    });\n\n    newDestinationColumn.cards.splice(result.destination.index, 0, card);\n\n    const newState = _objectSpread(_objectSpread({}, state), {}, {\n      columns: _objectSpread(_objectSpread({}, state.columns), {}, {\n        [newSourceColumn.id]: newSourceColumn,\n        [newDestinationColumn.id]: newDestinationColumn\n      })\n    });\n\n    setState(newState);\n  };\n\n  const getItemStyle = (isDragging, draggableStyle) => _objectSpread({\n    display: 'flex',\n    flexDirection: 'row'\n  }, draggableStyle);\n\n  const reorder = (list, startIndex, endIndex) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    return result;\n  }; //for modal\n\n\n  const [open, setOpen] = React.useState(false);\n\n  const setCardForOpen = (columnId, cardId) => {\n    const card = state.columns[columnId].cards.filter(card => card.id === cardId);\n    setCurrentCard(card[0]);\n    setCurrentColumn(state.columns[columnId]);\n  };\n\n  const handleModalClose = () => {\n    setOpen(false);\n  };\n\n  const addChecklist = (columnId, cardId, checklist) => {\n    state.columns[columnId].cards.map(card => {\n      if (card.id === cardId) {\n        card.checklists.push({\n          id: uuidv4(),\n          checklist,\n          isChecked: false,\n          date: new Date()\n        });\n      }\n    });\n    addActivity(columnId, cardId, `${checklist} is added to the checklist`);\n    updateDate(columnId, cardId);\n    setState(_objectSpread({}, state));\n  };\n\n  const updateDate = (columnId, cardId) => {\n    if (cardId) {\n      state.columns[columnId].cards.map(card => {\n        if (card.id === cardId) {\n          card.updatedAt = new Date();\n        }\n      });\n    }\n\n    state.columns[columnId].updatedAt = new Date();\n    setState(_objectSpread({}, state));\n  };\n\n  const updateChecklist = (columnId, cardId, checklistId, checklistContent) => {\n    state.columns[columnId].cards.map(card => {\n      if (card.id === cardId) {\n        card.checklists.map(checklist => {\n          if (checklist.id === checklistId) {\n            checklist.checklist = checklistContent;\n          }\n        });\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `A checklist is updated to ${checklistContent}`);\n    setState(_objectSpread({}, state));\n  };\n\n  const completeChecklist = (columnId, cardId, checklistId, isChecked) => {\n    state.columns[columnId].cards.map(card => {\n      if (card.id === cardId) {\n        card.checklists.map(checklist => {\n          if (checklist.id === checklistId) {\n            checklist.isChecked = isChecked;\n          }\n        });\n      }\n    });\n    updateDate(columnId, cardId);\n    if (isChecked) addActivity(columnId, cardId, `A checklist is completed`);else addActivity(columnId, cardId, `A checklist is changed to incomplete`);\n    setState(_objectSpread({}, state));\n  };\n\n  const deleteChecklist = (columnId, cardId, checklistId) => {\n    state.columns[columnId].cards.map(card => {\n      if (card.id === cardId) {\n        card.checklists = card.checklists.filter(checklist => checklist.id !== checklistId);\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `A checklist is deleted`);\n    setState(_objectSpread({}, state));\n  };\n\n  const convertDate = date => {\n    const month = date.toString().split(' ')[1];\n    const day = date.toString().split(' ')[2];\n    const year = date.toString().split(' ')[3];\n    return `${month} ${day}, ${year}`;\n  };\n\n  const setDueDate = (columnId, cardId, date) => {\n    state.columns[columnId].cards.map(card => {\n      if (card.id === cardId) {\n        card.dueDate = new Date(date);\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `A due date is set to ${convertDate(date)}`);\n    setState(_objectSpread({}, state));\n  };\n\n  const addActivity = (columnId, cardId, activity) => {\n    state.columns[columnId].cards.map(card => {\n      if (card.id === cardId) {\n        card.activities.unshift({\n          id: uuidv4(),\n          activity,\n          createdAt: new Date()\n        });\n      }\n    });\n    setState(_objectSpread({}, state));\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Top, {\n    setView: props.setView,\n    setProjectName: props.setProjectName,\n    projectName: props.projectName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    className: \"board\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 412,\n      columnNumber: 7\n    }\n  }, __jsx(DragDropContext, {\n    onDragEnd: onDragEnd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 9\n    }\n  }, __jsx(Droppable, {\n    direction: \"horizontal\",\n    droppableId: \"all-droppables\",\n    type: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 11\n    }\n  }, (provided, snapshot) => __jsx(\"div\", _extends({\n    ref: provided.innerRef\n  }, provided.droppableProps, {\n    style: getItemStyle(snapshot.isDragging, provided.droppableProps.style),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 15\n    }\n  }), state.columnOrder.map((columnId, index) => {\n    return __jsx(Column, {\n      key: columnId,\n      column: state.columns[columnId],\n      index: index,\n      reorder: reorder,\n      addCard: addCard,\n      setOpen: setOpen,\n      setCardForOpen: setCardForOpen,\n      updateSectionTitle: updateSectionTitle,\n      deleteColumn: deleteColumn,\n      onDragEnd: onDragEnd,\n      convertDate: convertDate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 21\n      }\n    });\n  }), provided.placeholder))), __jsx(AddSection, {\n    colorIndex: colorIndex,\n    addSection: addSection,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 450,\n      columnNumber: 9\n    }\n  })), open && __jsx(CardModal, {\n    open: true,\n    projectName: props.projectName,\n    currentColumn: currentColumn,\n    handleModalClose: handleModalClose,\n    currentCard: currentCard,\n    addChecklist: addChecklist,\n    updateChecklist: updateChecklist,\n    addActivity: addActivity,\n    updateDate: updateDate,\n    updateCardTitle: updateCardTitle,\n    updateCardNote: updateCardNote,\n    completeChecklist: completeChecklist,\n    deleteChecklist: deleteChecklist,\n    setDueDate: setDueDate,\n    convertDate: convertDate,\n    completeCard: completeCard,\n    deleteCard: deleteCard,\n    archiveCard: archiveCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 453,\n      columnNumber: 9\n    }\n  }));\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/heegupark/Desktop/Workspace/MyProject/omega-kanban/components/board.tsx"],"names":["React","useState","useEffect","DragDropContext","Droppable","Top","Column","AddSection","v4","uuidv4","CardModal","Board","props","state","setState","columns","id","title","cards","cardTitle","note","isCardCompleted","checklists","activities","dueDate","Date","createdAt","updatedAt","colorIndex","columnOrder","setColorIndex","currentCard","setCurrentCard","currentColumn","setCurrentColumn","length","addSection","sectionTitle","newSection","push","addCard","columnId","newCard","addActivity","updateDate","completeCard","cardId","map","card","index","splice","updateSectionTitle","updateCardTitle","updateCardNote","deleteColumn","indexOf","deleteCard","archiveCard","onDragEnd","result","destination","type","reorder","source","droppableId","column","newState","sourceColumn","destinationColumn","newSourceColumn","newDestinationColumn","getItemStyle","isDragging","draggableStyle","display","flexDirection","list","startIndex","endIndex","Array","from","removed","open","setOpen","setCardForOpen","filter","handleModalClose","addChecklist","checklist","isChecked","date","updateChecklist","checklistId","checklistContent","completeChecklist","deleteChecklist","convertDate","month","toString","split","day","year","setDueDate","activity","unshift","setView","setProjectName","projectName","provided","snapshot","innerRef","droppableProps","style","placeholder"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport Top from './top';\nimport Column from './column';\nimport AddSection from './add-section';\nimport { v4 as uuidv4 } from 'uuid';\nimport CardModal from './card-modal';\n\nfunction Board(props: any) {\n  const [state, setState] = useState({\n    columns: {\n      'column-0': {\n        id: 'column-0',\n        title: 'Plan',\n        cards: [\n          {\n            id: uuidv4(),\n            cardTitle: 'Create HTML skeleton',\n            note: '',\n            isCardCompleted: false,\n            checklists: [],\n            activities: [],\n            dueDate: new Date(2020, 9, 11),\n            createdAt: new Date(2020, 8, 11),\n            updatedAt: new Date(2020, 8, 11),\n          },\n        ],\n        colorIndex: 0,\n        createdAt: new Date(2020, 8, 1),\n        updatedAt: new Date(2020, 8, 11),\n      },\n      'column-1': {\n        id: 'column-1',\n        title: 'Progress',\n        cards: [],\n        colorIndex: 1,\n        createdAt: new Date(2020, 8, 2),\n        updatedAt: new Date(2020, 8, 2),\n      },\n      'column-2': {\n        id: 'column-2',\n        title: 'Complete',\n        cards: [],\n        colorIndex: 2,\n        createdAt: new Date(2020, 8, 3),\n        updatedAt: new Date(2020, 8, 3),\n      },\n    },\n    columnOrder: ['column-0', 'column-1', 'column-2'],\n  } as any);\n\n  const [colorIndex, setColorIndex] = useState(0);\n  const [currentCard, setCurrentCard] = useState({} as any);\n  const [currentColumn, setCurrentColumn] = useState({} as any);\n\n  useEffect(() => {\n    setColorIndex(state.columnOrder.length - 1);\n  }, []);\n\n  const addSection = (sectionTitle: any) => {\n    const newSection = {\n      id: uuidv4(),\n      title: sectionTitle,\n      cards: [],\n      colorIndex: colorIndex + 1,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    setColorIndex(colorIndex + 1);\n    state.columns[newSection.id] = newSection;\n    state.columnOrder.push(newSection.id);\n    setState({\n      ...state,\n    } as any);\n  };\n\n  const addCard = (columnId: any, cardTitle: any) => {\n    const newCard = {\n      id: uuidv4(),\n      cardTitle,\n      note: '',\n      isCardCompleted: false,\n      checklists: [],\n      activities: [],\n      dueDate: null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    addActivity(columnId, newCard.id, 'This card is created');\n    updateDate(columnId, null);\n    state.columns[columnId].cards.push(newCard);\n    setState({\n      ...state,\n    } as any);\n  };\n\n  const completeCard = (columnId: any, cardId: any) => {\n    let completeCard = null;\n    state.columns[columnId].cards.map((card: any, index: any) => {\n      if (card.id === cardId) {\n        card.isCardCompleted = true;\n        completeCard = card;\n        state.columns[columnId].cards.splice(index, 1);\n      }\n    });\n    state.columns[columnId].cards.push(completeCard);\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `Card is completed`);\n    setState({\n      ...state,\n    } as any);\n  };\n  const updateSectionTitle = (columnId: any, sectionTitle: any) => {\n    state.columns[columnId].title = sectionTitle;\n    state.columns[columnId].updatedAt = new Date();\n    setState({\n      ...state,\n    } as any);\n  };\n\n  const updateCardTitle = (columnId: any, cardId: any, cardTitle: any) => {\n    state.columns[columnId].cards.map((card: any) => {\n      if (card.id === cardId) {\n        card.cardTitle = cardTitle;\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `Card title is changed to ${cardTitle}`);\n    setState({\n      ...state,\n    } as any);\n  };\n\n  const updateCardNote = (columnId: any, cardId: any, note: any) => {\n    state.columns[columnId].cards.map((card: any) => {\n      if (card.id === cardId) {\n        card.note = note;\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `Card note is changed to ||${note}`);\n    setState({\n      ...state,\n    } as any);\n  };\n\n  const deleteColumn = (id: any) => {\n    delete state.columns[id];\n    state.columnOrder.splice(state.columnOrder.indexOf(id), 1);\n    setState({\n      ...state,\n    } as any);\n  };\n\n  const deleteCard = (columnId: any, cardId: any) => {\n    state.columns[columnId].cards.map((card: any, index: any) => {\n      if (card.id === cardId) {\n        state.columns[columnId].cards.splice(index, 1);\n      }\n    });\n    updateDate(columnId, cardId);\n    setState({\n      ...state,\n    } as any);\n  };\n\n  const archiveCard = () => {\n    state.columns[columnId].cards.map((card: any, index: any) => {\n      if (card.id === cardId) {\n        state.columns[columnId].cards.splice(index, 1);\n      }\n    });\n    updateDate(columnId, cardId);\n    setState({\n      ...state,\n    } as any);\n  };\n  const onDragEnd = (result: any) => {\n    if (!result.destination) {\n      return;\n    }\n\n    if (result.type === 'column') {\n      const columnOrder = reorder(\n        state.columnOrder,\n        result.source.index,\n        result.destination.index\n      );\n      setState({\n        ...state,\n        columnOrder,\n      } as any);\n      return;\n    }\n\n    if (result.source.droppableId === result.destination.droppableId) {\n      const column = state.columns[result.source.droppableId];\n      const cards = reorder(\n        column.cards,\n        result.source.index,\n        result.destination.index\n      );\n\n      const newState = {\n        ...state,\n        columns: {\n          ...state.columns,\n          [column.id]: {\n            ...column,\n            cards,\n          },\n        },\n      };\n      setState(newState);\n      return;\n    }\n\n    const sourceColumn = state.columns[result.source.droppableId];\n    const destinationColumn = state.columns[result.destination.droppableId];\n    const card = sourceColumn.cards[result.source.index];\n\n    const newSourceColumn = {\n      ...sourceColumn,\n      cards: [...sourceColumn.cards],\n    };\n    newSourceColumn.cards.splice(result.source.index, 1);\n\n    const newDestinationColumn = {\n      ...destinationColumn,\n      cards: [...destinationColumn.cards],\n    };\n    newDestinationColumn.cards.splice(result.destination.index, 0, card);\n\n    const newState = {\n      ...state,\n      columns: {\n        ...state.columns,\n        [newSourceColumn.id]: newSourceColumn,\n        [newDestinationColumn.id]: newDestinationColumn,\n      },\n    };\n\n    setState(newState);\n  };\n\n  const getItemStyle = (isDragging: any, draggableStyle: any) => ({\n    display: 'flex',\n    flexDirection: 'row',\n    ...draggableStyle,\n  });\n\n  const reorder = (list: any, startIndex: any, endIndex: any) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    return result;\n  };\n\n  //for modal\n  const [open, setOpen] = React.useState(false);\n\n  const setCardForOpen = (columnId: any, cardId: any) => {\n    const card = state.columns[columnId].cards.filter(\n      (card: any) => card.id === cardId\n    );\n    setCurrentCard(card[0]);\n    setCurrentColumn(state.columns[columnId]);\n  };\n\n  const handleModalClose = () => {\n    setOpen(false);\n  };\n\n  const addChecklist = (columnId: any, cardId: any, checklist: any) => {\n    state.columns[columnId].cards.map((card: any) => {\n      if (card.id === cardId) {\n        card.checklists.push({\n          id: uuidv4(),\n          checklist,\n          isChecked: false,\n          date: new Date(),\n        });\n      }\n    });\n    addActivity(columnId, cardId, `${checklist} is added to the checklist`);\n    updateDate(columnId, cardId);\n    setState({\n      ...state,\n    } as any);\n  };\n\n  const updateDate = (columnId: any, cardId: any) => {\n    if (cardId) {\n      state.columns[columnId].cards.map((card: any) => {\n        if (card.id === cardId) {\n          card.updatedAt = new Date();\n        }\n      });\n    }\n    state.columns[columnId].updatedAt = new Date();\n    setState({\n      ...state,\n    } as any);\n  };\n\n  const updateChecklist = (\n    columnId: any,\n    cardId: any,\n    checklistId: any,\n    checklistContent: any\n  ) => {\n    state.columns[columnId].cards.map((card: any) => {\n      if (card.id === cardId) {\n        card.checklists.map((checklist: any) => {\n          if (checklist.id === checklistId) {\n            checklist.checklist = checklistContent;\n          }\n        });\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(\n      columnId,\n      cardId,\n      `A checklist is updated to ${checklistContent}`\n    );\n    setState({\n      ...state,\n    } as any);\n  };\n\n  const completeChecklist = (\n    columnId: any,\n    cardId: any,\n    checklistId: any,\n    isChecked: any\n  ) => {\n    state.columns[columnId].cards.map((card: any) => {\n      if (card.id === cardId) {\n        card.checklists.map((checklist: any) => {\n          if (checklist.id === checklistId) {\n            checklist.isChecked = isChecked;\n          }\n        });\n      }\n    });\n    updateDate(columnId, cardId);\n    if (isChecked) addActivity(columnId, cardId, `A checklist is completed`);\n    else addActivity(columnId, cardId, `A checklist is changed to incomplete`);\n    setState({\n      ...state,\n    } as any);\n  };\n\n  const deleteChecklist = (columnId: any, cardId: any, checklistId: any) => {\n    state.columns[columnId].cards.map((card: any) => {\n      if (card.id === cardId) {\n        card.checklists = card.checklists.filter(\n          (checklist: any) => checklist.id !== checklistId\n        );\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `A checklist is deleted`);\n    setState({\n      ...state,\n    } as any);\n  };\n\n  const convertDate = (date: Date) => {\n    const month = date.toString().split(' ')[1];\n    const day = date.toString().split(' ')[2];\n    const year = date.toString().split(' ')[3];\n    return `${month} ${day}, ${year}`;\n  };\n\n  const setDueDate = (columnId: any, cardId: any, date: Date) => {\n    state.columns[columnId].cards.map((card: any) => {\n      if (card.id === cardId) {\n        card.dueDate = new Date(date);\n      }\n    });\n    updateDate(columnId, cardId);\n    addActivity(columnId, cardId, `A due date is set to ${convertDate(date)}`);\n    setState({\n      ...state,\n    } as any);\n  };\n\n  const addActivity = (columnId: any, cardId: any, activity: any) => {\n    state.columns[columnId].cards.map((card: any) => {\n      if (card.id === cardId) {\n        card.activities.unshift({\n          id: uuidv4(),\n          activity,\n          createdAt: new Date(),\n        });\n      }\n    });\n    setState({\n      ...state,\n    } as any);\n  };\n\n  return (\n    <>\n      <Top\n        setView={props.setView}\n        setProjectName={props.setProjectName}\n        projectName={props.projectName}\n      />\n      <div className=\"board\">\n        <DragDropContext onDragEnd={onDragEnd}>\n          <Droppable\n            direction=\"horizontal\"\n            droppableId=\"all-droppables\"\n            type=\"column\"\n          >\n            {(provided: any, snapshot: any) => (\n              <div\n                ref={provided.innerRef}\n                {...provided.droppableProps}\n                style={getItemStyle(\n                  snapshot.isDragging,\n                  provided.droppableProps.style\n                )}\n              >\n                {state.columnOrder.map((columnId: any, index: any) => {\n                  return (\n                    <Column\n                      key={columnId}\n                      column={state.columns[columnId]}\n                      index={index}\n                      reorder={reorder}\n                      addCard={addCard}\n                      setOpen={setOpen}\n                      setCardForOpen={setCardForOpen}\n                      updateSectionTitle={updateSectionTitle}\n                      deleteColumn={deleteColumn}\n                      onDragEnd={onDragEnd}\n                      convertDate={convertDate}\n                    />\n                  );\n                })}\n                {provided.placeholder}\n              </div>\n            )}\n          </Droppable>\n        </DragDropContext>\n        <AddSection colorIndex={colorIndex} addSection={addSection} />\n      </div>\n      {open && (\n        <CardModal\n          open={true}\n          projectName={props.projectName}\n          currentColumn={currentColumn}\n          handleModalClose={handleModalClose}\n          currentCard={currentCard}\n          addChecklist={addChecklist}\n          updateChecklist={updateChecklist}\n          addActivity={addActivity}\n          updateDate={updateDate}\n          updateCardTitle={updateCardTitle}\n          updateCardNote={updateCardNote}\n          completeChecklist={completeChecklist}\n          deleteChecklist={deleteChecklist}\n          setDueDate={setDueDate}\n          convertDate={convertDate}\n          completeCard={completeCard}\n          deleteCard={deleteCard}\n          archiveCard={archiveCard}\n        />\n      )}\n    </>\n  );\n}\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}